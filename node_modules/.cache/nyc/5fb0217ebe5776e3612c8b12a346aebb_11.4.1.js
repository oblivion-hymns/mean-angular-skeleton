var cov_11v7kdbdmu=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',hash='05bd2cc4c414b4c434cdd1e04a4e8f8d44672d3f',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:18},end:{line:2,column:61}},'2':{start:{line:3,column:23},end:{line:3,column:51}},'3':{start:{line:4,column:20},end:{line:4,column:67}},'4':{start:{line:5,column:16},end:{line:5,column:55}},'5':{start:{line:6,column:13},end:{line:6,column:48}},'6':{start:{line:7,column:16},end:{line:7,column:55}},'7':{start:{line:13,column:19},end:{line:19,column:4}},'8':{start:{line:20,column:2},end:{line:20,column:18}},'9':{start:{line:32,column:20},end:{line:32,column:35}},'10':{start:{line:33,column:24},end:{line:33,column:51}},'11':{start:{line:36,column:22},end:{line:36,column:39}},'12':{start:{line:37,column:26},end:{line:37,column:57}},'13':{start:{line:40,column:19},end:{line:40,column:63}},'14':{start:{line:41,column:32},end:{line:41,column:107}},'15':{start:{line:44,column:23},end:{line:44,column:78}},'16':{start:{line:45,column:23},end:{line:67,column:4}},'17':{start:{line:46,column:26},end:{line:46,column:33}},'18':{start:{line:47,column:3},end:{line:47,column:31}},'19':{start:{line:49,column:16},end:{line:49,column:19}},'20':{start:{line:50,column:14},end:{line:50,column:16}},'21':{start:{line:51,column:19},end:{line:51,column:21}},'22':{start:{line:52,column:3},end:{line:57,column:4}},'23':{start:{line:54,column:4},end:{line:54,column:31}},'24':{start:{line:55,column:4},end:{line:55,column:41}},'25':{start:{line:56,column:4},end:{line:56,column:35}},'26':{start:{line:59,column:32},end:{line:65,column:4}},'27':{start:{line:66,column:3},end:{line:66,column:31}},'28':{start:{line:69,column:2},end:{line:69,column:22}},'29':{start:{line:79,column:18},end:{line:79,column:31}},'30':{start:{line:80,column:18},end:{line:87,column:4}},'31':{start:{line:81,column:3},end:{line:84,column:4}},'32':{start:{line:83,column:4},end:{line:83,column:14}},'33':{start:{line:86,column:3},end:{line:86,column:35}},'34':{start:{line:89,column:2},end:{line:89,column:17}},'35':{start:{line:99,column:18},end:{line:111,column:4}},'36':{start:{line:100,column:27},end:{line:100,column:29}},'37':{start:{line:101,column:3},end:{line:108,column:4}},'38':{start:{line:103,column:16},end:{line:103,column:23}},'39':{start:{line:104,column:23},end:{line:104,column:37}},'40':{start:{line:105,column:21},end:{line:105,column:33}},'41':{start:{line:106,column:23},end:{line:106,column:57}},'42':{start:{line:107,column:4},end:{line:107,column:39}},'43':{start:{line:110,column:3},end:{line:110,column:41}},'44':{start:{line:112,column:2},end:{line:112,column:17}},'45':{start:{line:124,column:18},end:{line:124,column:31}},'46':{start:{line:125,column:23},end:{line:125,column:54}},'47':{start:{line:127,column:18},end:{line:135,column:4}},'48':{start:{line:128,column:21},end:{line:128,column:42}},'49':{start:{line:129,column:22},end:{line:129,column:48}},'50':{start:{line:130,column:3},end:{line:130,column:78}},'51':{start:{line:132,column:17},end:{line:132,column:61}},'52':{start:{line:133,column:18},end:{line:133,column:51}},'53':{start:{line:134,column:3},end:{line:134,column:80}},'54':{start:{line:137,column:2},end:{line:137,column:17}},'55':{start:{line:149,column:23},end:{line:149,column:54}},'56':{start:{line:150,column:16},end:{line:150,column:60}},'57':{start:{line:151,column:17},end:{line:151,column:46}},'58':{start:{line:152,column:18},end:{line:152,column:87}},'59':{start:{line:153,column:2},end:{line:171,column:5}},'60':{start:{line:156,column:19},end:{line:156,column:32}},'61':{start:{line:157,column:23},end:{line:157,column:52}},'62':{start:{line:158,column:28},end:{line:158,column:51}},'63':{start:{line:159,column:3},end:{line:159,column:55}},'64':{start:{line:163,column:16},end:{line:163,column:23}},'65':{start:{line:164,column:28},end:{line:164,column:35}},'66':{start:{line:165,column:3},end:{line:170,column:4}},'67':{start:{line:167,column:22},end:{line:167,column:43}},'68':{start:{line:168,column:23},end:{line:168,column:74}},'69':{start:{line:169,column:4},end:{line:169,column:78}},'70':{start:{line:173,column:2},end:{line:173,column:17}},'71':{start:{line:177,column:0},end:{line:177,column:35}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:11,column:1},end:{line:11,column:2}},loc:{start:{line:12,column:1},end:{line:21,column:2}},line:12},'1':{name:'(anonymous_1)',decl:{start:{line:29,column:1},end:{line:29,column:2}},loc:{start:{line:30,column:1},end:{line:70,column:2}},line:30},'2':{name:'(anonymous_2)',decl:{start:{line:45,column:54},end:{line:45,column:55}},loc:{start:{line:45,column:62},end:{line:67,column:3}},line:45},'3':{name:'(anonymous_3)',decl:{start:{line:77,column:1},end:{line:77,column:2}},loc:{start:{line:78,column:1},end:{line:90,column:2}},line:78},'4':{name:'(anonymous_4)',decl:{start:{line:80,column:52},end:{line:80,column:53}},loc:{start:{line:80,column:60},end:{line:87,column:3}},line:80},'5':{name:'(anonymous_5)',decl:{start:{line:97,column:1},end:{line:97,column:2}},loc:{start:{line:98,column:1},end:{line:113,column:2}},line:98},'6':{name:'(anonymous_6)',decl:{start:{line:99,column:102},end:{line:99,column:103}},loc:{start:{line:99,column:110},end:{line:111,column:3}},line:99},'7':{name:'(anonymous_7)',decl:{start:{line:122,column:1},end:{line:122,column:2}},loc:{start:{line:123,column:1},end:{line:138,column:2}},line:123},'8':{name:'(anonymous_8)',decl:{start:{line:127,column:53},end:{line:127,column:54}},loc:{start:{line:127,column:61},end:{line:131,column:3}},line:127},'9':{name:'(anonymous_9)',decl:{start:{line:131,column:10},end:{line:131,column:11}},loc:{start:{line:131,column:16},end:{line:135,column:3}},line:131},'10':{name:'(anonymous_10)',decl:{start:{line:147,column:1},end:{line:147,column:2}},loc:{start:{line:148,column:1},end:{line:174,column:2}},line:148},'11':{name:'(anonymous_11)',decl:{start:{line:153,column:15},end:{line:153,column:16}},loc:{start:{line:153,column:21},end:{line:160,column:3}},line:153},'12':{name:'(anonymous_12)',decl:{start:{line:160,column:10},end:{line:160,column:11}},loc:{start:{line:160,column:18},end:{line:171,column:3}},line:160}},branchMap:{'0':{loc:{start:{line:52,column:3},end:{line:57,column:4}},type:'if',locations:[{start:{line:52,column:3},end:{line:57,column:4}},{start:{line:52,column:3},end:{line:57,column:4}}],line:52},'1':{loc:{start:{line:81,column:3},end:{line:84,column:4}},type:'if',locations:[{start:{line:81,column:3},end:{line:84,column:4}},{start:{line:81,column:3},end:{line:84,column:4}}],line:81},'2':{loc:{start:{line:165,column:3},end:{line:170,column:4}},type:'if',locations:[{start:{line:165,column:3},end:{line:170,column:4}},{start:{line:165,column:3},end:{line:170,column:4}}],line:165},'3':{loc:{start:{line:165,column:7},end:{line:165,column:56}},type:'binary-expr',locations:[{start:{line:165,column:7},end:{line:165,column:24}},{start:{line:165,column:28},end:{line:165,column:56}}],line:165}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_11v7kdbdmu.s[0]++,require('mongoose'));const AgencyDao=(cov_11v7kdbdmu.s[1]++,require('./../../agency/models/agency-dao'));const BuildingAgency=(cov_11v7kdbdmu.s[2]++,require('./building-agency'));const BuildingDao=(cov_11v7kdbdmu.s[3]++,require('./../../building/models/building-dao'));const RoleDao=(cov_11v7kdbdmu.s[4]++,require('./../../auth/models/role-dao'));const User=(cov_11v7kdbdmu.s[5]++,require('./../../user/models/user'));const UserDao=(cov_11v7kdbdmu.s[6]++,require('./../../user/models/user-dao'));class BuildingAgencyDao{getPopulateOptions(){cov_11v7kdbdmu.f[0]++;const populate=(cov_11v7kdbdmu.s[7]++,[{path:'reps',model:'User'},{path:'incidents.contacts',model:'Contact'}]);cov_11v7kdbdmu.s[8]++;return populate;}/**
	 * Loads a single Building-Agency Unit with the given IDs
	 * @param string buildingId
	 * @param string agencyId
	 * @return Promise
	 */loadOne(buildingId,agencyId){cov_11v7kdbdmu.f[1]++;//Get agency
const agencyDao=(cov_11v7kdbdmu.s[9]++,new AgencyDao());const agencyPromise=(cov_11v7kdbdmu.s[10]++,agencyDao.loadOne(agencyId));//Get building
const buildingDao=(cov_11v7kdbdmu.s[11]++,new BuildingDao());const buildingPromise=(cov_11v7kdbdmu.s[12]++,buildingDao.loadOne(buildingId));//Get building-agency unit
const bauQuery=(cov_11v7kdbdmu.s[13]++,{buildingId:buildingId,agencyId:agencyId});const buildingAgencyPromise=(cov_11v7kdbdmu.s[14]++,BuildingAgency.findOne(bauQuery).populate(this.getPopulateOptions()).exec());//Merge promises
const joinPromises=(cov_11v7kdbdmu.s[15]++,[agencyPromise,buildingPromise,buildingAgencyPromise]);const mergePromise=(cov_11v7kdbdmu.s[16]++,Promise.all(joinPromises).then(data=>{cov_11v7kdbdmu.f[2]++;const buildingAgency=(cov_11v7kdbdmu.s[17]++,data[2]);cov_11v7kdbdmu.s[18]++;console.log(buildingAgency);let health=(cov_11v7kdbdmu.s[19]++,0.0);let reps=(cov_11v7kdbdmu.s[20]++,[]);let incidents=(cov_11v7kdbdmu.s[21]++,[]);cov_11v7kdbdmu.s[22]++;if(buildingAgency){cov_11v7kdbdmu.b[0][0]++;cov_11v7kdbdmu.s[23]++;reps=buildingAgency.reps;cov_11v7kdbdmu.s[24]++;incidents=buildingAgency.incidents;cov_11v7kdbdmu.s[25]++;health=buildingAgency.health;}else{cov_11v7kdbdmu.b[0][1]++;}const loadedBuildingAgency=(cov_11v7kdbdmu.s[26]++,{agency:data[0].agency,building:data[1].building,health:health,reps:reps,incidents:incidents});cov_11v7kdbdmu.s[27]++;return loadedBuildingAgency;}));cov_11v7kdbdmu.s[28]++;return mergePromise;}/**
	 * Loads all Building-agency units for which the given request's user is a rep
	 * @param Request req
	 * @return Promise
	 */loadForLoggedInUser(req){cov_11v7kdbdmu.f[3]++;const userDao=(cov_11v7kdbdmu.s[29]++,new UserDao());const promise=(cov_11v7kdbdmu.s[30]++,userDao.loadFromRequest(req).then(user=>{cov_11v7kdbdmu.f[4]++;cov_11v7kdbdmu.s[31]++;if(!user){cov_11v7kdbdmu.b[1][0]++;cov_11v7kdbdmu.s[32]++;return[];}else{cov_11v7kdbdmu.b[1][1]++;}cov_11v7kdbdmu.s[33]++;return this.loadForRep(user.id);}));cov_11v7kdbdmu.s[34]++;return promise;}/**
	 * Loads all building-agency units for which the given user is a rep
	 * @param string userId
	 * @return Promise
	 */loadForRep(userId){cov_11v7kdbdmu.f[5]++;const promise=(cov_11v7kdbdmu.s[35]++,BuildingAgency.find({reps:userId}).populate(this.getPopulateOptions()).exec().then(baus=>{cov_11v7kdbdmu.f[6]++;let constructPromises=(cov_11v7kdbdmu.s[36]++,[]);cov_11v7kdbdmu.s[37]++;for(let i=0;i<baus.length;i++){const bau=(cov_11v7kdbdmu.s[38]++,baus[i]);const buildingId=(cov_11v7kdbdmu.s[39]++,bau.buildingId);const agencyId=(cov_11v7kdbdmu.s[40]++,bau.agencyId);const bauPromise=(cov_11v7kdbdmu.s[41]++,this.loadOne(buildingId,agencyId));cov_11v7kdbdmu.s[42]++;constructPromises.push(bauPromise);}cov_11v7kdbdmu.s[43]++;return Promise.all(constructPromises);}));cov_11v7kdbdmu.s[44]++;return promise;}/**
	 * Assigns a rep to the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[7]++;const roleDao=(cov_11v7kdbdmu.s[45]++,new RoleDao());const userObjectId=(cov_11v7kdbdmu.s[46]++,mongoose.Types.ObjectId(userId));const promise=(cov_11v7kdbdmu.s[47]++,roleDao.loadBuildingRepRole().then(role=>{cov_11v7kdbdmu.f[8]++;const userQuery=(cov_11v7kdbdmu.s[48]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[49]++,{$addToSet:{roles:role}});cov_11v7kdbdmu.s[50]++;return User.findOneAndUpdate(userQuery,userUpdate,{upsert:true}).exec();}).then(()=>{cov_11v7kdbdmu.f[9]++;const query=(cov_11v7kdbdmu.s[51]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[52]++,{$addToSet:{reps:userObjectId}});cov_11v7kdbdmu.s[53]++;return BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec();}));cov_11v7kdbdmu.s[54]++;return promise;}/**
	 * Removes a rep from the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */unassignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[10]++;const userObjectId=(cov_11v7kdbdmu.s[55]++,mongoose.Types.ObjectId(userId));const query=(cov_11v7kdbdmu.s[56]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[57]++,{$pull:{reps:userObjectId}});const promise=(cov_11v7kdbdmu.s[58]++,BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec());cov_11v7kdbdmu.s[59]++;promise.then(()=>{cov_11v7kdbdmu.f[11]++;//Once the BAU has been updated, get the Building Rep role and any buildings
//still assigned to the user
const roleDao=(cov_11v7kdbdmu.s[60]++,new RoleDao());const rolePromise=(cov_11v7kdbdmu.s[61]++,roleDao.loadBuildingRepRole());const buildingsPromise=(cov_11v7kdbdmu.s[62]++,this.loadForRep(userId));cov_11v7kdbdmu.s[63]++;return Promise.all([rolePromise,buildingsPromise]);}).then(data=>{cov_11v7kdbdmu.f[12]++;//If the user has no buildings assigned, automatically relinquish them
//of their Building Rep role
const role=(cov_11v7kdbdmu.s[64]++,data[0]);const buildingAgencies=(cov_11v7kdbdmu.s[65]++,data[1]);cov_11v7kdbdmu.s[66]++;if((cov_11v7kdbdmu.b[3][0]++,!buildingAgencies)||(cov_11v7kdbdmu.b[3][1]++,buildingAgencies.length==0)){cov_11v7kdbdmu.b[2][0]++;const userQuery=(cov_11v7kdbdmu.s[67]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[68]++,{$pull:{roles:mongoose.Types.ObjectId(role._id)}});cov_11v7kdbdmu.s[69]++;return User.findOneAndUpdate(userQuery,userUpdate,{multi:true}).exec();}else{cov_11v7kdbdmu.b[2][1]++;}});cov_11v7kdbdmu.s[70]++;return promise;}}cov_11v7kdbdmu.s[71]++;module.exports=BuildingAgencyDao;
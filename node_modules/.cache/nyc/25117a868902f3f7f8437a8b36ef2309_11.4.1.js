var cov_2akcptdj3o=function(){var path='/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',hash='69f27ed3c9f02d806379dc4ed556279b01891510',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:17},end:{line:2,column:38}},'2':{start:{line:3,column:23},end:{line:3,column:83}},'3':{start:{line:4,column:16},end:{line:4,column:55}},'4':{start:{line:10,column:19},end:{line:21,column:4}},'5':{start:{line:22,column:2},end:{line:22,column:18}},'6':{start:{line:32,column:19},end:{line:32,column:44}},'7':{start:{line:33,column:2},end:{line:33,column:63}},'8':{start:{line:42,column:19},end:{line:42,column:44}},'9':{start:{line:43,column:2},end:{line:43,column:81}},'10':{start:{line:52,column:19},end:{line:52,column:44}},'11':{start:{line:53,column:2},end:{line:53,column:78}},'12':{start:{line:64,column:24},end:{line:64,column:26}},'13':{start:{line:65,column:2},end:{line:69,column:3}},'14':{start:{line:67,column:26},end:{line:67,column:62}},'15':{start:{line:68,column:3},end:{line:68,column:40}},'16':{start:{line:71,column:2},end:{line:74,column:5}},'17':{start:{line:72,column:3},end:{line:72,column:44}},'18':{start:{line:73,column:3},end:{line:73,column:30}},'19':{start:{line:85,column:2},end:{line:88,column:3}},'20':{start:{line:87,column:3},end:{line:87,column:10}},'21':{start:{line:90,column:2},end:{line:90,column:25}},'22':{start:{line:93,column:2},end:{line:97,column:3}},'23':{start:{line:96,column:3},end:{line:96,column:48}},'24':{start:{line:100,column:2},end:{line:100,column:39}},'25':{start:{line:101,column:2},end:{line:104,column:3}},'26':{start:{line:103,column:3},end:{line:103,column:54}},'27':{start:{line:106,column:2},end:{line:109,column:3}},'28':{start:{line:108,column:3},end:{line:108,column:30}},'29':{start:{line:111,column:2},end:{line:121,column:3}},'30':{start:{line:113,column:3},end:{line:113,column:24}},'31':{start:{line:117,column:3},end:{line:120,column:4}},'32':{start:{line:119,column:4},end:{line:119,column:73}},'33':{start:{line:123,column:2},end:{line:123,column:89}},'34':{start:{line:134,column:2},end:{line:146,column:5}},'35':{start:{line:135,column:3},end:{line:135,column:29}},'36':{start:{line:136,column:3},end:{line:145,column:6}},'37':{start:{line:137,column:27},end:{line:137,column:47}},'38':{start:{line:138,column:20},end:{line:138,column:33}},'39':{start:{line:139,column:4},end:{line:142,column:7}},'40':{start:{line:140,column:18},end:{line:140,column:47}},'41':{start:{line:141,column:5},end:{line:141,column:95}},'42':{start:{line:144,column:4},end:{line:144,column:38}},'43':{start:{line:156,column:16},end:{line:156,column:35}},'44':{start:{line:157,column:18},end:{line:169,column:4}},'45':{start:{line:158,column:21},end:{line:158,column:33}},'46':{start:{line:159,column:17},end:{line:159,column:67}},'47':{start:{line:160,column:18},end:{line:165,column:4}},'48':{start:{line:166,column:3},end:{line:168,column:6}},'49':{start:{line:167,column:4},end:{line:167,column:38}},'50':{start:{line:171,column:2},end:{line:171,column:17}},'51':{start:{line:179,column:36},end:{line:179,column:106}},'52':{start:{line:180,column:36},end:{line:180,column:67}},'53':{start:{line:181,column:2},end:{line:181,column:40}},'54':{start:{line:185,column:0},end:{line:185,column:29}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:8,column:1},end:{line:8,column:2}},loc:{start:{line:9,column:1},end:{line:23,column:2}},line:9},'1':{name:'(anonymous_1)',decl:{start:{line:30,column:1},end:{line:30,column:2}},loc:{start:{line:31,column:1},end:{line:34,column:2}},line:31},'2':{name:'(anonymous_2)',decl:{start:{line:40,column:1},end:{line:40,column:2}},loc:{start:{line:41,column:1},end:{line:44,column:2}},line:41},'3':{name:'(anonymous_3)',decl:{start:{line:50,column:1},end:{line:50,column:2}},loc:{start:{line:51,column:1},end:{line:54,column:2}},line:51},'4':{name:'(anonymous_4)',decl:{start:{line:62,column:1},end:{line:62,column:2}},loc:{start:{line:63,column:1},end:{line:75,column:2}},line:63},'5':{name:'(anonymous_5)',decl:{start:{line:71,column:39},end:{line:71,column:40}},loc:{start:{line:71,column:51},end:{line:74,column:3}},line:71},'6':{name:'(anonymous_6)',decl:{start:{line:82,column:1},end:{line:82,column:2}},loc:{start:{line:83,column:1},end:{line:124,column:2}},line:83},'7':{name:'(anonymous_7)',decl:{start:{line:132,column:1},end:{line:132,column:2}},loc:{start:{line:133,column:1},end:{line:147,column:2}},line:133},'8':{name:'(anonymous_8)',decl:{start:{line:134,column:39},end:{line:134,column:40}},loc:{start:{line:134,column:51},end:{line:146,column:3}},line:134},'9':{name:'(anonymous_9)',decl:{start:{line:136,column:31},end:{line:136,column:32}},loc:{start:{line:136,column:37},end:{line:145,column:4}},line:136},'10':{name:'(anonymous_10)',decl:{start:{line:139,column:44},end:{line:139,column:45}},loc:{start:{line:139,column:52},end:{line:142,column:5}},line:139},'11':{name:'(anonymous_11)',decl:{start:{line:154,column:1},end:{line:154,column:2}},loc:{start:{line:155,column:1},end:{line:172,column:2}},line:155},'12':{name:'(anonymous_12)',decl:{start:{line:157,column:54},end:{line:157,column:55}},loc:{start:{line:157,column:66},end:{line:169,column:3}},line:157},'13':{name:'(anonymous_13)',decl:{start:{line:166,column:63},end:{line:166,column:64}},loc:{start:{line:166,column:69},end:{line:168,column:4}},line:166},'14':{name:'(anonymous_14)',decl:{start:{line:177,column:1},end:{line:177,column:2}},loc:{start:{line:178,column:1},end:{line:182,column:2}},line:178}},branchMap:{'0':{loc:{start:{line:85,column:2},end:{line:88,column:3}},type:'if',locations:[{start:{line:85,column:2},end:{line:88,column:3}},{start:{line:85,column:2},end:{line:88,column:3}}],line:85},'1':{loc:{start:{line:93,column:2},end:{line:97,column:3}},type:'if',locations:[{start:{line:93,column:2},end:{line:97,column:3}},{start:{line:93,column:2},end:{line:97,column:3}}],line:93},'2':{loc:{start:{line:101,column:2},end:{line:104,column:3}},type:'if',locations:[{start:{line:101,column:2},end:{line:104,column:3}},{start:{line:101,column:2},end:{line:104,column:3}}],line:101},'3':{loc:{start:{line:106,column:2},end:{line:109,column:3}},type:'if',locations:[{start:{line:106,column:2},end:{line:109,column:3}},{start:{line:106,column:2},end:{line:109,column:3}}],line:106},'4':{loc:{start:{line:111,column:2},end:{line:121,column:3}},type:'if',locations:[{start:{line:111,column:2},end:{line:121,column:3}},{start:{line:111,column:2},end:{line:121,column:3}}],line:111},'5':{loc:{start:{line:111,column:6},end:{line:111,column:49}},type:'binary-expr',locations:[{start:{line:111,column:6},end:{line:111,column:22}},{start:{line:111,column:26},end:{line:111,column:49}}],line:111},'6':{loc:{start:{line:119,column:25},end:{line:119,column:72}},type:'binary-expr',locations:[{start:{line:119,column:25},end:{line:119,column:47}},{start:{line:119,column:51},end:{line:119,column:72}}],line:119}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_2akcptdj3o.s[0]++,require('mongoose'));const Incident=(cov_2akcptdj3o.s[1]++,require('./incident'));const MailDispatcher=(cov_2akcptdj3o.s[2]++,require('./../../communication/models/mail/mail-dispatcher'));const RoleDao=(cov_2akcptdj3o.s[3]++,require('./../../auth/models/role-dao'));class IncidentDao{getPopulateOptions(){cov_2akcptdj3o.f[0]++;const populate=(cov_2akcptdj3o.s[4]++,[{path:'fields',model:'IncidentField',populate:{path:'type',model:'IncidentFieldType'}},{path:'contactGroups',model:'ContactGroup'}]);cov_2akcptdj3o.s[5]++;return populate;}/**
	 * Returns a single incident, or false if it doesn't exist
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_2akcptdj3o.f[1]++;const populate=(cov_2akcptdj3o.s[6]++,this.getPopulateOptions());cov_2akcptdj3o.s[7]++;return Incident.findOne({_id:id}).populate(populate).exec();}/**
	 * Loads all incidents that have been published
	 * @return Promise
	 */loadPublished(){cov_2akcptdj3o.f[2]++;const populate=(cov_2akcptdj3o.s[8]++,this.getPopulateOptions());cov_2akcptdj3o.s[9]++;return Incident.find({published:true}).sort('name').populate(populate).exec();}/**
	 * Returns a list of all incidents
	 * @return Promise
	 */loadAll(){cov_2akcptdj3o.f[3]++;const populate=(cov_2akcptdj3o.s[10]++,this.getPopulateOptions());cov_2akcptdj3o.s[11]++;return Incident.find({active:true}).sort('name').populate(populate).exec();}/**
	 * Updates the given incident's contact groups to equal the given list of groups
	 * @param string incidentId
	 * @param string[] groupIds
	 * @return Promise
	 */updateContactGroups(incidentId,groupIds){cov_2akcptdj3o.f[4]++;let contactGroupIds=(cov_2akcptdj3o.s[12]++,[]);cov_2akcptdj3o.s[13]++;for(let i=0;i<groupIds.length;i++){const currentGroupId=(cov_2akcptdj3o.s[14]++,mongoose.Types.ObjectId(groupIds[i]));cov_2akcptdj3o.s[15]++;contactGroupIds.push(currentGroupId);}cov_2akcptdj3o.s[16]++;return this.loadOne(incidentId).then(incident=>{cov_2akcptdj3o.f[5]++;cov_2akcptdj3o.s[17]++;incident.contactGroups=contactGroupIds;cov_2akcptdj3o.s[18]++;return this.save(incident);});}/**
	 * Saves the given incident
	 * @param Incident incident
	 * @return Promise
	 */save(incident){cov_2akcptdj3o.f[6]++;cov_2akcptdj3o.s[19]++;//Can't save an inactive incident
if(incident.active===false){cov_2akcptdj3o.b[0][0]++;cov_2akcptdj3o.s[20]++;return;}else{cov_2akcptdj3o.b[0][1]++;}cov_2akcptdj3o.s[21]++;incident.active=true;//If incident is new, assign an ID
cov_2akcptdj3o.s[22]++;if(!incident._id){cov_2akcptdj3o.b[1][0]++;cov_2akcptdj3o.s[23]++;//Incident is new
incident._id=new mongoose.mongo.ObjectID();}else{cov_2akcptdj3o.b[1][1]++;}//Trim properties
cov_2akcptdj3o.s[24]++;incident.name=incident.name.trim();cov_2akcptdj3o.s[25]++;if(incident.description){cov_2akcptdj3o.b[2][0]++;cov_2akcptdj3o.s[26]++;incident.description=incident.description.trim();}else{cov_2akcptdj3o.b[2][1]++;}cov_2akcptdj3o.s[27]++;if(!incident.published){cov_2akcptdj3o.b[3][0]++;cov_2akcptdj3o.s[28]++;incident.published=false;}else{cov_2akcptdj3o.b[3][1]++;}cov_2akcptdj3o.s[29]++;if((cov_2akcptdj3o.b[5][0]++,!incident.fields)||(cov_2akcptdj3o.b[5][1]++,!incident.fields.length)){cov_2akcptdj3o.b[4][0]++;cov_2akcptdj3o.s[30]++;incident.fields=[];}else{cov_2akcptdj3o.b[4][1]++;cov_2akcptdj3o.s[31]++;for(let i=0;i<incident.fields.length;i++){cov_2akcptdj3o.s[32]++;incident.fields[i]=(cov_2akcptdj3o.b[6][0]++,incident.fields[i]._id)||(cov_2akcptdj3o.b[6][1]++,incident.fields[i].id);}}cov_2akcptdj3o.s[33]++;return Incident.findOneAndUpdate({_id:incident._id},incident,{upsert:true}).exec();}/**
	 * Publishes the incident. This means that Building Reps are now allowed to fill out
	 * this incident's form
	 * @param string incidentId
	 * @return Promise
	 */publish(incidentId){cov_2akcptdj3o.f[7]++;cov_2akcptdj3o.s[34]++;return this.loadOne(incidentId).then(incident=>{cov_2akcptdj3o.f[8]++;cov_2akcptdj3o.s[35]++;incident.published=true;cov_2akcptdj3o.s[36]++;return incident.save().then(()=>{cov_2akcptdj3o.f[9]++;const mailDispatcher=(cov_2akcptdj3o.s[37]++,new MailDispatcher());const roleDao=(cov_2akcptdj3o.s[38]++,new RoleDao());cov_2akcptdj3o.s[39]++;roleDao.loadByName('Building Rep').then(role=>{cov_2akcptdj3o.f[10]++;const args=(cov_2akcptdj3o.s[40]++,{incidentName:incident.name});cov_2akcptdj3o.s[41]++;mailDispatcher.sendEmailToRole(role,'Emergency Plan Required','incident/publish',args);});cov_2akcptdj3o.s[42]++;this.updateBuildingAgencyHealth();});});}/**
	 * Archives the given incident, rendering it un-viewable and un-usuable by all end-users
	 * @param string incidentId
	 * @return Promise
	 */archive(incidentId){cov_2akcptdj3o.f[11]++;const query=(cov_2akcptdj3o.s[43]++,{'_id':incidentId});const promise=(cov_2akcptdj3o.s[44]++,Incident.findOne(query).exec().then(incident=>{cov_2akcptdj3o.f[12]++;const timestamp=(cov_2akcptdj3o.s[45]++,+new Date());let newName=(cov_2akcptdj3o.s[46]++,incident.name+' (Archived on '+timestamp+')');const update=(cov_2akcptdj3o.s[47]++,{$set:{active:false,name:newName}});cov_2akcptdj3o.s[48]++;return Incident.findOneAndUpdate(query,update).exec().then(()=>{cov_2akcptdj3o.f[13]++;cov_2akcptdj3o.s[49]++;this.updateBuildingAgencyHealth();});}));cov_2akcptdj3o.s[50]++;return promise;}/**
	 * Updates the health of all building-agency units
	 */updateBuildingAgencyHealth(){cov_2akcptdj3o.f[14]++;const BuildingAgencyIncidentDao=(cov_2akcptdj3o.s[51]++,require('./../../building-agency/models/building-agency-incident-dao'));const buildingAgencyIncidentDao=(cov_2akcptdj3o.s[52]++,new BuildingAgencyIncidentDao());cov_2akcptdj3o.s[53]++;buildingAgencyIncidentDao.updateAll();}}cov_2akcptdj3o.s[54]++;module.exports=IncidentDao;
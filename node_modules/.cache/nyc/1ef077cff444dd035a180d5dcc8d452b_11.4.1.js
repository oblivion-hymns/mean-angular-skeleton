var cov_2akcptdj3o=function(){var path='/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',hash='fabea3b4786f4d0c166873e221e62f2a3128e29e',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:17},end:{line:2,column:38}},'2':{start:{line:3,column:22},end:{line:3,column:49}},'3':{start:{line:4,column:26},end:{line:4,column:58}},'4':{start:{line:5,column:23},end:{line:5,column:83}},'5':{start:{line:6,column:16},end:{line:6,column:55}},'6':{start:{line:12,column:19},end:{line:19,column:3}},'7':{start:{line:20,column:2},end:{line:20,column:18}},'8':{start:{line:30,column:19},end:{line:30,column:44}},'9':{start:{line:31,column:2},end:{line:31,column:77}},'10':{start:{line:40,column:19},end:{line:40,column:44}},'11':{start:{line:41,column:2},end:{line:41,column:81}},'12':{start:{line:50,column:19},end:{line:50,column:44}},'13':{start:{line:51,column:2},end:{line:51,column:78}},'14':{start:{line:60,column:2},end:{line:60,column:56}},'15':{start:{line:71,column:2},end:{line:78,column:3}},'16':{start:{line:73,column:3},end:{line:73,column:10}},'17':{start:{line:75,column:7},end:{line:78,column:3}},'18':{start:{line:77,column:3},end:{line:77,column:26}},'19':{start:{line:81,column:2},end:{line:85,column:3}},'20':{start:{line:84,column:3},end:{line:84,column:48}},'21':{start:{line:88,column:2},end:{line:88,column:39}},'22':{start:{line:89,column:2},end:{line:92,column:3}},'23':{start:{line:91,column:3},end:{line:91,column:54}},'24':{start:{line:94,column:2},end:{line:97,column:3}},'25':{start:{line:96,column:3},end:{line:96,column:30}},'26':{start:{line:99,column:2},end:{line:109,column:3}},'27':{start:{line:101,column:3},end:{line:101,column:24}},'28':{start:{line:105,column:3},end:{line:108,column:4}},'29':{start:{line:107,column:4},end:{line:107,column:73}},'30':{start:{line:111,column:2},end:{line:111,column:89}},'31':{start:{line:122,column:2},end:{line:134,column:5}},'32':{start:{line:123,column:3},end:{line:123,column:29}},'33':{start:{line:124,column:3},end:{line:133,column:6}},'34':{start:{line:125,column:27},end:{line:125,column:47}},'35':{start:{line:126,column:20},end:{line:126,column:33}},'36':{start:{line:127,column:4},end:{line:130,column:7}},'37':{start:{line:128,column:18},end:{line:128,column:47}},'38':{start:{line:129,column:5},end:{line:129,column:95}},'39':{start:{line:132,column:4},end:{line:132,column:38}},'40':{start:{line:144,column:16},end:{line:144,column:35}},'41':{start:{line:145,column:18},end:{line:160,column:4}},'42':{start:{line:146,column:3},end:{line:159,column:4}},'43':{start:{line:148,column:22},end:{line:148,column:34}},'44':{start:{line:149,column:18},end:{line:149,column:68}},'45':{start:{line:150,column:19},end:{line:155,column:5}},'46':{start:{line:156,column:4},end:{line:158,column:7}},'47':{start:{line:157,column:5},end:{line:157,column:39}},'48':{start:{line:162,column:2},end:{line:162,column:17}},'49':{start:{line:170,column:36},end:{line:170,column:106}},'50':{start:{line:171,column:36},end:{line:171,column:67}},'51':{start:{line:172,column:2},end:{line:172,column:40}},'52':{start:{line:176,column:0},end:{line:176,column:29}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:11,column:1},end:{line:21,column:2}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:28,column:1},end:{line:28,column:2}},loc:{start:{line:29,column:1},end:{line:32,column:2}},line:29},'2':{name:'(anonymous_2)',decl:{start:{line:38,column:1},end:{line:38,column:2}},loc:{start:{line:39,column:1},end:{line:42,column:2}},line:39},'3':{name:'(anonymous_3)',decl:{start:{line:48,column:1},end:{line:48,column:2}},loc:{start:{line:49,column:1},end:{line:52,column:2}},line:49},'4':{name:'(anonymous_4)',decl:{start:{line:58,column:1},end:{line:58,column:2}},loc:{start:{line:59,column:1},end:{line:61,column:2}},line:59},'5':{name:'(anonymous_5)',decl:{start:{line:68,column:1},end:{line:68,column:2}},loc:{start:{line:69,column:1},end:{line:112,column:2}},line:69},'6':{name:'(anonymous_6)',decl:{start:{line:120,column:1},end:{line:120,column:2}},loc:{start:{line:121,column:1},end:{line:135,column:2}},line:121},'7':{name:'(anonymous_7)',decl:{start:{line:122,column:39},end:{line:122,column:40}},loc:{start:{line:122,column:51},end:{line:134,column:3}},line:122},'8':{name:'(anonymous_8)',decl:{start:{line:124,column:31},end:{line:124,column:32}},loc:{start:{line:124,column:37},end:{line:133,column:4}},line:124},'9':{name:'(anonymous_9)',decl:{start:{line:127,column:44},end:{line:127,column:45}},loc:{start:{line:127,column:52},end:{line:130,column:5}},line:127},'10':{name:'(anonymous_10)',decl:{start:{line:142,column:1},end:{line:142,column:2}},loc:{start:{line:143,column:1},end:{line:163,column:2}},line:143},'11':{name:'(anonymous_11)',decl:{start:{line:145,column:54},end:{line:145,column:55}},loc:{start:{line:145,column:66},end:{line:160,column:3}},line:145},'12':{name:'(anonymous_12)',decl:{start:{line:156,column:64},end:{line:156,column:65}},loc:{start:{line:156,column:70},end:{line:158,column:5}},line:156},'13':{name:'(anonymous_13)',decl:{start:{line:168,column:1},end:{line:168,column:2}},loc:{start:{line:169,column:1},end:{line:173,column:2}},line:169}},branchMap:{'0':{loc:{start:{line:71,column:2},end:{line:78,column:3}},type:'if',locations:[{start:{line:71,column:2},end:{line:78,column:3}},{start:{line:71,column:2},end:{line:78,column:3}}],line:71},'1':{loc:{start:{line:75,column:7},end:{line:78,column:3}},type:'if',locations:[{start:{line:75,column:7},end:{line:78,column:3}},{start:{line:75,column:7},end:{line:78,column:3}}],line:75},'2':{loc:{start:{line:81,column:2},end:{line:85,column:3}},type:'if',locations:[{start:{line:81,column:2},end:{line:85,column:3}},{start:{line:81,column:2},end:{line:85,column:3}}],line:81},'3':{loc:{start:{line:89,column:2},end:{line:92,column:3}},type:'if',locations:[{start:{line:89,column:2},end:{line:92,column:3}},{start:{line:89,column:2},end:{line:92,column:3}}],line:89},'4':{loc:{start:{line:94,column:2},end:{line:97,column:3}},type:'if',locations:[{start:{line:94,column:2},end:{line:97,column:3}},{start:{line:94,column:2},end:{line:97,column:3}}],line:94},'5':{loc:{start:{line:99,column:2},end:{line:109,column:3}},type:'if',locations:[{start:{line:99,column:2},end:{line:109,column:3}},{start:{line:99,column:2},end:{line:109,column:3}}],line:99},'6':{loc:{start:{line:99,column:6},end:{line:99,column:49}},type:'binary-expr',locations:[{start:{line:99,column:6},end:{line:99,column:22}},{start:{line:99,column:26},end:{line:99,column:49}}],line:99},'7':{loc:{start:{line:107,column:25},end:{line:107,column:72}},type:'binary-expr',locations:[{start:{line:107,column:25},end:{line:107,column:46}},{start:{line:107,column:50},end:{line:107,column:72}}],line:107},'8':{loc:{start:{line:146,column:3},end:{line:159,column:4}},type:'if',locations:[{start:{line:146,column:3},end:{line:159,column:4}},{start:{line:146,column:3},end:{line:159,column:4}}],line:146}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_2akcptdj3o.s[0]++,require('mongoose'));const Incident=(cov_2akcptdj3o.s[1]++,require('./incident'));const IncidentField=(cov_2akcptdj3o.s[2]++,require('./incident-field'));const IncidentFieldType=(cov_2akcptdj3o.s[3]++,require('./incident-field-type'));const MailDispatcher=(cov_2akcptdj3o.s[4]++,require('./../../communication/models/mail/mail-dispatcher'));const RoleDao=(cov_2akcptdj3o.s[5]++,require('./../../auth/models/role-dao'));class IncidentDao{getPopulateOptions(){cov_2akcptdj3o.f[0]++;const populate=(cov_2akcptdj3o.s[6]++,{path:'fields',model:'IncidentField',populate:{path:'type',model:'IncidentFieldType'}});cov_2akcptdj3o.s[7]++;return populate;}/**
	 * Returns a single incident, or false if it doesn't exist
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_2akcptdj3o.f[1]++;const populate=(cov_2akcptdj3o.s[8]++,this.getPopulateOptions());cov_2akcptdj3o.s[9]++;return Incident.findOne({_id:id,active:true}).populate(populate).exec();}/**
	 * Loads all incidents that have been published
	 * @return Promise
	 */loadPublished(){cov_2akcptdj3o.f[2]++;const populate=(cov_2akcptdj3o.s[10]++,this.getPopulateOptions());cov_2akcptdj3o.s[11]++;return Incident.find({published:true}).sort('name').populate(populate).exec();}/**
	 * Returns a list of all incidents
	 * @return Promise
	 */loadAll(){cov_2akcptdj3o.f[3]++;const populate=(cov_2akcptdj3o.s[12]++,this.getPopulateOptions());cov_2akcptdj3o.s[13]++;return Incident.find({active:true}).sort('name').populate(populate).exec();}/**
	 * Returns a list of all field types
	 * @return Promise
	 */loadFieldTypes(){cov_2akcptdj3o.f[4]++;cov_2akcptdj3o.s[14]++;return IncidentFieldType.find({}).sort('name').exec();}/**
	 * Saves the given incident
	 * @param Incident incident
	 * @return Promise
	 */save(incident){cov_2akcptdj3o.f[5]++;cov_2akcptdj3o.s[15]++;//Can't save an inactive incident
if(incident.active===false){cov_2akcptdj3o.b[0][0]++;cov_2akcptdj3o.s[16]++;return;}else{cov_2akcptdj3o.b[0][1]++;cov_2akcptdj3o.s[17]++;if(!incident.active){cov_2akcptdj3o.b[1][0]++;cov_2akcptdj3o.s[18]++;incident.active=true;}else{cov_2akcptdj3o.b[1][1]++;}}//If incident is new, assign an ID
cov_2akcptdj3o.s[19]++;if(!incident._id){cov_2akcptdj3o.b[2][0]++;cov_2akcptdj3o.s[20]++;//Incident is new
incident._id=new mongoose.mongo.ObjectID();}else{cov_2akcptdj3o.b[2][1]++;}//Trim properties
cov_2akcptdj3o.s[21]++;incident.name=incident.name.trim();cov_2akcptdj3o.s[22]++;if(incident.description){cov_2akcptdj3o.b[3][0]++;cov_2akcptdj3o.s[23]++;incident.description=incident.description.trim();}else{cov_2akcptdj3o.b[3][1]++;}cov_2akcptdj3o.s[24]++;if(!incident.published){cov_2akcptdj3o.b[4][0]++;cov_2akcptdj3o.s[25]++;incident.published=false;}else{cov_2akcptdj3o.b[4][1]++;}cov_2akcptdj3o.s[26]++;if((cov_2akcptdj3o.b[6][0]++,!incident.fields)||(cov_2akcptdj3o.b[6][1]++,!incident.fields.length)){cov_2akcptdj3o.b[5][0]++;cov_2akcptdj3o.s[27]++;incident.fields=[];}else{cov_2akcptdj3o.b[5][1]++;cov_2akcptdj3o.s[28]++;for(let i=0;i<incident.fields.length;i++){cov_2akcptdj3o.s[29]++;incident.fields[i]=(cov_2akcptdj3o.b[7][0]++,incident.fields[i].id)||(cov_2akcptdj3o.b[7][1]++,incident.fields[i]._id);}}cov_2akcptdj3o.s[30]++;return Incident.findOneAndUpdate({_id:incident._id},incident,{upsert:true}).exec();}/**
	 * Publishes the incident. This means that Building Reps are now allowed to fill out
	 * this incident's form
	 * @param string incidentId
	 * @return Promise
	 */publish(incidentId){cov_2akcptdj3o.f[6]++;cov_2akcptdj3o.s[31]++;return this.loadOne(incidentId).then(incident=>{cov_2akcptdj3o.f[7]++;cov_2akcptdj3o.s[32]++;incident.published=true;cov_2akcptdj3o.s[33]++;return incident.save().then(()=>{cov_2akcptdj3o.f[8]++;const mailDispatcher=(cov_2akcptdj3o.s[34]++,new MailDispatcher());const roleDao=(cov_2akcptdj3o.s[35]++,new RoleDao());cov_2akcptdj3o.s[36]++;roleDao.loadByName('Building Rep').then(role=>{cov_2akcptdj3o.f[9]++;const args=(cov_2akcptdj3o.s[37]++,{incidentName:incident.name});cov_2akcptdj3o.s[38]++;mailDispatcher.sendEmailToRole(role,'Emergency Plan Required','incident/publish',args);});cov_2akcptdj3o.s[39]++;this.updateBuildingAgencyHealth();});});}/**
	 * Archives the given incident, rendering it un-viewable and un-usuable by all end-users
	 * @param string incidentId
	 * @return Promise
	 */archive(incidentId){cov_2akcptdj3o.f[10]++;const query=(cov_2akcptdj3o.s[40]++,{'_id':incidentId});const promise=(cov_2akcptdj3o.s[41]++,Incident.findOne(query).exec().then(incident=>{cov_2akcptdj3o.f[11]++;cov_2akcptdj3o.s[42]++;if(incident){cov_2akcptdj3o.b[8][0]++;const timestamp=(cov_2akcptdj3o.s[43]++,+new Date());let newName=(cov_2akcptdj3o.s[44]++,incident.name+' (Archived on '+timestamp+')');const update=(cov_2akcptdj3o.s[45]++,{$set:{active:false,name:newName}});cov_2akcptdj3o.s[46]++;return Incident.findOneAndUpdate(query,update).exec().then(()=>{cov_2akcptdj3o.f[12]++;cov_2akcptdj3o.s[47]++;this.updateBuildingAgencyHealth();});}else{cov_2akcptdj3o.b[8][1]++;}}));cov_2akcptdj3o.s[48]++;return promise;}/**
	 * Updates the health of all building-agency units
	 */updateBuildingAgencyHealth(){cov_2akcptdj3o.f[13]++;const BuildingAgencyIncidentDao=(cov_2akcptdj3o.s[49]++,require('./../../building-agency/models/building-agency-incident-dao'));const buildingAgencyIncidentDao=(cov_2akcptdj3o.s[50]++,new BuildingAgencyIncidentDao());cov_2akcptdj3o.s[51]++;buildingAgencyIncidentDao.updateAll();}}cov_2akcptdj3o.s[52]++;module.exports=IncidentDao;
var cov_1sh4rjdglg=function(){var path='/home/bwilbur/projects/mercury/modules/incident/models/incident-field-dao.js',hash='c702dc0f56258e0153e7ed83b2fc10196350c8b0',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/incident/models/incident-field-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:22},end:{line:2,column:49}},'2':{start:{line:3,column:26},end:{line:3,column:58}},'3':{start:{line:14,column:24},end:{line:14,column:51}},'4':{start:{line:15,column:2},end:{line:15,column:77}},'5':{start:{line:25,column:27},end:{line:25,column:62}},'6':{start:{line:26,column:2},end:{line:26,column:96}},'7':{start:{line:35,column:2},end:{line:35,column:56}},'8':{start:{line:46,column:27},end:{line:46,column:62}},'9':{start:{line:47,column:18},end:{line:47,column:42}},'10':{start:{line:48,column:2},end:{line:48,column:40}},'11':{start:{line:49,column:2},end:{line:49,column:58}},'12':{start:{line:50,column:2},end:{line:50,column:75}},'13':{start:{line:52,column:18},end:{line:86,column:4}},'14':{start:{line:54,column:29},end:{line:54,column:31}},'15':{start:{line:55,column:3},end:{line:58,column:4}},'16':{start:{line:57,column:4},end:{line:57,column:51}},'17':{start:{line:60,column:3},end:{line:63,column:4}},'18':{start:{line:62,column:4},end:{line:62,column:35}},'19':{start:{line:66,column:17},end:{line:66,column:32}},'20':{start:{line:67,column:21},end:{line:67,column:71}},'21':{start:{line:68,column:23},end:{line:68,column:41}},'22':{start:{line:69,column:3},end:{line:69,column:55}},'23':{start:{line:72,column:3},end:{line:72,column:27}},'24':{start:{line:75,column:25},end:{line:75,column:52}},'25':{start:{line:76,column:27},end:{line:76,column:57}},'26':{start:{line:77,column:3},end:{line:77,column:56}},'27':{start:{line:80,column:18},end:{line:80,column:25}},'28':{start:{line:81,column:20},end:{line:81,column:27}},'29':{start:{line:82,column:3},end:{line:82,column:28}},'30':{start:{line:83,column:3},end:{line:83,column:30}},'31':{start:{line:85,column:3},end:{line:85,column:37}},'32':{start:{line:88,column:2},end:{line:88,column:17}},'33':{start:{line:97,column:2},end:{line:97,column:67}},'34':{start:{line:99,column:18},end:{line:117,column:4}},'35':{start:{line:101,column:29},end:{line:101,column:31}},'36':{start:{line:102,column:3},end:{line:105,column:4}},'37':{start:{line:104,column:4},end:{line:104,column:51}},'38':{start:{line:107,column:3},end:{line:110,column:4}},'39':{start:{line:109,column:4},end:{line:109,column:31}},'40':{start:{line:112,column:21},end:{line:112,column:36}},'41':{start:{line:113,column:23},end:{line:113,column:81}},'42':{start:{line:114,column:3},end:{line:114,column:55}},'43':{start:{line:116,column:3},end:{line:116,column:37}},'44':{start:{line:119,column:2},end:{line:119,column:17}},'45':{start:{line:130,column:27},end:{line:130,column:62}},'46':{start:{line:133,column:16},end:{line:133,column:27}},'47':{start:{line:134,column:20},end:{line:134,column:69}},'48':{start:{line:135,column:22},end:{line:135,column:41}},'49':{start:{line:136,column:18},end:{line:152,column:4}},'50':{start:{line:138,column:3},end:{line:138,column:55}},'51':{start:{line:141,column:25},end:{line:141,column:52}},'52':{start:{line:142,column:27},end:{line:142,column:57}},'53':{start:{line:143,column:3},end:{line:143,column:56}},'54':{start:{line:146,column:18},end:{line:146,column:25}},'55':{start:{line:147,column:20},end:{line:147,column:27}},'56':{start:{line:148,column:3},end:{line:148,column:28}},'57':{start:{line:149,column:3},end:{line:149,column:30}},'58':{start:{line:151,column:3},end:{line:151,column:37}},'59':{start:{line:154,column:2},end:{line:154,column:17}},'60':{start:{line:166,column:27},end:{line:166,column:62}},'61':{start:{line:168,column:17},end:{line:168,column:21}},'62':{start:{line:169,column:17},end:{line:169,column:22}},'63':{start:{line:172,column:18},end:{line:207,column:4}},'64':{start:{line:173,column:3},end:{line:173,column:26}},'65':{start:{line:176,column:19},end:{line:176,column:21}},'66':{start:{line:177,column:21},end:{line:177,column:23}},'67':{start:{line:178,column:3},end:{line:187,column:4}},'68':{start:{line:180,column:4},end:{line:180,column:85}},'69':{start:{line:181,column:4},end:{line:181,column:37}},'70':{start:{line:183,column:8},end:{line:187,column:4}},'71':{start:{line:185,column:4},end:{line:185,column:85}},'72':{start:{line:186,column:4},end:{line:186,column:38}},'73':{start:{line:190,column:19},end:{line:204,column:5}},'74':{start:{line:191,column:4},end:{line:191,column:27}},'75':{start:{line:192,column:4},end:{line:192,column:17}},'76':{start:{line:195,column:26},end:{line:195,column:53}},'77':{start:{line:196,column:28},end:{line:196,column:58}},'78':{start:{line:197,column:4},end:{line:197,column:57}},'79':{start:{line:200,column:19},end:{line:200,column:26}},'80':{start:{line:201,column:21},end:{line:201,column:28}},'81':{start:{line:202,column:4},end:{line:202,column:29}},'82':{start:{line:203,column:4},end:{line:203,column:31}},'83':{start:{line:206,column:3},end:{line:206,column:18}},'84':{start:{line:209,column:2},end:{line:209,column:17}},'85':{start:{line:217,column:36},end:{line:217,column:106}},'86':{start:{line:218,column:36},end:{line:218,column:67}},'87':{start:{line:219,column:2},end:{line:219,column:40}},'88':{start:{line:223,column:0},end:{line:223,column:34}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:12,column:1},end:{line:12,column:2}},loc:{start:{line:13,column:1},end:{line:16,column:2}},line:13},'1':{name:'(anonymous_1)',decl:{start:{line:23,column:1},end:{line:23,column:2}},loc:{start:{line:24,column:1},end:{line:27,column:2}},line:24},'2':{name:'(anonymous_2)',decl:{start:{line:33,column:1},end:{line:33,column:2}},loc:{start:{line:34,column:1},end:{line:36,column:2}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:44,column:1},end:{line:44,column:2}},loc:{start:{line:45,column:1},end:{line:89,column:2}},line:45},'4':{name:'(anonymous_4)',decl:{start:{line:52,column:51},end:{line:52,column:52}},loc:{start:{line:52,column:61},end:{line:70,column:3}},line:52},'5':{name:'(anonymous_5)',decl:{start:{line:70,column:10},end:{line:70,column:11}},loc:{start:{line:70,column:16},end:{line:73,column:3}},line:70},'6':{name:'(anonymous_6)',decl:{start:{line:73,column:10},end:{line:73,column:11}},loc:{start:{line:73,column:16},end:{line:78,column:3}},line:73},'7':{name:'(anonymous_7)',decl:{start:{line:78,column:10},end:{line:78,column:11}},loc:{start:{line:78,column:18},end:{line:84,column:3}},line:78},'8':{name:'(anonymous_8)',decl:{start:{line:84,column:10},end:{line:84,column:11}},loc:{start:{line:84,column:16},end:{line:86,column:3}},line:84},'9':{name:'(anonymous_9)',decl:{start:{line:95,column:1},end:{line:95,column:2}},loc:{start:{line:96,column:1},end:{line:120,column:2}},line:96},'10':{name:'(anonymous_10)',decl:{start:{line:99,column:57},end:{line:99,column:58}},loc:{start:{line:99,column:67},end:{line:111,column:3}},line:99},'11':{name:'(anonymous_11)',decl:{start:{line:111,column:10},end:{line:111,column:11}},loc:{start:{line:111,column:16},end:{line:115,column:3}},line:111},'12':{name:'(anonymous_12)',decl:{start:{line:115,column:10},end:{line:115,column:11}},loc:{start:{line:115,column:16},end:{line:117,column:3}},line:115},'13':{name:'(anonymous_13)',decl:{start:{line:128,column:1},end:{line:128,column:2}},loc:{start:{line:129,column:1},end:{line:155,column:2}},line:129},'14':{name:'(anonymous_14)',decl:{start:{line:136,column:68},end:{line:136,column:69}},loc:{start:{line:136,column:74},end:{line:139,column:3}},line:136},'15':{name:'(anonymous_15)',decl:{start:{line:139,column:10},end:{line:139,column:11}},loc:{start:{line:139,column:16},end:{line:144,column:3}},line:139},'16':{name:'(anonymous_16)',decl:{start:{line:144,column:10},end:{line:144,column:11}},loc:{start:{line:144,column:18},end:{line:150,column:3}},line:144},'17':{name:'(anonymous_17)',decl:{start:{line:150,column:10},end:{line:150,column:11}},loc:{start:{line:150,column:16},end:{line:152,column:3}},line:150},'18':{name:'(anonymous_18)',decl:{start:{line:164,column:1},end:{line:164,column:2}},loc:{start:{line:165,column:1},end:{line:210,column:2}},line:165},'19':{name:'(anonymous_19)',decl:{start:{line:172,column:47},end:{line:172,column:48}},loc:{start:{line:172,column:56},end:{line:207,column:3}},line:172},'20':{name:'(anonymous_20)',decl:{start:{line:190,column:84},end:{line:190,column:85}},loc:{start:{line:190,column:90},end:{line:193,column:4}},line:190},'21':{name:'(anonymous_21)',decl:{start:{line:193,column:11},end:{line:193,column:12}},loc:{start:{line:193,column:17},end:{line:198,column:4}},line:193},'22':{name:'(anonymous_22)',decl:{start:{line:198,column:11},end:{line:198,column:12}},loc:{start:{line:198,column:19},end:{line:204,column:4}},line:198},'23':{name:'(anonymous_23)',decl:{start:{line:215,column:1},end:{line:215,column:2}},loc:{start:{line:216,column:1},end:{line:220,column:2}},line:216}},branchMap:{'0':{loc:{start:{line:178,column:3},end:{line:187,column:4}},type:'if',locations:[{start:{line:178,column:3},end:{line:187,column:4}},{start:{line:178,column:3},end:{line:187,column:4}}],line:178},'1':{loc:{start:{line:183,column:8},end:{line:187,column:4}},type:'if',locations:[{start:{line:183,column:8},end:{line:187,column:4}},{start:{line:183,column:8},end:{line:187,column:4}}],line:183}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0,'72':0,'73':0,'74':0,'75':0,'76':0,'77':0,'78':0,'79':0,'80':0,'81':0,'82':0,'83':0,'84':0,'85':0,'86':0,'87':0,'88':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_1sh4rjdglg.s[0]++,require('mongoose'));const IncidentField=(cov_1sh4rjdglg.s[1]++,require('./incident-field'));const IncidentFieldType=(cov_1sh4rjdglg.s[2]++,require('./incident-field-type'));class IncidentFieldDao{/**
	 * Returns the given field
	 * @param string fieldId
	 * @return Promise
	 */loadOne(id){cov_1sh4rjdglg.f[0]++;const fieldObjectId=(cov_1sh4rjdglg.s[3]++,mongoose.Types.ObjectId(id));cov_1sh4rjdglg.s[4]++;return IncidentField.findOne({_id:fieldObjectId}).populate('type').exec();}/**
	 * Returns a list of the fields for the given incident
	 * @param string incidentId
	 * @return Promise
	 */loadForIncident(incidentId){cov_1sh4rjdglg.f[1]++;const incidentObjectId=(cov_1sh4rjdglg.s[5]++,mongoose.Types.ObjectId(incidentId));cov_1sh4rjdglg.s[6]++;return IncidentField.find({incident:incidentObjectId}).populate('type').sort('order').exec();}/**
	 * Returns a list of all field types
	 * @return Promise
	 */loadFieldTypes(){cov_1sh4rjdglg.f[2]++;cov_1sh4rjdglg.s[7]++;return IncidentFieldType.find({}).sort('name').exec();}/**
	 * Adds the given field to the given incident
	 * @param string incidentId
	 * @param IncidentField field
	 * @return Promise
	 */addField(incidentId,field){cov_1sh4rjdglg.f[3]++;const incidentObjectId=(cov_1sh4rjdglg.s[8]++,mongoose.Types.ObjectId(incidentId));let saveField=(cov_1sh4rjdglg.s[9]++,new IncidentField(field));cov_1sh4rjdglg.s[10]++;saveField.incident=incidentObjectId;cov_1sh4rjdglg.s[11]++;saveField.type=mongoose.Types.ObjectId(field.type.id);cov_1sh4rjdglg.s[12]++;saveField.identifier=saveField.label.toLowerCase().replace(/\s/g,'_');const promise=(cov_1sh4rjdglg.s[13]++,this.loadFields(incidentId).then(fields=>{cov_1sh4rjdglg.f[4]++;//Construct field identifier
let existingIdentifiers=(cov_1sh4rjdglg.s[14]++,[]);cov_1sh4rjdglg.s[15]++;for(let i=0;i<fields.length;i++){cov_1sh4rjdglg.s[16]++;existingIdentifiers.push(fields[i].identifier);}cov_1sh4rjdglg.s[17]++;while(existingIdentifiers.indexOf(saveField.identifier)>-1){cov_1sh4rjdglg.s[18]++;saveField.identifier+='_(2)';}//Update order of existing fields
const order=(cov_1sh4rjdglg.s[19]++,saveField.order);const findQuery=(cov_1sh4rjdglg.s[20]++,{incident:incidentObjectId,order:{$gte:order}});const updateQuery=(cov_1sh4rjdglg.s[21]++,{$inc:{order:1}});cov_1sh4rjdglg.s[22]++;return IncidentField.update(findQuery,updateQuery);}).then(()=>{cov_1sh4rjdglg.f[5]++;cov_1sh4rjdglg.s[23]++;//Save field
return saveField.save();}).then(()=>{cov_1sh4rjdglg.f[6]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[24]++,this.loadFields(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[25]++,this.loadOne(incidentObjectId));cov_1sh4rjdglg.s[26]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[7]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[27]++,data[0]);const incident=(cov_1sh4rjdglg.s[28]++,data[1]);cov_1sh4rjdglg.s[29]++;incident.fields=fields;cov_1sh4rjdglg.s[30]++;return this.save(incident);}).then(()=>{cov_1sh4rjdglg.f[8]++;cov_1sh4rjdglg.s[31]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[32]++;return promise;}/**
	 * Saves the given field
	 * @param IncidentField field
	 */saveField(field){cov_1sh4rjdglg.f[9]++;cov_1sh4rjdglg.s[33]++;field.identifier=field.label.toLowerCase().replace(/\s/g,'_');const promise=(cov_1sh4rjdglg.s[34]++,this.loadFields(field.incidentId).then(fields=>{cov_1sh4rjdglg.f[10]++;//Construct field identifier
let existingIdentifiers=(cov_1sh4rjdglg.s[35]++,[]);cov_1sh4rjdglg.s[36]++;for(let i=0;i<fields.length;i++){cov_1sh4rjdglg.s[37]++;existingIdentifiers.push(fields[i].identifier);}cov_1sh4rjdglg.s[38]++;while(existingIdentifiers.indexOf(field.identifier)>-1){cov_1sh4rjdglg.s[39]++;field.identifier+='_(2)';}}).then(()=>{cov_1sh4rjdglg.f[11]++;const findQuery=(cov_1sh4rjdglg.s[40]++,{_id:field.id});const updateQuery=(cov_1sh4rjdglg.s[41]++,{$set:{properties:field.properties,label:field.label}});cov_1sh4rjdglg.s[42]++;return IncidentField.update(findQuery,updateQuery);}).then(()=>{cov_1sh4rjdglg.f[12]++;cov_1sh4rjdglg.s[43]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[44]++;return promise;}/**
	 * Removes the given field from the given incident
	 * @param string incidentId
	 * @param IncidentField field
	 * @return Promise
	 */removeField(incidentId,field){cov_1sh4rjdglg.f[13]++;const incidentObjectId=(cov_1sh4rjdglg.s[45]++,mongoose.Types.ObjectId(incidentId));//Update order of existing fields
const order=(cov_1sh4rjdglg.s[46]++,field.order);const findQuery=(cov_1sh4rjdglg.s[47]++,{incident:incidentObjectId,order:{$gt:order}});const updateQuery=(cov_1sh4rjdglg.s[48]++,{$inc:{order:-1}});const promise=(cov_1sh4rjdglg.s[49]++,IncidentField.update(findQuery,updateQuery).then(()=>{cov_1sh4rjdglg.f[14]++;cov_1sh4rjdglg.s[50]++;//Delete field
return IncidentField.remove({_id:field.id}).exec();}).then(()=>{cov_1sh4rjdglg.f[15]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[51]++,this.loadFields(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[52]++,this.loadOne(incidentObjectId));cov_1sh4rjdglg.s[53]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[16]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[54]++,data[0]);const incident=(cov_1sh4rjdglg.s[55]++,data[1]);cov_1sh4rjdglg.s[56]++;incident.fields=fields;cov_1sh4rjdglg.s[57]++;return this.save(incident);}).then(()=>{cov_1sh4rjdglg.f[17]++;cov_1sh4rjdglg.s[58]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[59]++;return promise;}/**
	 * Moves the given field to the given order within the given incident
	 * @param string incidentId
	 * @param string fieldId
	 * @param number order
	 * @return Promise
	 */reorderField(incidentId,fieldId,order){cov_1sh4rjdglg.f[18]++;const incidentObjectId=(cov_1sh4rjdglg.s[60]++,mongoose.Types.ObjectId(incidentId));let oldOrder=(cov_1sh4rjdglg.s[61]++,null);let newOrder=(cov_1sh4rjdglg.s[62]++,order);//Just find the existing field, remove it, and add it back
const promise=(cov_1sh4rjdglg.s[63]++,this.loadField(fieldId).then(field=>{cov_1sh4rjdglg.f[19]++;cov_1sh4rjdglg.s[64]++;oldOrder=field.order;//Adjust existing orders based on new position of the re-ordered item
let findQuery=(cov_1sh4rjdglg.s[65]++,{});let updateQuery=(cov_1sh4rjdglg.s[66]++,{});cov_1sh4rjdglg.s[67]++;if(newOrder<oldOrder){cov_1sh4rjdglg.b[0][0]++;cov_1sh4rjdglg.s[68]++;findQuery={incident:incidentObjectId,order:{$lt:oldOrder,$gte:newOrder}};cov_1sh4rjdglg.s[69]++;updateQuery={$inc:{order:1}};}else{cov_1sh4rjdglg.b[0][1]++;cov_1sh4rjdglg.s[70]++;if(newOrder>oldOrder){cov_1sh4rjdglg.b[1][0]++;cov_1sh4rjdglg.s[71]++;findQuery={incident:incidentObjectId,order:{$gt:oldOrder,$lte:newOrder}};cov_1sh4rjdglg.s[72]++;updateQuery={$inc:{order:-1}};}else{cov_1sh4rjdglg.b[1][1]++;}}//Decrement fields above the old position and below the new position
const promise=(cov_1sh4rjdglg.s[73]++,IncidentField.update(findQuery,updateQuery,{multi:true}).then(()=>{cov_1sh4rjdglg.f[20]++;cov_1sh4rjdglg.s[74]++;field.order=newOrder;cov_1sh4rjdglg.s[75]++;field.save();}).then(()=>{cov_1sh4rjdglg.f[21]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[76]++,this.loadFields(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[77]++,this.loadOne(incidentObjectId));cov_1sh4rjdglg.s[78]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[22]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[79]++,data[0]);const incident=(cov_1sh4rjdglg.s[80]++,data[1]);cov_1sh4rjdglg.s[81]++;incident.fields=fields;cov_1sh4rjdglg.s[82]++;return this.save(incident);}));cov_1sh4rjdglg.s[83]++;return promise;}));cov_1sh4rjdglg.s[84]++;return promise;}/**
	 * Updates the health of all building-agency units
	 */updateBuildingAgencyHealth(){cov_1sh4rjdglg.f[23]++;const BuildingAgencyIncidentDao=(cov_1sh4rjdglg.s[85]++,require('./../../building-agency/models/building-agency-incident-dao'));const buildingAgencyIncidentDao=(cov_1sh4rjdglg.s[86]++,new BuildingAgencyIncidentDao());cov_1sh4rjdglg.s[87]++;buildingAgencyIncidentDao.updateAll();}}cov_1sh4rjdglg.s[88]++;module.exports=IncidentFieldDao;
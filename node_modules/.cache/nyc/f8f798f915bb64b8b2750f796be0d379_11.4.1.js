var cov_4qit4vp2i=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',hash='9ef305fc69a583db9c42a34032e839533f0df159',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:23},end:{line:2,column:51}},'2':{start:{line:16,column:26},end:{line:16,column:60}},'3':{start:{line:17,column:20},end:{line:21,column:3}},'4':{start:{line:22,column:22},end:{line:26,column:3}},'5':{start:{line:27,column:2},end:{line:27,column:72}},'6':{start:{line:40,column:26},end:{line:40,column:60}},'7':{start:{line:41,column:20},end:{line:45,column:3}},'8':{start:{line:46,column:22},end:{line:50,column:3}},'9':{start:{line:51,column:2},end:{line:51,column:72}},'10':{start:{line:55,column:0},end:{line:55,column:42}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:14,column:1},end:{line:14,column:2}},loc:{start:{line:15,column:1},end:{line:28,column:2}},line:15},'1':{name:'(anonymous_1)',decl:{start:{line:38,column:1},end:{line:38,column:2}},loc:{start:{line:39,column:1},end:{line:52,column:2}},line:39}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0},f:{'0':0,'1':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_4qit4vp2i.s[0]++,require('mongoose'));const BuildingAgency=(cov_4qit4vp2i.s[1]++,require('./building-agency'));class BuildingAgencyContactDao{/**
	 * Adds the given contact to the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */addContactToIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[0]++;const contactObjectId=(cov_4qit4vp2i.s[2]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_4qit4vp2i.s[3]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[4]++,{$addToSet:{'incidents.$.contacts':contactObjectId}});cov_4qit4vp2i.s[5]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}/**
	 * Removes the given contact from the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */removeContactFromIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[1]++;const contactObjectId=(cov_4qit4vp2i.s[6]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_4qit4vp2i.s[7]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[8]++,{$pull:{'incidents.contacts':contactObjectId}});cov_4qit4vp2i.s[9]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}}cov_4qit4vp2i.s[10]++;module.exports=BuildingAgencyContactDao;
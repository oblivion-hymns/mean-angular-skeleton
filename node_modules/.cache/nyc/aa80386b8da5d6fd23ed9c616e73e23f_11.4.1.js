var cov_qlusbya8v=function(){var path='/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',hash='4c1827a970a74da3b22cf64cf26d106b19a5865c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',statementMap:{'0':{start:{line:1,column:12},end:{line:1,column:35}},'1':{start:{line:2,column:22},end:{line:2,column:67}},'2':{start:{line:3,column:13},end:{line:3,column:30}},'3':{start:{line:17,column:16},end:{line:24,column:11}},'4':{start:{line:18,column:3},end:{line:21,column:4}},'5':{start:{line:20,column:4},end:{line:20,column:16}},'6':{start:{line:23,column:3},end:{line:23,column:15}},'7':{start:{line:25,column:2},end:{line:25,column:17}},'8':{start:{line:35,column:2},end:{line:35,column:77}},'9':{start:{line:45,column:24},end:{line:45,column:43}},'10':{start:{line:46,column:16},end:{line:46,column:78}},'11':{start:{line:47,column:17},end:{line:47,column:47}},'12':{start:{line:48,column:2},end:{line:48,column:30}},'13':{start:{line:57,column:2},end:{line:57,column:22}},'14':{start:{line:58,column:23},end:{line:58,column:49}},'15':{start:{line:59,column:16},end:{line:66,column:4}},'16':{start:{line:60,column:3},end:{line:63,column:4}},'17':{start:{line:62,column:4},end:{line:62,column:16}},'18':{start:{line:65,column:3},end:{line:65,column:15}},'19':{start:{line:67,column:2},end:{line:67,column:17}},'20':{start:{line:76,column:2},end:{line:76,column:82}},'21':{start:{line:85,column:16},end:{line:85,column:58}},'22':{start:{line:86,column:18},end:{line:86,column:81}},'23':{start:{line:87,column:16},end:{line:87,column:30}},'24':{start:{line:89,column:2},end:{line:89,column:85}},'25':{start:{line:99,column:16},end:{line:106,column:4}},'26':{start:{line:100,column:3},end:{line:103,column:4}},'27':{start:{line:102,column:4},end:{line:102,column:33}},'28':{start:{line:105,column:3},end:{line:105,column:17}},'29':{start:{line:107,column:2},end:{line:107,column:17}},'30':{start:{line:117,column:23},end:{line:117,column:40}},'31':{start:{line:118,column:2},end:{line:121,column:3}},'32':{start:{line:120,column:3},end:{line:120,column:30}},'33':{start:{line:123,column:2},end:{line:123,column:14}},'34':{start:{line:127,column:0},end:{line:127,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:16,column:1},end:{line:26,column:2}},line:16},'1':{name:'(anonymous_1)',decl:{start:{line:17,column:74},end:{line:17,column:75}},loc:{start:{line:17,column:95},end:{line:24,column:3}},line:17},'2':{name:'(anonymous_2)',decl:{start:{line:33,column:1},end:{line:33,column:2}},loc:{start:{line:34,column:1},end:{line:36,column:2}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:43,column:1},end:{line:43,column:2}},loc:{start:{line:44,column:1},end:{line:49,column:2}},line:44},'4':{name:'(anonymous_4)',decl:{start:{line:55,column:1},end:{line:55,column:2}},loc:{start:{line:56,column:1},end:{line:68,column:2}},line:56},'5':{name:'(anonymous_5)',decl:{start:{line:59,column:52},end:{line:59,column:53}},loc:{start:{line:59,column:73},end:{line:66,column:3}},line:59},'6':{name:'(anonymous_6)',decl:{start:{line:74,column:1},end:{line:74,column:2}},loc:{start:{line:75,column:1},end:{line:77,column:2}},line:75},'7':{name:'(anonymous_7)',decl:{start:{line:83,column:1},end:{line:83,column:2}},loc:{start:{line:84,column:1},end:{line:90,column:2}},line:84},'8':{name:'(anonymous_8)',decl:{start:{line:97,column:1},end:{line:97,column:2}},loc:{start:{line:98,column:1},end:{line:108,column:2}},line:98},'9':{name:'(anonymous_9)',decl:{start:{line:99,column:26},end:{line:99,column:27}},loc:{start:{line:99,column:50},end:{line:106,column:3}},line:99},'10':{name:'(anonymous_10)',decl:{start:{line:115,column:1},end:{line:115,column:2}},loc:{start:{line:116,column:1},end:{line:124,column:2}},line:116}},branchMap:{'0':{loc:{start:{line:18,column:3},end:{line:21,column:4}},type:'if',locations:[{start:{line:18,column:3},end:{line:21,column:4}},{start:{line:18,column:3},end:{line:21,column:4}}],line:18},'1':{loc:{start:{line:57,column:10},end:{line:57,column:21}},type:'binary-expr',locations:[{start:{line:57,column:10},end:{line:57,column:15}},{start:{line:57,column:19},end:{line:57,column:21}}],line:57},'2':{loc:{start:{line:60,column:3},end:{line:63,column:4}},type:'if',locations:[{start:{line:60,column:3},end:{line:63,column:4}},{start:{line:60,column:3},end:{line:63,column:4}}],line:60},'3':{loc:{start:{line:100,column:3},end:{line:103,column:4}},type:'if',locations:[{start:{line:100,column:3},end:{line:103,column:4}},{start:{line:100,column:3},end:{line:103,column:4}}],line:100},'4':{loc:{start:{line:118,column:2},end:{line:121,column:3}},type:'if',locations:[{start:{line:118,column:2},end:{line:121,column:3}},{start:{line:118,column:2},end:{line:121,column:3}}],line:118}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_qlusbya8v.s[0]++,require('jsonwebtoken'));const TokenVerifier=(cov_qlusbya8v.s[1]++,require('./../../auth/models/token-verifier'));const User=(cov_qlusbya8v.s[2]++,require('./user'));/**
 * Database access associated with users
 */class UserDao{/**
	 * Loads a single user. Does not include the user's password
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_qlusbya8v.f[0]++;var promise=(cov_qlusbya8v.s[3]++,User.findOne({_id:id},'firstName lastName email roles',function(error,user){cov_qlusbya8v.f[1]++;cov_qlusbya8v.s[4]++;if(error){cov_qlusbya8v.b[0][0]++;cov_qlusbya8v.s[5]++;throw error;}else{cov_qlusbya8v.b[0][1]++;}cov_qlusbya8v.s[6]++;return user;}).exec());cov_qlusbya8v.s[7]++;return promise;}/**
	 * Returns a list of users in the given role
	 * @param string roleId
	 * @return Promise
	 */loadByRole(roleId){cov_qlusbya8v.f[2]++;cov_qlusbya8v.s[8]++;return User.find({roles:roleId},'firstName lastName email roles').exec();}/**
	 * Loads and returns the User who made the given request
	 * @param Request req
	 * @return Promise
	 */loadFromRequest(req){cov_qlusbya8v.f[3]++;const tokenVerifier=(cov_qlusbya8v.s[9]++,new TokenVerifier());const token=(cov_qlusbya8v.s[10]++,tokenVerifier.getTokenFromAuthHeader(req.get('Authorization')));const userId=(cov_qlusbya8v.s[11]++,this.getUserIdFromToken(token));cov_qlusbya8v.s[12]++;return this.loadOne(userId);}/**
	 * Loads the User with the given email. Returns all fields
	 * @return Promise
	 */loadByEmail(email){cov_qlusbya8v.f[4]++;cov_qlusbya8v.s[13]++;email=(cov_qlusbya8v.b[1][0]++,email)||(cov_qlusbya8v.b[1][1]++,'');const trimmedEmail=(cov_qlusbya8v.s[14]++,email.trim().toLowerCase());var promise=(cov_qlusbya8v.s[15]++,User.findOne({email:trimmedEmail},function(error,user){cov_qlusbya8v.f[5]++;cov_qlusbya8v.s[16]++;if(error){cov_qlusbya8v.b[2][0]++;cov_qlusbya8v.s[17]++;throw error;}else{cov_qlusbya8v.b[2][1]++;}cov_qlusbya8v.s[18]++;return user;}));cov_qlusbya8v.s[19]++;return promise;}/**
	 * Loads a list of all users. Does not include passwords
	 * @return Promise
	 */loadAll(){cov_qlusbya8v.f[6]++;cov_qlusbya8v.s[20]++;return User.find({},'firstName lastName email roles').populate('roles').exec();}/**
	 * @param string queryString
	 * @return Promise
	 */search(queryString){cov_qlusbya8v.f[7]++;const regex=(cov_qlusbya8v.s[21]++,new RegExp('.*'+queryString+'.*','i'));const options=(cov_qlusbya8v.s[22]++,[{'firstName':{$regex:regex}},{'lastName':{$regex:regex}}]);const query=(cov_qlusbya8v.s[23]++,{$or:options});cov_qlusbya8v.s[24]++;return User.find(query,'firstName lastName email roles').populate('roles').exec();}/**
	 * Saves the given User and returns its Promise
	 * @param User user
	 * @return Promise
	 */save(user){cov_qlusbya8v.f[8]++;var promise=(cov_qlusbya8v.s[25]++,user.save(function(error,result){cov_qlusbya8v.f[9]++;cov_qlusbya8v.s[26]++;if(error){cov_qlusbya8v.b[3][0]++;cov_qlusbya8v.s[27]++;return Promise.reject(error);}else{cov_qlusbya8v.b[3][1]++;}cov_qlusbya8v.s[28]++;return result;}));cov_qlusbya8v.s[29]++;return promise;}/**
	 * Returns the user ID associated with a given JSON Web Token.
	 * @param string token - A JWT web token
	 * @return string
	 */getUserIdFromToken(token){cov_qlusbya8v.f[10]++;const decodedToken=(cov_qlusbya8v.s[30]++,jwt.decode(token));cov_qlusbya8v.s[31]++;if(decodedToken){cov_qlusbya8v.b[4][0]++;cov_qlusbya8v.s[32]++;return decodedToken.userId;}else{cov_qlusbya8v.b[4][1]++;}cov_qlusbya8v.s[33]++;return null;}}cov_qlusbya8v.s[34]++;module.exports=UserDao;
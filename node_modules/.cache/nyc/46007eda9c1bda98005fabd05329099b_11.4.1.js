var cov_peugipqee=function(){var path='/home/bwilbur/projects/mercury/modules/agency/models/agency-dao.js',hash='242ce1ffd9d66c411a0ea567e0ec1a1d3d1e07d5',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/agency/models/agency-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:15},end:{line:2,column:34}},'2':{start:{line:3,column:19},end:{line:3,column:60}},'3':{start:{line:4,column:16},end:{line:4,column:55}},'4':{start:{line:5,column:13},end:{line:5,column:48}},'5':{start:{line:6,column:16},end:{line:6,column:55}},'6':{start:{line:22,column:22},end:{line:22,column:38}},'7':{start:{line:23,column:22},end:{line:23,column:29}},'8':{start:{line:25,column:19},end:{line:25,column:33}},'9':{start:{line:26,column:2},end:{line:49,column:3}},'10':{start:{line:28,column:21},end:{line:28,column:35}},'11':{start:{line:29,column:16},end:{line:29,column:25}},'12':{start:{line:30,column:3},end:{line:43,column:4}},'13':{start:{line:32,column:22},end:{line:32,column:36}},'14':{start:{line:33,column:4},end:{line:42,column:5}},'15':{start:{line:35,column:5},end:{line:35,column:46}},'16':{start:{line:36,column:5},end:{line:36,column:40}},'17':{start:{line:37,column:5},end:{line:40,column:6}},'18':{start:{line:39,column:6},end:{line:39,column:39}},'19':{start:{line:41,column:5},end:{line:41,column:11}},'20':{start:{line:45,column:3},end:{line:48,column:4}},'21':{start:{line:47,column:4},end:{line:47,column:37}},'22':{start:{line:51,column:2},end:{line:51,column:20}},'23':{start:{line:61,column:21},end:{line:61,column:37}},'24':{start:{line:62,column:18},end:{line:82,column:4}},'25':{start:{line:63,column:20},end:{line:63,column:36}},'26':{start:{line:64,column:17},end:{line:64,column:38}},'27':{start:{line:65,column:22},end:{line:79,column:6}},'28':{start:{line:67,column:5},end:{line:76,column:6}},'29':{start:{line:69,column:6},end:{line:69,column:46}},'30':{start:{line:70,column:6},end:{line:70,column:58}},'31':{start:{line:74,column:6},end:{line:74,column:30}},'32':{start:{line:75,column:6},end:{line:75,column:38}},'33':{start:{line:78,column:5},end:{line:78,column:19}},'34':{start:{line:81,column:3},end:{line:81,column:21}},'35':{start:{line:83,column:2},end:{line:83,column:17}},'36':{start:{line:93,column:18},end:{line:93,column:31}},'37':{start:{line:94,column:18},end:{line:101,column:4}},'38':{start:{line:95,column:3},end:{line:98,column:4}},'39':{start:{line:97,column:4},end:{line:97,column:14}},'40':{start:{line:100,column:3},end:{line:100,column:35}},'41':{start:{line:103,column:2},end:{line:103,column:17}},'42':{start:{line:113,column:23},end:{line:113,column:54}},'43':{start:{line:114,column:16},end:{line:114,column:36}},'44':{start:{line:115,column:25},end:{line:115,column:39}},'45':{start:{line:116,column:25},end:{line:119,column:5}},'46':{start:{line:118,column:4},end:{line:118,column:29}},'47':{start:{line:121,column:22},end:{line:124,column:4}},'48':{start:{line:122,column:20},end:{line:122,column:52}},'49':{start:{line:123,column:3},end:{line:123,column:21}},'50':{start:{line:126,column:2},end:{line:126,column:21}},'51':{start:{line:135,column:21},end:{line:135,column:37}},'52':{start:{line:136,column:25},end:{line:136,column:78}},'53':{start:{line:137,column:25},end:{line:140,column:5}},'54':{start:{line:139,column:4},end:{line:139,column:33}},'55':{start:{line:143,column:22},end:{line:146,column:4}},'56':{start:{line:144,column:20},end:{line:144,column:46}},'57':{start:{line:145,column:3},end:{line:145,column:21}},'58':{start:{line:148,column:2},end:{line:148,column:21}},'59':{start:{line:159,column:18},end:{line:159,column:31}},'60':{start:{line:160,column:23},end:{line:160,column:54}},'61':{start:{line:162,column:18},end:{line:169,column:4}},'62':{start:{line:163,column:21},end:{line:163,column:42}},'63':{start:{line:164,column:22},end:{line:164,column:48}},'64':{start:{line:165,column:3},end:{line:165,column:78}},'65':{start:{line:167,column:18},end:{line:167,column:80}},'66':{start:{line:168,column:3},end:{line:168,column:88}},'67':{start:{line:171,column:2},end:{line:171,column:17}},'68':{start:{line:182,column:18},end:{line:182,column:31}},'69':{start:{line:183,column:23},end:{line:183,column:54}},'70':{start:{line:184,column:17},end:{line:184,column:75}},'71':{start:{line:185,column:18},end:{line:185,column:95}},'72':{start:{line:186,column:2},end:{line:201,column:5}},'73':{start:{line:187,column:23},end:{line:187,column:50}},'74':{start:{line:188,column:27},end:{line:188,column:50}},'75':{start:{line:189,column:3},end:{line:189,column:54}},'76':{start:{line:193,column:16},end:{line:193,column:23}},'77':{start:{line:194,column:20},end:{line:194,column:36}},'78':{start:{line:195,column:3},end:{line:200,column:4}},'79':{start:{line:197,column:22},end:{line:197,column:43}},'80':{start:{line:198,column:23},end:{line:198,column:74}},'81':{start:{line:199,column:4},end:{line:199,column:78}},'82':{start:{line:203,column:2},end:{line:203,column:17}},'83':{start:{line:215,column:16},end:{line:215,column:37}},'84':{start:{line:216,column:18},end:{line:241,column:4}},'85':{start:{line:217,column:3},end:{line:224,column:4}},'86':{start:{line:219,column:4},end:{line:223,column:6}},'87':{start:{line:227,column:29},end:{line:227,column:46}},'88':{start:{line:228,column:3},end:{line:231,column:4}},'89':{start:{line:230,column:4},end:{line:230,column:54}},'90':{start:{line:234,column:24},end:{line:234,column:55}},'91':{start:{line:235,column:18},end:{line:235,column:73}},'92':{start:{line:236,column:25},end:{line:236,column:86}},'93':{start:{line:239,column:25},end:{line:239,column:57}},'94':{start:{line:240,column:3},end:{line:240,column:54}},'95':{start:{line:243,column:2},end:{line:243,column:17}},'96':{start:{line:247,column:0},end:{line:247,column:27}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:20,column:1},end:{line:20,column:2}},loc:{start:{line:21,column:1},end:{line:52,column:2}},line:21},'1':{name:'(anonymous_1)',decl:{start:{line:59,column:1},end:{line:59,column:2}},loc:{start:{line:60,column:1},end:{line:84,column:2}},line:60},'2':{name:'(anonymous_2)',decl:{start:{line:62,column:58},end:{line:62,column:59}},loc:{start:{line:62,column:68},end:{line:82,column:3}},line:62},'3':{name:'(anonymous_3)',decl:{start:{line:66,column:10},end:{line:66,column:11}},loc:{start:{line:66,column:27},end:{line:79,column:5}},line:66},'4':{name:'(anonymous_4)',decl:{start:{line:91,column:1},end:{line:91,column:2}},loc:{start:{line:92,column:1},end:{line:104,column:2}},line:92},'5':{name:'(anonymous_5)',decl:{start:{line:94,column:52},end:{line:94,column:53}},loc:{start:{line:94,column:60},end:{line:101,column:3}},line:94},'6':{name:'(anonymous_6)',decl:{start:{line:111,column:1},end:{line:111,column:2}},loc:{start:{line:112,column:1},end:{line:127,column:2}},line:112},'7':{name:'(anonymous_7)',decl:{start:{line:117,column:9},end:{line:117,column:10}},loc:{start:{line:117,column:24},end:{line:119,column:4}},line:117},'8':{name:'(anonymous_8)',decl:{start:{line:121,column:73},end:{line:121,column:74}},loc:{start:{line:121,column:81},end:{line:124,column:3}},line:121},'9':{name:'(anonymous_9)',decl:{start:{line:133,column:1},end:{line:133,column:2}},loc:{start:{line:134,column:1},end:{line:149,column:2}},line:134},'10':{name:'(anonymous_10)',decl:{start:{line:138,column:9},end:{line:138,column:10}},loc:{start:{line:138,column:28},end:{line:140,column:4}},line:138},'11':{name:'(anonymous_11)',decl:{start:{line:143,column:73},end:{line:143,column:74}},loc:{start:{line:143,column:81},end:{line:146,column:3}},line:143},'12':{name:'(anonymous_12)',decl:{start:{line:157,column:1},end:{line:157,column:2}},loc:{start:{line:158,column:1},end:{line:172,column:2}},line:158},'13':{name:'(anonymous_13)',decl:{start:{line:162,column:51},end:{line:162,column:52}},loc:{start:{line:162,column:59},end:{line:166,column:3}},line:162},'14':{name:'(anonymous_14)',decl:{start:{line:166,column:10},end:{line:166,column:11}},loc:{start:{line:166,column:16},end:{line:169,column:3}},line:166},'15':{name:'(anonymous_15)',decl:{start:{line:180,column:1},end:{line:180,column:2}},loc:{start:{line:181,column:1},end:{line:204,column:2}},line:181},'16':{name:'(anonymous_16)',decl:{start:{line:186,column:15},end:{line:186,column:16}},loc:{start:{line:186,column:21},end:{line:190,column:3}},line:186},'17':{name:'(anonymous_17)',decl:{start:{line:190,column:10},end:{line:190,column:11}},loc:{start:{line:190,column:18},end:{line:201,column:3}},line:190},'18':{name:'(anonymous_18)',decl:{start:{line:213,column:1},end:{line:213,column:2}},loc:{start:{line:214,column:1},end:{line:244,column:2}},line:214},'19':{name:'(anonymous_19)',decl:{start:{line:216,column:75},end:{line:216,column:76}},loc:{start:{line:216,column:85},end:{line:241,column:3}},line:216}},branchMap:{'0':{loc:{start:{line:33,column:4},end:{line:42,column:5}},type:'if',locations:[{start:{line:33,column:4},end:{line:42,column:5}},{start:{line:33,column:4},end:{line:42,column:5}}],line:33},'1':{loc:{start:{line:36,column:19},end:{line:36,column:39}},type:'binary-expr',locations:[{start:{line:36,column:19},end:{line:36,column:33}},{start:{line:36,column:37},end:{line:36,column:39}}],line:36},'2':{loc:{start:{line:37,column:5},end:{line:40,column:6}},type:'if',locations:[{start:{line:37,column:5},end:{line:40,column:6}},{start:{line:37,column:5},end:{line:40,column:6}}],line:37},'3':{loc:{start:{line:45,column:3},end:{line:48,column:4}},type:'if',locations:[{start:{line:45,column:3},end:{line:48,column:4}},{start:{line:45,column:3},end:{line:48,column:4}}],line:45},'4':{loc:{start:{line:67,column:5},end:{line:76,column:6}},type:'if',locations:[{start:{line:67,column:5},end:{line:76,column:6}},{start:{line:67,column:5},end:{line:76,column:6}}],line:67},'5':{loc:{start:{line:95,column:3},end:{line:98,column:4}},type:'if',locations:[{start:{line:95,column:3},end:{line:98,column:4}},{start:{line:95,column:3},end:{line:98,column:4}}],line:95},'6':{loc:{start:{line:118,column:11},end:{line:118,column:28}},type:'binary-expr',locations:[{start:{line:118,column:11},end:{line:118,column:22}},{start:{line:118,column:26},end:{line:118,column:28}}],line:118},'7':{loc:{start:{line:139,column:11},end:{line:139,column:32}},type:'binary-expr',locations:[{start:{line:139,column:11},end:{line:139,column:26}},{start:{line:139,column:30},end:{line:139,column:32}}],line:139},'8':{loc:{start:{line:195,column:3},end:{line:200,column:4}},type:'if',locations:[{start:{line:195,column:3},end:{line:200,column:4}},{start:{line:195,column:3},end:{line:200,column:4}}],line:195},'9':{loc:{start:{line:195,column:7},end:{line:195,column:40}},type:'binary-expr',locations:[{start:{line:195,column:7},end:{line:195,column:16}},{start:{line:195,column:20},end:{line:195,column:40}}],line:195},'10':{loc:{start:{line:217,column:3},end:{line:224,column:4}},type:'if',locations:[{start:{line:217,column:3},end:{line:224,column:4}},{start:{line:217,column:3},end:{line:224,column:4}}],line:217},'11':{loc:{start:{line:228,column:3},end:{line:231,column:4}},type:'if',locations:[{start:{line:228,column:3},end:{line:231,column:4}},{start:{line:228,column:3},end:{line:231,column:4}}],line:228}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0,'72':0,'73':0,'74':0,'75':0,'76':0,'77':0,'78':0,'79':0,'80':0,'81':0,'82':0,'83':0,'84':0,'85':0,'86':0,'87':0,'88':0,'89':0,'90':0,'91':0,'92':0,'93':0,'94':0,'95':0,'96':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0],'9':[0,0],'10':[0,0],'11':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_peugipqee.s[0]++,require('mongoose'));const Agency=(cov_peugipqee.s[1]++,require('./agency'));const ApiService=(cov_peugipqee.s[2]++,require('./../../api/models/api-service'));const RoleDao=(cov_peugipqee.s[3]++,require('./../../auth/models/role-dao'));const User=(cov_peugipqee.s[4]++,require('./../../user/models/user'));const UserDao=(cov_peugipqee.s[5]++,require('./../../user/models/user-dao'));/**
 * Database access associated with agencies
 */class AgencyDao{/**
	 * Given a response data object, merges its mercury and sequoia agencies
	 * together into one object
	 * @param any data
	 * @param boolean mercuryOnly - Only returns agencies with Mercury entries
	 * @return any
	 */mergeAgencyData(data,mercuryOnly){cov_peugipqee.f[0]++;const seqAgencies=(cov_peugipqee.s[6]++,data[0].agencies);const merAgencies=(cov_peugipqee.s[7]++,data[1]);let agencyData=(cov_peugipqee.s[8]++,{agencies:[]});cov_peugipqee.s[9]++;for(let i=0;i<seqAgencies.length;i++){const seqAgency=(cov_peugipqee.s[10]++,seqAgencies[i]);let agency=(cov_peugipqee.s[11]++,seqAgency);cov_peugipqee.s[12]++;for(let j=0;j<merAgencies.length;j++){const merAgency=(cov_peugipqee.s[13]++,merAgencies[j]);cov_peugipqee.s[14]++;if(merAgency.sequoiaId.toString()==seqAgency.id.toString()){cov_peugipqee.b[0][0]++;cov_peugipqee.s[15]++;agency.primaryRep=merAgency.primaryRep;cov_peugipqee.s[16]++;agency.reps=(cov_peugipqee.b[1][0]++,merAgency.reps)||(cov_peugipqee.b[1][1]++,[]);cov_peugipqee.s[17]++;if(mercuryOnly){cov_peugipqee.b[2][0]++;cov_peugipqee.s[18]++;agencyData.agencies.push(agency);}else{cov_peugipqee.b[2][1]++;}cov_peugipqee.s[19]++;break;}else{cov_peugipqee.b[0][1]++;}}cov_peugipqee.s[20]++;if(!mercuryOnly){cov_peugipqee.b[3][0]++;cov_peugipqee.s[21]++;agencyData.agencies.push(agency);}else{cov_peugipqee.b[3][1]++;}}cov_peugipqee.s[22]++;return agencyData;}/**
	 * Loads a single agency with the given ID
	 * @param string id - The Sequoia ID of the agency
	 * @return Promise
	 */loadOne(id){cov_peugipqee.f[1]++;const apiService=(cov_peugipqee.s[23]++,new ApiService());const promise=(cov_peugipqee.s[24]++,apiService.apiGet('/agency/'+id).then(agency=>{cov_peugipqee.f[2]++;const agencyId=(cov_peugipqee.s[25]++,agency.agency.id);const query=(cov_peugipqee.s[26]++,{sequoiaId:agencyId});const seqPromise=(cov_peugipqee.s[27]++,Agency.findOne(query).populate('reps').populate('primaryRep').exec().then(mercuryAgency=>{cov_peugipqee.f[3]++;cov_peugipqee.s[28]++;if(mercuryAgency){cov_peugipqee.b[4][0]++;cov_peugipqee.s[29]++;agency.agency.reps=mercuryAgency.reps;cov_peugipqee.s[30]++;agency.agency.primaryRep=mercuryAgency.primaryRep;}else{cov_peugipqee.b[4][1]++;cov_peugipqee.s[31]++;agency.agency.reps=[];cov_peugipqee.s[32]++;agency.agency.primaryRep=null;}cov_peugipqee.s[33]++;return agency;}));cov_peugipqee.s[34]++;return seqPromise;}));cov_peugipqee.s[35]++;return promise;}/**
	 * Returns a list of all agencies to which the requesting user is assigned
	 * @param string agencyRepId
	 * @return Promise
	 */loadForLoggedInUser(req){cov_peugipqee.f[4]++;const userDao=(cov_peugipqee.s[36]++,new UserDao());const promise=(cov_peugipqee.s[37]++,userDao.loadFromRequest(req).then(user=>{cov_peugipqee.f[5]++;cov_peugipqee.s[38]++;if(!user){cov_peugipqee.b[5][0]++;cov_peugipqee.s[39]++;return[];}else{cov_peugipqee.b[5][1]++;}cov_peugipqee.s[40]++;return this.loadForRep(user.id);}));cov_peugipqee.s[41]++;return promise;}/**
	 * Returns a list of agencies for which the given user is a rep
	 * @param string userId
	 * @return Promise
	 */loadForRep(userId){cov_peugipqee.f[6]++;const userObjectId=(cov_peugipqee.s[42]++,mongoose.Types.ObjectId(userId));const query=(cov_peugipqee.s[43]++,{reps:userObjectId});const sequoiaPromise=(cov_peugipqee.s[44]++,this.loadAll());const mercuryPromise=(cov_peugipqee.s[45]++,Agency.find(query).populate('reps').populate('primaryRep').sort('name').exec().then(merAgencies=>{cov_peugipqee.f[7]++;cov_peugipqee.s[46]++;return(cov_peugipqee.b[6][0]++,merAgencies)||(cov_peugipqee.b[6][1]++,[]);}));const joinPromise=(cov_peugipqee.s[47]++,Promise.all([sequoiaPromise,mercuryPromise]).then(data=>{cov_peugipqee.f[8]++;let agencyData=(cov_peugipqee.s[48]++,this.mergeAgencyData(data,true));cov_peugipqee.s[49]++;return agencyData;}));cov_peugipqee.s[50]++;return joinPromise;}/**
	 * Returns a list of all agencies
	 * @return Promise
	 */loadAll(){cov_peugipqee.f[9]++;const apiService=(cov_peugipqee.s[51]++,new ApiService());const sequoiaPromise=(cov_peugipqee.s[52]++,apiService.apiGet('/agency/all',{include:'legacy'}));const mercuryPromise=(cov_peugipqee.s[53]++,Agency.find({}).populate('reps').populate('primaryRep').sort('name').exec().then(mercuryAgencies=>{cov_peugipqee.f[10]++;cov_peugipqee.s[54]++;return(cov_peugipqee.b[7][0]++,mercuryAgencies)||(cov_peugipqee.b[7][1]++,[]);}));const joinPromise=(cov_peugipqee.s[55]++,Promise.all([sequoiaPromise,mercuryPromise]).then(data=>{cov_peugipqee.f[11]++;let agencyData=(cov_peugipqee.s[56]++,this.mergeAgencyData(data));cov_peugipqee.s[57]++;return agencyData;}));cov_peugipqee.s[58]++;return joinPromise;}/**
	 * Assigns a rep to the given agency
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignRep(agencyId,userId){cov_peugipqee.f[12]++;const roleDao=(cov_peugipqee.s[59]++,new RoleDao());const userObjectId=(cov_peugipqee.s[60]++,mongoose.Types.ObjectId(userId));const promise=(cov_peugipqee.s[61]++,roleDao.loadAgencyRepRole().then(role=>{cov_peugipqee.f[13]++;const userQuery=(cov_peugipqee.s[62]++,{'_id':userObjectId});const userUpdate=(cov_peugipqee.s[63]++,{$addToSet:{roles:role}});cov_peugipqee.s[64]++;return User.findOneAndUpdate(userQuery,userUpdate,{upsert:true}).exec();}).then(()=>{cov_peugipqee.f[14]++;const update=(cov_peugipqee.s[65]++,{$set:{sequoiaId:agencyId},$addToSet:{reps:userObjectId}});cov_peugipqee.s[66]++;return Agency.findOneAndUpdate({sequoiaId:agencyId},update,{upsert:true}).exec();}));cov_peugipqee.s[67]++;return promise;}/**
	 * Removes a rep from the given agency
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */unassignRep(agencyId,userId){cov_peugipqee.f[15]++;const roleDao=(cov_peugipqee.s[68]++,new RoleDao());const userObjectId=(cov_peugipqee.s[69]++,mongoose.Types.ObjectId(userId));const update=(cov_peugipqee.s[70]++,{$set:{sequoiaId:agencyId},$pull:{reps:userObjectId}});const promise=(cov_peugipqee.s[71]++,Agency.findOneAndUpdate({sequoiaId:agencyId},update,{upsert:true}).exec());cov_peugipqee.s[72]++;promise.then(()=>{cov_peugipqee.f[16]++;const rolePromise=(cov_peugipqee.s[73]++,roleDao.loadAgencyRepRole());const agenciesPromise=(cov_peugipqee.s[74]++,this.loadForRep(userId));cov_peugipqee.s[75]++;return Promise.all([rolePromise,agenciesPromise]);}).then(data=>{cov_peugipqee.f[17]++;//If the user has no agencies assigned, automatically relinquish them
//of their Agency Rep role
const role=(cov_peugipqee.s[76]++,data[0]);const agencies=(cov_peugipqee.s[77]++,data[1].agencies);cov_peugipqee.s[78]++;if((cov_peugipqee.b[9][0]++,!agencies)||(cov_peugipqee.b[9][1]++,agencies.length==0)){cov_peugipqee.b[8][0]++;const userQuery=(cov_peugipqee.s[79]++,{'_id':userObjectId});const userUpdate=(cov_peugipqee.s[80]++,{$pull:{roles:mongoose.Types.ObjectId(role._id)}});cov_peugipqee.s[81]++;return User.findOneAndUpdate(userQuery,userUpdate,{multi:true}).exec();}else{cov_peugipqee.b[8][1]++;}});cov_peugipqee.s[82]++;return promise;}/**
	 * Assigns the primary rep for the given agency. A primary agency rep cannot be JUST unassigned;
	 * they must be replaced.
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignPrimaryRep(agencyId,userId){cov_peugipqee.f[18]++;const query=(cov_peugipqee.s[83]++,{sequoiaId:agencyId});const promise=(cov_peugipqee.s[84]++,Agency.findOne(query).populate('primaryRep').exec().then(agency=>{cov_peugipqee.f[19]++;cov_peugipqee.s[85]++;if(!agency){cov_peugipqee.b[10][0]++;cov_peugipqee.s[86]++;agency={sequoiaId:agencyId,primaryRep:null,reps:[]};}else{cov_peugipqee.b[10][1]++;}//Unassign the current primary rep from the regular reps
const currentPrimaryRep=(cov_peugipqee.s[87]++,agency.primaryRep);cov_peugipqee.s[88]++;if(currentPrimaryRep){cov_peugipqee.b[11][0]++;cov_peugipqee.s[89]++;this.unassignRep(agencyId,currentPrimaryRep._id);}else{cov_peugipqee.b[11][1]++;}//Update primary rep
const userObjectId=(cov_peugipqee.s[90]++,mongoose.Types.ObjectId(userId));const update=(cov_peugipqee.s[91]++,{$set:{sequoiaId:agencyId,primaryRep:userObjectId}});const updatePromise=(cov_peugipqee.s[92]++,Agency.findOneAndUpdate(query,update,{upsert:true}).exec());//Assign as a normal rep in addition to the primary rep
const assignPromise=(cov_peugipqee.s[93]++,this.assignRep(agencyId,userId));cov_peugipqee.s[94]++;return Promise.all([updatePromise,assignPromise]);}));cov_peugipqee.s[95]++;return promise;}}cov_peugipqee.s[96]++;module.exports=AgencyDao;
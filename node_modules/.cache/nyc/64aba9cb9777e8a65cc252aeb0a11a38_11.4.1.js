var cov_2akcptdj3o=function(){var path='/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',hash='29b616a921fcf0d51c9193584b2eadae276ccd17',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/incident/models/incident-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:38}},'1':{start:{line:2,column:26},end:{line:2,column:58}},'2':{start:{line:3,column:17},end:{line:3,column:36}},'3':{start:{line:14,column:2},end:{line:14,column:87}},'4':{start:{line:23,column:2},end:{line:23,column:76}},'5':{start:{line:32,column:2},end:{line:32,column:56}},'6':{start:{line:42,column:2},end:{line:45,column:3}},'7':{start:{line:44,column:3},end:{line:44,column:48}},'8':{start:{line:48,column:2},end:{line:48,column:39}},'9':{start:{line:49,column:2},end:{line:52,column:3}},'10':{start:{line:51,column:3},end:{line:51,column:54}},'11':{start:{line:55,column:2},end:{line:77,column:3}},'12':{start:{line:57,column:29},end:{line:57,column:31}},'13':{start:{line:58,column:3},end:{line:76,column:4}},'14':{start:{line:61,column:4},end:{line:61,column:57}},'15':{start:{line:64,column:21},end:{line:64,column:79}},'16':{start:{line:69,column:4},end:{line:72,column:5}},'17':{start:{line:71,column:5},end:{line:71,column:26}},'18':{start:{line:74,column:4},end:{line:74,column:47}},'19':{start:{line:75,column:4},end:{line:75,column:41}},'20':{start:{line:79,column:2},end:{line:79,column:89}},'21':{start:{line:83,column:0},end:{line:83,column:29}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:12,column:1},end:{line:12,column:2}},loc:{start:{line:13,column:1},end:{line:15,column:2}},line:13},'1':{name:'(anonymous_1)',decl:{start:{line:21,column:1},end:{line:21,column:2}},loc:{start:{line:22,column:1},end:{line:24,column:2}},line:22},'2':{name:'(anonymous_2)',decl:{start:{line:30,column:1},end:{line:30,column:2}},loc:{start:{line:31,column:1},end:{line:33,column:2}},line:31},'3':{name:'(anonymous_3)',decl:{start:{line:40,column:1},end:{line:40,column:2}},loc:{start:{line:41,column:1},end:{line:80,column:2}},line:41}},branchMap:{'0':{loc:{start:{line:42,column:2},end:{line:45,column:3}},type:'if',locations:[{start:{line:42,column:2},end:{line:45,column:3}},{start:{line:42,column:2},end:{line:45,column:3}}],line:42},'1':{loc:{start:{line:49,column:2},end:{line:52,column:3}},type:'if',locations:[{start:{line:49,column:2},end:{line:52,column:3}},{start:{line:49,column:2},end:{line:52,column:3}}],line:49},'2':{loc:{start:{line:55,column:2},end:{line:77,column:3}},type:'if',locations:[{start:{line:55,column:2},end:{line:77,column:3}},{start:{line:55,column:2},end:{line:77,column:3}}],line:55},'3':{loc:{start:{line:69,column:4},end:{line:72,column:5}},type:'if',locations:[{start:{line:69,column:4},end:{line:72,column:5}},{start:{line:69,column:4},end:{line:72,column:5}}],line:69}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0},f:{'0':0,'1':0,'2':0,'3':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Incident=(cov_2akcptdj3o.s[0]++,require('./incident'));const IncidentFieldType=(cov_2akcptdj3o.s[1]++,require('./incident-field-type'));const mongoose=(cov_2akcptdj3o.s[2]++,require('mongoose'));class IncidentDao{/**
	 * Returns a single incident, or false if it doesn't exist
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_2akcptdj3o.f[0]++;cov_2akcptdj3o.s[3]++;return Incident.findOne({_id:id}).populate('fields').populate('fields.type').exec();}/**
	 * Returns a list of all incidents
	 * @return Promise
	 */loadAll(){cov_2akcptdj3o.f[1]++;cov_2akcptdj3o.s[4]++;return Incident.find({}).sort('name').populate('fields.fieldType').exec();}/**
	 * Returns a list of all field types
	 * @return Promise
	 */loadFieldTypes(){cov_2akcptdj3o.f[2]++;cov_2akcptdj3o.s[5]++;return IncidentFieldType.find({}).sort('name').exec();}/**
	 * Saves the given incident
	 * @param Incident incident
	 * @return Promise
	 */save(incident){cov_2akcptdj3o.f[3]++;cov_2akcptdj3o.s[6]++;if(!incident._id){cov_2akcptdj3o.b[0][0]++;cov_2akcptdj3o.s[7]++;incident._id=new mongoose.mongo.ObjectID();}else{cov_2akcptdj3o.b[0][1]++;}//Trim properties
cov_2akcptdj3o.s[8]++;incident.name=incident.name.trim();cov_2akcptdj3o.s[9]++;if(incident.description){cov_2akcptdj3o.b[1][0]++;cov_2akcptdj3o.s[10]++;incident.description=incident.description.trim();}else{cov_2akcptdj3o.b[1][1]++;}//Add identifiers to fields
cov_2akcptdj3o.s[11]++;if(incident.fields){cov_2akcptdj3o.b[2][0]++;let existingIdentifiers=(cov_2akcptdj3o.s[12]++,[]);cov_2akcptdj3o.s[13]++;for(let i=0;i<incident.fields.length;i++){cov_2akcptdj3o.s[14]++;//Assuming a full object is always sent
incident.fields[i].type=incident.fields[i].type.id;//Assuming this has already been validated
let identifier=(cov_2akcptdj3o.s[15]++,incident.fields[i].label.toLowerCase().replace(/\s/g,'_'));//If the identifier already exists, just append a 2.
//This means if you create 15 of the same field, you'll have identifier_222222...
//Ugly, but it's just for internal identification so meh
cov_2akcptdj3o.s[16]++;if(existingIdentifiers.indexOf(identifier)>-1){cov_2akcptdj3o.b[3][0]++;cov_2akcptdj3o.s[17]++;identifier+='_(2)';}else{cov_2akcptdj3o.b[3][1]++;}cov_2akcptdj3o.s[18]++;incident.fields[i].identifier=identifier;cov_2akcptdj3o.s[19]++;existingIdentifiers.push(identifier);}}else{cov_2akcptdj3o.b[2][1]++;}cov_2akcptdj3o.s[20]++;return Incident.findOneAndUpdate({_id:incident._id},incident,{upsert:true}).exec();}}cov_2akcptdj3o.s[21]++;module.exports=IncidentDao;
var cov_z6vgvu06v=function(){var path='/home/bwilbur/projects/mercury/modules/building/models/building-dao.js',hash='c4d2dd9f59273ee9a60a73cd0e8a57dfea8b6b87',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building/models/building-dao.js',statementMap:{'0':{start:{line:1,column:19},end:{line:1,column:60}},'1':{start:{line:12,column:21},end:{line:12,column:37}},'2':{start:{line:13,column:18},end:{line:13,column:75}},'3':{start:{line:14,column:2},end:{line:14,column:17}},'4':{start:{line:22,column:21},end:{line:22,column:37}},'5':{start:{line:23,column:18},end:{line:23,column:52}},'6':{start:{line:24,column:2},end:{line:24,column:17}},'7':{start:{line:32,column:21},end:{line:32,column:37}},'8':{start:{line:33,column:18},end:{line:33,column:77}},'9':{start:{line:34,column:2},end:{line:34,column:17}},'10':{start:{line:42,column:21},end:{line:42,column:37}},'11':{start:{line:43,column:18},end:{line:43,column:71}},'12':{start:{line:44,column:2},end:{line:44,column:17}},'13':{start:{line:48,column:0},end:{line:48,column:29}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:11,column:1},end:{line:15,column:2}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:20,column:1},end:{line:20,column:2}},loc:{start:{line:21,column:1},end:{line:25,column:2}},line:21},'2':{name:'(anonymous_2)',decl:{start:{line:30,column:1},end:{line:30,column:2}},loc:{start:{line:31,column:1},end:{line:35,column:2}},line:31},'3':{name:'(anonymous_3)',decl:{start:{line:40,column:1},end:{line:40,column:2}},loc:{start:{line:41,column:1},end:{line:45,column:2}},line:41}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0},f:{'0':0,'1':0,'2':0,'3':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const ApiService=(cov_z6vgvu06v.s[0]++,require('./../../api/models/api-service'));class BuildingDao{/**
	 * Loads a single building with the given ID
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_z6vgvu06v.f[0]++;const apiService=(cov_z6vgvu06v.s[1]++,new ApiService());const promise=(cov_z6vgvu06v.s[2]++,apiService.apiGet('/building/'+id,{include:'agency'}));cov_z6vgvu06v.s[3]++;return promise;}/**
	 * Returns a list of all buildings
	 */loadAll(){cov_z6vgvu06v.f[1]++;const apiService=(cov_z6vgvu06v.s[4]++,new ApiService());const promise=(cov_z6vgvu06v.s[5]++,apiService.apiGet('/building/all'));cov_z6vgvu06v.s[6]++;return promise;}/**
	 * Returns a list of all buildings belonging to the given agency
	 */loadForAgency(agencyId){cov_z6vgvu06v.f[2]++;const apiService=(cov_z6vgvu06v.s[7]++,new ApiService());const promise=(cov_z6vgvu06v.s[8]++,apiService.apiGet('/building/agency',{agencyId:agencyId}));cov_z6vgvu06v.s[9]++;return promise;}/**
	 * Returns a list of buildings based on a given search criteria
	 */search(query){cov_z6vgvu06v.f[3]++;const apiService=(cov_z6vgvu06v.s[10]++,new ApiService());const promise=(cov_z6vgvu06v.s[11]++,apiService.apiGet('/building/search',{query:query}));cov_z6vgvu06v.s[12]++;return promise;}}cov_z6vgvu06v.s[13]++;module.exports=BuildingDao;
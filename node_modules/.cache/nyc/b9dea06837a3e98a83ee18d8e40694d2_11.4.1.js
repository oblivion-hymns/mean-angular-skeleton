var cov_11v7kdbdmu=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',hash='a3e4577ab28a377ee714691ae8cec128bbc8c8d1',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:18},end:{line:2,column:61}},'2':{start:{line:3,column:23},end:{line:3,column:51}},'3':{start:{line:4,column:20},end:{line:4,column:67}},'4':{start:{line:5,column:16},end:{line:5,column:55}},'5':{start:{line:6,column:13},end:{line:6,column:48}},'6':{start:{line:7,column:16},end:{line:7,column:55}},'7':{start:{line:13,column:19},end:{line:19,column:4}},'8':{start:{line:20,column:2},end:{line:20,column:18}},'9':{start:{line:32,column:20},end:{line:32,column:35}},'10':{start:{line:33,column:24},end:{line:33,column:51}},'11':{start:{line:36,column:22},end:{line:36,column:39}},'12':{start:{line:37,column:26},end:{line:37,column:57}},'13':{start:{line:40,column:19},end:{line:40,column:63}},'14':{start:{line:41,column:32},end:{line:41,column:107}},'15':{start:{line:44,column:23},end:{line:44,column:78}},'16':{start:{line:45,column:23},end:{line:66,column:4}},'17':{start:{line:46,column:26},end:{line:46,column:33}},'18':{start:{line:48,column:16},end:{line:48,column:19}},'19':{start:{line:49,column:14},end:{line:49,column:16}},'20':{start:{line:50,column:19},end:{line:50,column:21}},'21':{start:{line:51,column:3},end:{line:56,column:4}},'22':{start:{line:53,column:4},end:{line:53,column:31}},'23':{start:{line:54,column:4},end:{line:54,column:41}},'24':{start:{line:55,column:4},end:{line:55,column:35}},'25':{start:{line:58,column:32},end:{line:64,column:4}},'26':{start:{line:65,column:3},end:{line:65,column:31}},'27':{start:{line:68,column:2},end:{line:68,column:22}},'28':{start:{line:78,column:18},end:{line:78,column:31}},'29':{start:{line:79,column:18},end:{line:86,column:4}},'30':{start:{line:80,column:3},end:{line:83,column:4}},'31':{start:{line:82,column:4},end:{line:82,column:14}},'32':{start:{line:85,column:3},end:{line:85,column:35}},'33':{start:{line:88,column:2},end:{line:88,column:17}},'34':{start:{line:98,column:18},end:{line:110,column:4}},'35':{start:{line:99,column:27},end:{line:99,column:29}},'36':{start:{line:100,column:3},end:{line:107,column:4}},'37':{start:{line:102,column:16},end:{line:102,column:23}},'38':{start:{line:103,column:23},end:{line:103,column:37}},'39':{start:{line:104,column:21},end:{line:104,column:33}},'40':{start:{line:105,column:23},end:{line:105,column:57}},'41':{start:{line:106,column:4},end:{line:106,column:39}},'42':{start:{line:109,column:3},end:{line:109,column:41}},'43':{start:{line:111,column:2},end:{line:111,column:17}},'44':{start:{line:123,column:18},end:{line:123,column:31}},'45':{start:{line:124,column:23},end:{line:124,column:54}},'46':{start:{line:126,column:2},end:{line:126,column:19}},'47':{start:{line:128,column:18},end:{line:138,column:4}},'48':{start:{line:129,column:21},end:{line:129,column:42}},'49':{start:{line:130,column:22},end:{line:130,column:48}},'50':{start:{line:131,column:3},end:{line:131,column:78}},'51':{start:{line:133,column:17},end:{line:133,column:61}},'52':{start:{line:134,column:18},end:{line:134,column:51}},'53':{start:{line:135,column:3},end:{line:135,column:80}},'54':{start:{line:137,column:3},end:{line:137,column:24}},'55':{start:{line:140,column:2},end:{line:140,column:17}},'56':{start:{line:152,column:23},end:{line:152,column:54}},'57':{start:{line:153,column:16},end:{line:153,column:60}},'58':{start:{line:154,column:17},end:{line:154,column:46}},'59':{start:{line:155,column:18},end:{line:155,column:87}},'60':{start:{line:156,column:2},end:{line:174,column:5}},'61':{start:{line:159,column:19},end:{line:159,column:32}},'62':{start:{line:160,column:23},end:{line:160,column:52}},'63':{start:{line:161,column:28},end:{line:161,column:51}},'64':{start:{line:162,column:3},end:{line:162,column:55}},'65':{start:{line:166,column:16},end:{line:166,column:23}},'66':{start:{line:167,column:28},end:{line:167,column:35}},'67':{start:{line:168,column:3},end:{line:173,column:4}},'68':{start:{line:170,column:22},end:{line:170,column:43}},'69':{start:{line:171,column:23},end:{line:171,column:74}},'70':{start:{line:172,column:4},end:{line:172,column:78}},'71':{start:{line:176,column:2},end:{line:176,column:17}},'72':{start:{line:180,column:0},end:{line:180,column:35}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:11,column:1},end:{line:11,column:2}},loc:{start:{line:12,column:1},end:{line:21,column:2}},line:12},'1':{name:'(anonymous_1)',decl:{start:{line:29,column:1},end:{line:29,column:2}},loc:{start:{line:30,column:1},end:{line:69,column:2}},line:30},'2':{name:'(anonymous_2)',decl:{start:{line:45,column:54},end:{line:45,column:55}},loc:{start:{line:45,column:62},end:{line:66,column:3}},line:45},'3':{name:'(anonymous_3)',decl:{start:{line:76,column:1},end:{line:76,column:2}},loc:{start:{line:77,column:1},end:{line:89,column:2}},line:77},'4':{name:'(anonymous_4)',decl:{start:{line:79,column:52},end:{line:79,column:53}},loc:{start:{line:79,column:60},end:{line:86,column:3}},line:79},'5':{name:'(anonymous_5)',decl:{start:{line:96,column:1},end:{line:96,column:2}},loc:{start:{line:97,column:1},end:{line:112,column:2}},line:97},'6':{name:'(anonymous_6)',decl:{start:{line:98,column:102},end:{line:98,column:103}},loc:{start:{line:98,column:110},end:{line:110,column:3}},line:98},'7':{name:'(anonymous_7)',decl:{start:{line:121,column:1},end:{line:121,column:2}},loc:{start:{line:122,column:1},end:{line:141,column:2}},line:122},'8':{name:'(anonymous_8)',decl:{start:{line:128,column:53},end:{line:128,column:54}},loc:{start:{line:128,column:61},end:{line:132,column:3}},line:128},'9':{name:'(anonymous_9)',decl:{start:{line:132,column:10},end:{line:132,column:11}},loc:{start:{line:132,column:16},end:{line:136,column:3}},line:132},'10':{name:'(anonymous_10)',decl:{start:{line:136,column:11},end:{line:136,column:12}},loc:{start:{line:136,column:20},end:{line:138,column:3}},line:136},'11':{name:'(anonymous_11)',decl:{start:{line:150,column:1},end:{line:150,column:2}},loc:{start:{line:151,column:1},end:{line:177,column:2}},line:151},'12':{name:'(anonymous_12)',decl:{start:{line:156,column:15},end:{line:156,column:16}},loc:{start:{line:156,column:21},end:{line:163,column:3}},line:156},'13':{name:'(anonymous_13)',decl:{start:{line:163,column:10},end:{line:163,column:11}},loc:{start:{line:163,column:18},end:{line:174,column:3}},line:163}},branchMap:{'0':{loc:{start:{line:51,column:3},end:{line:56,column:4}},type:'if',locations:[{start:{line:51,column:3},end:{line:56,column:4}},{start:{line:51,column:3},end:{line:56,column:4}}],line:51},'1':{loc:{start:{line:80,column:3},end:{line:83,column:4}},type:'if',locations:[{start:{line:80,column:3},end:{line:83,column:4}},{start:{line:80,column:3},end:{line:83,column:4}}],line:80},'2':{loc:{start:{line:168,column:3},end:{line:173,column:4}},type:'if',locations:[{start:{line:168,column:3},end:{line:173,column:4}},{start:{line:168,column:3},end:{line:173,column:4}}],line:168},'3':{loc:{start:{line:168,column:7},end:{line:168,column:56}},type:'binary-expr',locations:[{start:{line:168,column:7},end:{line:168,column:24}},{start:{line:168,column:28},end:{line:168,column:56}}],line:168}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0,'72':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_11v7kdbdmu.s[0]++,require('mongoose'));const AgencyDao=(cov_11v7kdbdmu.s[1]++,require('./../../agency/models/agency-dao'));const BuildingAgency=(cov_11v7kdbdmu.s[2]++,require('./building-agency'));const BuildingDao=(cov_11v7kdbdmu.s[3]++,require('./../../building/models/building-dao'));const RoleDao=(cov_11v7kdbdmu.s[4]++,require('./../../auth/models/role-dao'));const User=(cov_11v7kdbdmu.s[5]++,require('./../../user/models/user'));const UserDao=(cov_11v7kdbdmu.s[6]++,require('./../../user/models/user-dao'));class BuildingAgencyDao{getPopulateOptions(){cov_11v7kdbdmu.f[0]++;const populate=(cov_11v7kdbdmu.s[7]++,[{path:'reps',model:'User'},{path:'incidents.contacts',model:'Contact'}]);cov_11v7kdbdmu.s[8]++;return populate;}/**
	 * Loads a single Building-Agency Unit with the given IDs
	 * @param string buildingId
	 * @param string agencyId
	 * @return Promise
	 */loadOne(buildingId,agencyId){cov_11v7kdbdmu.f[1]++;//Get agency
const agencyDao=(cov_11v7kdbdmu.s[9]++,new AgencyDao());const agencyPromise=(cov_11v7kdbdmu.s[10]++,agencyDao.loadOne(agencyId));//Get building
const buildingDao=(cov_11v7kdbdmu.s[11]++,new BuildingDao());const buildingPromise=(cov_11v7kdbdmu.s[12]++,buildingDao.loadOne(buildingId));//Get building-agency unit
const bauQuery=(cov_11v7kdbdmu.s[13]++,{buildingId:buildingId,agencyId:agencyId});const buildingAgencyPromise=(cov_11v7kdbdmu.s[14]++,BuildingAgency.findOne(bauQuery).populate(this.getPopulateOptions()).exec());//Merge promises
const joinPromises=(cov_11v7kdbdmu.s[15]++,[agencyPromise,buildingPromise,buildingAgencyPromise]);const mergePromise=(cov_11v7kdbdmu.s[16]++,Promise.all(joinPromises).then(data=>{cov_11v7kdbdmu.f[2]++;const buildingAgency=(cov_11v7kdbdmu.s[17]++,data[2]);let health=(cov_11v7kdbdmu.s[18]++,0.0);let reps=(cov_11v7kdbdmu.s[19]++,[]);let incidents=(cov_11v7kdbdmu.s[20]++,[]);cov_11v7kdbdmu.s[21]++;if(buildingAgency){cov_11v7kdbdmu.b[0][0]++;cov_11v7kdbdmu.s[22]++;reps=buildingAgency.reps;cov_11v7kdbdmu.s[23]++;incidents=buildingAgency.incidents;cov_11v7kdbdmu.s[24]++;health=buildingAgency.health;}else{cov_11v7kdbdmu.b[0][1]++;}const loadedBuildingAgency=(cov_11v7kdbdmu.s[25]++,{agency:data[0].agency,building:data[1].building,health:health,reps:reps,incidents:incidents});cov_11v7kdbdmu.s[26]++;return loadedBuildingAgency;}));cov_11v7kdbdmu.s[27]++;return mergePromise;}/**
	 * Loads all Building-agency units for which the given request's user is a rep
	 * @param Request req
	 * @return Promise
	 */loadForLoggedInUser(req){cov_11v7kdbdmu.f[3]++;const userDao=(cov_11v7kdbdmu.s[28]++,new UserDao());const promise=(cov_11v7kdbdmu.s[29]++,userDao.loadFromRequest(req).then(user=>{cov_11v7kdbdmu.f[4]++;cov_11v7kdbdmu.s[30]++;if(!user){cov_11v7kdbdmu.b[1][0]++;cov_11v7kdbdmu.s[31]++;return[];}else{cov_11v7kdbdmu.b[1][1]++;}cov_11v7kdbdmu.s[32]++;return this.loadForRep(user.id);}));cov_11v7kdbdmu.s[33]++;return promise;}/**
	 * Loads all building-agency units for which the given user is a rep
	 * @param string userId
	 * @return Promise
	 */loadForRep(userId){cov_11v7kdbdmu.f[5]++;const promise=(cov_11v7kdbdmu.s[34]++,BuildingAgency.find({reps:userId}).populate(this.getPopulateOptions()).exec().then(baus=>{cov_11v7kdbdmu.f[6]++;let constructPromises=(cov_11v7kdbdmu.s[35]++,[]);cov_11v7kdbdmu.s[36]++;for(let i=0;i<baus.length;i++){const bau=(cov_11v7kdbdmu.s[37]++,baus[i]);const buildingId=(cov_11v7kdbdmu.s[38]++,bau.buildingId);const agencyId=(cov_11v7kdbdmu.s[39]++,bau.agencyId);const bauPromise=(cov_11v7kdbdmu.s[40]++,this.loadOne(buildingId,agencyId));cov_11v7kdbdmu.s[41]++;constructPromises.push(bauPromise);}cov_11v7kdbdmu.s[42]++;return Promise.all(constructPromises);}));cov_11v7kdbdmu.s[43]++;return promise;}/**
	 * Assigns a rep to the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[7]++;const roleDao=(cov_11v7kdbdmu.s[44]++,new RoleDao());const userObjectId=(cov_11v7kdbdmu.s[45]++,mongoose.Types.ObjectId(userId));cov_11v7kdbdmu.s[46]++;console.log('1');const promise=(cov_11v7kdbdmu.s[47]++,roleDao.loadBuildingRepRole().then(role=>{cov_11v7kdbdmu.f[8]++;const userQuery=(cov_11v7kdbdmu.s[48]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[49]++,{$addToSet:{roles:role}});cov_11v7kdbdmu.s[50]++;return User.findOneAndUpdate(userQuery,userUpdate,{upsert:true}).exec();}).then(()=>{cov_11v7kdbdmu.f[9]++;const query=(cov_11v7kdbdmu.s[51]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[52]++,{$addToSet:{reps:userObjectId}});cov_11v7kdbdmu.s[53]++;return BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec();}).catch(error=>{cov_11v7kdbdmu.f[10]++;cov_11v7kdbdmu.s[54]++;console.error(error);}));cov_11v7kdbdmu.s[55]++;return promise;}/**
	 * Removes a rep from the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */unassignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[11]++;const userObjectId=(cov_11v7kdbdmu.s[56]++,mongoose.Types.ObjectId(userId));const query=(cov_11v7kdbdmu.s[57]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[58]++,{$pull:{reps:userObjectId}});const promise=(cov_11v7kdbdmu.s[59]++,BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec());cov_11v7kdbdmu.s[60]++;promise.then(()=>{cov_11v7kdbdmu.f[12]++;//Once the BAU has been updated, get the Building Rep role and any buildings
//still assigned to the user
const roleDao=(cov_11v7kdbdmu.s[61]++,new RoleDao());const rolePromise=(cov_11v7kdbdmu.s[62]++,roleDao.loadBuildingRepRole());const buildingsPromise=(cov_11v7kdbdmu.s[63]++,this.loadForRep(userId));cov_11v7kdbdmu.s[64]++;return Promise.all([rolePromise,buildingsPromise]);}).then(data=>{cov_11v7kdbdmu.f[13]++;//If the user has no buildings assigned, automatically relinquish them
//of their Building Rep role
const role=(cov_11v7kdbdmu.s[65]++,data[0]);const buildingAgencies=(cov_11v7kdbdmu.s[66]++,data[1]);cov_11v7kdbdmu.s[67]++;if((cov_11v7kdbdmu.b[3][0]++,!buildingAgencies)||(cov_11v7kdbdmu.b[3][1]++,buildingAgencies.length==0)){cov_11v7kdbdmu.b[2][0]++;const userQuery=(cov_11v7kdbdmu.s[68]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[69]++,{$pull:{roles:mongoose.Types.ObjectId(role._id)}});cov_11v7kdbdmu.s[70]++;return User.findOneAndUpdate(userQuery,userUpdate,{multi:true}).exec();}else{cov_11v7kdbdmu.b[2][1]++;}});cov_11v7kdbdmu.s[71]++;return promise;}}cov_11v7kdbdmu.s[72]++;module.exports=BuildingAgencyDao;
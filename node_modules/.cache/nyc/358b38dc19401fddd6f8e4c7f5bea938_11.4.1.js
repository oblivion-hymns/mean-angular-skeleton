var cov_2eu06nzhgn=function(){var path='/home/bwilbur/projects/mercury/modules/auth/models/role-dao.js',hash='a40a11f7e4ef3ed706cf0dc5bd70ac61fd0a85d4',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/auth/models/role-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:13},end:{line:2,column:30}},'2':{start:{line:3,column:13},end:{line:3,column:48}},'3':{start:{line:14,column:2},end:{line:14,column:64}},'4':{start:{line:24,column:2},end:{line:24,column:71}},'5':{start:{line:32,column:2},end:{line:32,column:87}},'6':{start:{line:41,column:2},end:{line:41,column:67}},'7':{start:{line:51,column:2},end:{line:53,column:5}},'8':{start:{line:52,column:3},end:{line:52,column:39}},'9':{start:{line:64,column:13},end:{line:64,column:44}},'10':{start:{line:65,column:17},end:{line:65,column:45}},'11':{start:{line:66,column:18},end:{line:66,column:59}},'12':{start:{line:67,column:2},end:{line:67,column:17}},'13':{start:{line:78,column:13},end:{line:78,column:44}},'14':{start:{line:79,column:17},end:{line:79,column:41}},'15':{start:{line:80,column:18},end:{line:80,column:59}},'16':{start:{line:81,column:2},end:{line:81,column:17}},'17':{start:{line:92,column:23},end:{line:92,column:54}},'18':{start:{line:93,column:29},end:{line:93,column:66}},'19':{start:{line:94,column:17},end:{line:94,column:63}},'20':{start:{line:95,column:18},end:{line:95,column:69}},'21':{start:{line:96,column:2},end:{line:96,column:17}},'22':{start:{line:107,column:23},end:{line:107,column:54}},'23':{start:{line:108,column:29},end:{line:108,column:66}},'24':{start:{line:109,column:17},end:{line:109,column:59}},'25':{start:{line:110,column:18},end:{line:110,column:69}},'26':{start:{line:111,column:2},end:{line:111,column:17}},'27':{start:{line:122,column:2},end:{line:122,column:26}},'28':{start:{line:123,column:2},end:{line:123,column:30}},'29':{start:{line:125,column:18},end:{line:134,column:4}},'30':{start:{line:126,column:3},end:{line:129,column:4}},'31':{start:{line:128,column:4},end:{line:128,column:17}},'32':{start:{line:131,column:3},end:{line:131,column:58}},'33':{start:{line:133,column:3},end:{line:133,column:17}},'34':{start:{line:136,column:2},end:{line:136,column:17}},'35':{start:{line:140,column:0},end:{line:140,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:12,column:1},end:{line:12,column:2}},loc:{start:{line:13,column:1},end:{line:15,column:2}},line:13},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:1},end:{line:22,column:2}},loc:{start:{line:23,column:1},end:{line:25,column:2}},line:23},'2':{name:'(anonymous_2)',decl:{start:{line:30,column:1},end:{line:30,column:2}},loc:{start:{line:31,column:1},end:{line:33,column:2}},line:31},'3':{name:'(anonymous_3)',decl:{start:{line:39,column:1},end:{line:39,column:2}},loc:{start:{line:40,column:1},end:{line:42,column:2}},line:40},'4':{name:'(anonymous_4)',decl:{start:{line:49,column:1},end:{line:49,column:2}},loc:{start:{line:50,column:1},end:{line:54,column:2}},line:50},'5':{name:'(anonymous_5)',decl:{start:{line:51,column:35},end:{line:51,column:36}},loc:{start:{line:51,column:43},end:{line:53,column:3}},line:51},'6':{name:'(anonymous_6)',decl:{start:{line:62,column:1},end:{line:62,column:2}},loc:{start:{line:63,column:1},end:{line:68,column:2}},line:63},'7':{name:'(anonymous_7)',decl:{start:{line:76,column:1},end:{line:76,column:2}},loc:{start:{line:77,column:1},end:{line:82,column:2}},line:77},'8':{name:'(anonymous_8)',decl:{start:{line:90,column:1},end:{line:90,column:2}},loc:{start:{line:91,column:1},end:{line:97,column:2}},line:91},'9':{name:'(anonymous_9)',decl:{start:{line:105,column:1},end:{line:105,column:2}},loc:{start:{line:106,column:1},end:{line:112,column:2}},line:106},'10':{name:'(anonymous_10)',decl:{start:{line:120,column:1},end:{line:120,column:2}},loc:{start:{line:121,column:1},end:{line:137,column:2}},line:121},'11':{name:'(anonymous_11)',decl:{start:{line:125,column:49},end:{line:125,column:50}},loc:{start:{line:125,column:57},end:{line:132,column:3}},line:125},'12':{name:'(anonymous_12)',decl:{start:{line:132,column:10},end:{line:132,column:11}},loc:{start:{line:132,column:18},end:{line:134,column:3}},line:132}},branchMap:{'0':{loc:{start:{line:52,column:10},end:{line:52,column:38}},type:'binary-expr',locations:[{start:{line:52,column:10},end:{line:52,column:29}},{start:{line:52,column:33},end:{line:52,column:38}}],line:52},'1':{loc:{start:{line:122,column:11},end:{line:122,column:25}},type:'binary-expr',locations:[{start:{line:122,column:11},end:{line:122,column:17}},{start:{line:122,column:21},end:{line:122,column:25}}],line:122},'2':{loc:{start:{line:123,column:13},end:{line:123,column:29}},type:'binary-expr',locations:[{start:{line:123,column:13},end:{line:123,column:21}},{start:{line:123,column:25},end:{line:123,column:29}}],line:123},'3':{loc:{start:{line:126,column:3},end:{line:129,column:4}},type:'if',locations:[{start:{line:126,column:3},end:{line:129,column:4}},{start:{line:126,column:3},end:{line:129,column:4}}],line:126}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_2eu06nzhgn.s[0]++,require('mongoose'));const Role=(cov_2eu06nzhgn.s[1]++,require('./role'));const User=(cov_2eu06nzhgn.s[2]++,require('./../../user/models/user'));class RoleDao{/**
	 * Loads a single role by ID
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_2eu06nzhgn.f[0]++;cov_2eu06nzhgn.s[3]++;return Role.findOne({_id:id}).populate('permissions').exec();}/**
	 * Returns the role with the given name, if one exists
	 * @param string roleName
	 * @return Promise
	 */loadByName(roleName){cov_2eu06nzhgn.f[1]++;cov_2eu06nzhgn.s[4]++;return Role.findOne({name:roleName}).populate('permissions').exec();}/**
	 * Returns only roles assignable by OSGS users
	 */loadOSGSRoles(){cov_2eu06nzhgn.f[2]++;cov_2eu06nzhgn.s[5]++;return Role.find({osgsAssignable:true}).sort('name').populate('permissions').exec();}/**
	 * Returns a list of all Roles
	 * @return Promise
	 */loadAll(){cov_2eu06nzhgn.f[3]++;cov_2eu06nzhgn.s[6]++;return Role.find({}).sort('name').populate('permissions').exec();}/**
	 * Determines whether the given role is an OSGS-assignable role
	 * @param string roleId
	 * @return Promise
	 */isRoleOSGSAssignable(roleId){cov_2eu06nzhgn.f[4]++;cov_2eu06nzhgn.s[7]++;return this.loadOne(roleId).then(role=>{cov_2eu06nzhgn.f[5]++;cov_2eu06nzhgn.s[8]++;return(cov_2eu06nzhgn.b[0][0]++,role.osgsAssignable)||(cov_2eu06nzhgn.b[0][1]++,false);});}/**
	 * Assigns the given role to the given user
	 * @param string userId
	 * @param string roleId
	 * @return Promise
	 */assignRole(userId,roleId){cov_2eu06nzhgn.f[6]++;const id=(cov_2eu06nzhgn.s[9]++,mongoose.Types.ObjectId(userId));const update=(cov_2eu06nzhgn.s[10]++,{$addToSet:{roles:roleId}});const promise=(cov_2eu06nzhgn.s[11]++,User.findByIdAndUpdate(id,update).exec());cov_2eu06nzhgn.s[12]++;return promise;}/**
	 * Removes the given role from the given user
	 * @param string userId
	 * @param string roleId
	 * @return Promise
	 */unassignRole(userId,roleId){cov_2eu06nzhgn.f[7]++;const id=(cov_2eu06nzhgn.s[13]++,mongoose.Types.ObjectId(userId));const update=(cov_2eu06nzhgn.s[14]++,{$pull:{roles:roleId}});const promise=(cov_2eu06nzhgn.s[15]++,User.findByIdAndUpdate(id,update).exec());cov_2eu06nzhgn.s[16]++;return promise;}/**
	 * Assigns the given permission to the given role
	 * @param string roleId
	 * @param string permissionId
	 * @return Promise
	 */assignPermission(roleId,permissionId){cov_2eu06nzhgn.f[8]++;const roleObjectId=(cov_2eu06nzhgn.s[17]++,mongoose.Types.ObjectId(roleId));const permissionObjectId=(cov_2eu06nzhgn.s[18]++,mongoose.Types.ObjectId(permissionId));const update=(cov_2eu06nzhgn.s[19]++,{$addToSet:{permissions:permissionObjectId}});const promise=(cov_2eu06nzhgn.s[20]++,Role.findByIdAndUpdate(roleObjectId,update).exec());cov_2eu06nzhgn.s[21]++;return promise;}/**
	 * Removes the given permission from the given role
	 * @param string roleId
	 * @param string permissionId
	 * @return Promise
	 */unassignPermission(roleId,permissionId){cov_2eu06nzhgn.f[9]++;const roleObjectId=(cov_2eu06nzhgn.s[22]++,mongoose.Types.ObjectId(roleId));const permissionObjectId=(cov_2eu06nzhgn.s[23]++,mongoose.Types.ObjectId(permissionId));const update=(cov_2eu06nzhgn.s[24]++,{$pull:{permissions:permissionObjectId}});const promise=(cov_2eu06nzhgn.s[25]++,Role.findByIdAndUpdate(roleObjectId,update).exec());cov_2eu06nzhgn.s[26]++;return promise;}/**
	 * Determines whether or not the User with the given ID has the given role
	 * @param string userId
	 * @param string roleName
	 * @return Promise
	 */hasRole(userId,roleName){cov_2eu06nzhgn.f[10]++;cov_2eu06nzhgn.s[27]++;userId=(cov_2eu06nzhgn.b[1][0]++,userId)||(cov_2eu06nzhgn.b[1][1]++,null);cov_2eu06nzhgn.s[28]++;roleName=(cov_2eu06nzhgn.b[2][0]++,roleName)||(cov_2eu06nzhgn.b[2][1]++,null);const promise=(cov_2eu06nzhgn.s[29]++,this.loadByName(roleName).then(role=>{cov_2eu06nzhgn.f[11]++;cov_2eu06nzhgn.s[30]++;if(!role){cov_2eu06nzhgn.b[3][0]++;cov_2eu06nzhgn.s[31]++;return false;}else{cov_2eu06nzhgn.b[3][1]++;}cov_2eu06nzhgn.s[32]++;return User.findOne({_id:userId,roles:role}).exec();}).then(user=>{cov_2eu06nzhgn.f[12]++;cov_2eu06nzhgn.s[33]++;return!!user;}));cov_2eu06nzhgn.s[34]++;return promise;}}cov_2eu06nzhgn.s[35]++;module.exports=RoleDao;
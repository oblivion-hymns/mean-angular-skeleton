var cov_qlusbya8v=function(){var path='/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',hash='c844c0e4470c32aa0c97fffb7b50b52e2e97307a',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',statementMap:{'0':{start:{line:1,column:20},end:{line:1,column:63}},'1':{start:{line:2,column:22},end:{line:2,column:67}},'2':{start:{line:3,column:13},end:{line:3,column:30}},'3':{start:{line:17,column:2},end:{line:17,column:88}},'4':{start:{line:28,column:2},end:{line:28,column:24}},'5':{start:{line:29,column:2},end:{line:29,column:32}},'6':{start:{line:31,column:24},end:{line:31,column:70}},'7':{start:{line:32,column:22},end:{line:32,column:128}},'8':{start:{line:33,column:23},end:{line:33,column:42}},'9':{start:{line:34,column:18},end:{line:43,column:4}},'10':{start:{line:35,column:17},end:{line:35,column:24}},'11':{start:{line:36,column:17},end:{line:36,column:24}},'12':{start:{line:38,column:3},end:{line:42,column:5}},'13':{start:{line:45,column:2},end:{line:45,column:17}},'14':{start:{line:55,column:2},end:{line:55,column:22}},'15':{start:{line:56,column:23},end:{line:56,column:49}},'16':{start:{line:57,column:16},end:{line:64,column:4}},'17':{start:{line:58,column:3},end:{line:61,column:4}},'18':{start:{line:60,column:4},end:{line:60,column:16}},'19':{start:{line:63,column:3},end:{line:63,column:15}},'20':{start:{line:65,column:2},end:{line:65,column:17}},'21':{start:{line:75,column:2},end:{line:75,column:77}},'22':{start:{line:85,column:22},end:{line:85,column:39}},'23':{start:{line:86,column:24},end:{line:86,column:43}},'24':{start:{line:87,column:16},end:{line:87,column:78}},'25':{start:{line:88,column:17},end:{line:88,column:54}},'26':{start:{line:89,column:2},end:{line:89,column:30}},'27':{start:{line:98,column:2},end:{line:98,column:82}},'28':{start:{line:107,column:16},end:{line:107,column:58}},'29':{start:{line:108,column:18},end:{line:108,column:81}},'30':{start:{line:109,column:16},end:{line:109,column:30}},'31':{start:{line:111,column:2},end:{line:111,column:85}},'32':{start:{line:121,column:2},end:{line:121,column:21}},'33':{start:{line:131,column:2},end:{line:131,column:45}},'34':{start:{line:135,column:0},end:{line:135,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:16,column:1},end:{line:18,column:2}},line:16},'1':{name:'(anonymous_1)',decl:{start:{line:26,column:1},end:{line:26,column:2}},loc:{start:{line:27,column:1},end:{line:46,column:2}},line:27},'2':{name:'(anonymous_2)',decl:{start:{line:34,column:64},end:{line:34,column:65}},loc:{start:{line:34,column:72},end:{line:43,column:3}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:53,column:1},end:{line:53,column:2}},loc:{start:{line:54,column:1},end:{line:66,column:2}},line:54},'4':{name:'(anonymous_4)',decl:{start:{line:57,column:52},end:{line:57,column:53}},loc:{start:{line:57,column:73},end:{line:64,column:3}},line:57},'5':{name:'(anonymous_5)',decl:{start:{line:73,column:1},end:{line:73,column:2}},loc:{start:{line:74,column:1},end:{line:76,column:2}},line:74},'6':{name:'(anonymous_6)',decl:{start:{line:83,column:1},end:{line:83,column:2}},loc:{start:{line:84,column:1},end:{line:90,column:2}},line:84},'7':{name:'(anonymous_7)',decl:{start:{line:96,column:1},end:{line:96,column:2}},loc:{start:{line:97,column:1},end:{line:99,column:2}},line:97},'8':{name:'(anonymous_8)',decl:{start:{line:105,column:1},end:{line:105,column:2}},loc:{start:{line:106,column:1},end:{line:112,column:2}},line:106},'9':{name:'(anonymous_9)',decl:{start:{line:119,column:1},end:{line:119,column:2}},loc:{start:{line:120,column:1},end:{line:122,column:2}},line:120},'10':{name:'(anonymous_10)',decl:{start:{line:129,column:1},end:{line:129,column:2}},loc:{start:{line:130,column:1},end:{line:132,column:2}},line:130}},branchMap:{'0':{loc:{start:{line:55,column:10},end:{line:55,column:21}},type:'binary-expr',locations:[{start:{line:55,column:10},end:{line:55,column:15}},{start:{line:55,column:19},end:{line:55,column:21}}],line:55},'1':{loc:{start:{line:58,column:3},end:{line:61,column:4}},type:'if',locations:[{start:{line:58,column:3},end:{line:61,column:4}},{start:{line:58,column:3},end:{line:61,column:4}}],line:58}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const TokenParser=(cov_qlusbya8v.s[0]++,require('./../../auth/models/token-parser'));const TokenVerifier=(cov_qlusbya8v.s[1]++,require('./../../auth/models/token-verifier'));const User=(cov_qlusbya8v.s[2]++,require('./user'));/**
 * Database access associated with users
 */class UserDao{/**
	 * Loads a single user
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_qlusbya8v.f[0]++;cov_qlusbya8v.s[3]++;return User.findOne({_id:id},'firstName lastName email passwordReset roles').exec();}/**
	 * Returns a paginated subset of users, as well as the total number of pages
	 * @param int page - Zero indexed
	 * @param int pageSize - Max 100
	 * @return Promise
	 */loadPage(page,pageSize){cov_qlusbya8v.f[1]++;cov_qlusbya8v.s[4]++;page=parseInt(page);cov_qlusbya8v.s[5]++;pageSize=parseInt(pageSize);const includeString=(cov_qlusbya8v.s[6]++,'firstName lastName email passwordReset roles');const findPromise=(cov_qlusbya8v.s[7]++,User.find({},includeString).sort('lastName').skip(page*pageSize).limit(pageSize).populate('roles').exec());const countPromise=(cov_qlusbya8v.s[8]++,User.count().exec());const promise=(cov_qlusbya8v.s[9]++,Promise.all([findPromise,countPromise]).then(data=>{cov_qlusbya8v.f[2]++;const users=(cov_qlusbya8v.s[10]++,data[0]);const count=(cov_qlusbya8v.s[11]++,data[1]);cov_qlusbya8v.s[12]++;return{totalPages:Math.ceil(count/pageSize),totalUsers:count,users:users};}));cov_qlusbya8v.s[13]++;return promise;}/**
	 * Loads the User with the given email. Returns all fields
	 * @param string email
	 * @return Promise
	 */loadByEmail(email){cov_qlusbya8v.f[3]++;cov_qlusbya8v.s[14]++;email=(cov_qlusbya8v.b[0][0]++,email)||(cov_qlusbya8v.b[0][1]++,'');const trimmedEmail=(cov_qlusbya8v.s[15]++,email.trim().toLowerCase());var promise=(cov_qlusbya8v.s[16]++,User.findOne({email:trimmedEmail},function(error,user){cov_qlusbya8v.f[4]++;cov_qlusbya8v.s[17]++;if(error){cov_qlusbya8v.b[1][0]++;cov_qlusbya8v.s[18]++;throw error;}else{cov_qlusbya8v.b[1][1]++;}cov_qlusbya8v.s[19]++;return user;}));cov_qlusbya8v.s[20]++;return promise;}/**
	 * Returns all users with the given role
	 * @param string roleId
	 * @return Promise
	 */loadByRole(roleId){cov_qlusbya8v.f[5]++;cov_qlusbya8v.s[21]++;return User.find({roles:roleId},'firstName lastName email roles').exec();}/**
	 * Loads and returns the User who made the given request
	 * @param Request req
	 * @return Promise
	 */loadFromRequest(req){cov_qlusbya8v.f[6]++;const tokenParser=(cov_qlusbya8v.s[22]++,new TokenParser());const tokenVerifier=(cov_qlusbya8v.s[23]++,new TokenVerifier());const token=(cov_qlusbya8v.s[24]++,tokenVerifier.getTokenFromAuthHeader(req.get('Authorization')));const userId=(cov_qlusbya8v.s[25]++,tokenParser.getUserIdFromToken(token));cov_qlusbya8v.s[26]++;return this.loadOne(userId);}/**
	 * Loads a list of all users. Does not include passwords
	 * @return Promise
	 */loadAll(){cov_qlusbya8v.f[7]++;cov_qlusbya8v.s[27]++;return User.find({},'firstName lastName email roles').populate('roles').exec();}/**
	 * @param string queryString
	 * @return Promise
	 */search(queryString){cov_qlusbya8v.f[8]++;const regex=(cov_qlusbya8v.s[28]++,new RegExp('.*'+queryString+'.*','i'));const options=(cov_qlusbya8v.s[29]++,[{'firstName':{$regex:regex}},{'lastName':{$regex:regex}}]);const query=(cov_qlusbya8v.s[30]++,{$or:options});cov_qlusbya8v.s[31]++;return User.find(query,'firstName lastName email roles').populate('roles').exec();}/**
	 * Saves the given User and returns its Promise
	 * @param User user
	 * @return Promise
	 */save(user){cov_qlusbya8v.f[9]++;cov_qlusbya8v.s[32]++;return user.save();}/**
	 * Completely removes the given user from the database
	 * @param string userId
	 * @return Promise
	 */deleteUser(userId){cov_qlusbya8v.f[10]++;cov_qlusbya8v.s[33]++;return User.remove({'_id':userId}).exec();}}cov_qlusbya8v.s[34]++;module.exports=UserDao;
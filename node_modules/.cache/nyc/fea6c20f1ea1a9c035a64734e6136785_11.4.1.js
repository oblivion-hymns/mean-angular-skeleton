var cov_4qit4vp2i=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',hash='2bf39081939e9db14942faa7e393f298cfcfae69',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:23},end:{line:2,column:51}},'2':{start:{line:3,column:26},end:{line:3,column:58}},'3':{start:{line:17,column:26},end:{line:17,column:60}},'4':{start:{line:21,column:28},end:{line:21,column:51}},'5':{start:{line:22,column:2},end:{line:59,column:5}},'6':{start:{line:24,column:23},end:{line:24,column:28}},'7':{start:{line:25,column:3},end:{line:32,column:4}},'8':{start:{line:27,column:4},end:{line:31,column:5}},'9':{start:{line:29,column:5},end:{line:29,column:26}},'10':{start:{line:30,column:5},end:{line:30,column:11}},'11':{start:{line:34,column:3},end:{line:58,column:4}},'12':{start:{line:37,column:22},end:{line:41,column:5}},'13':{start:{line:42,column:24},end:{line:46,column:5}},'14':{start:{line:47,column:4},end:{line:47,column:74}},'15':{start:{line:52,column:4},end:{line:56,column:7}},'16':{start:{line:57,column:4},end:{line:57,column:22}},'17':{start:{line:72,column:26},end:{line:72,column:60}},'18':{start:{line:73,column:20},end:{line:77,column:3}},'19':{start:{line:78,column:22},end:{line:82,column:3}},'20':{start:{line:83,column:2},end:{line:83,column:72}},'21':{start:{line:87,column:0},end:{line:87,column:42}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:16,column:1},end:{line:60,column:2}},line:16},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:62},end:{line:22,column:63}},loc:{start:{line:22,column:69},end:{line:59,column:3}},line:22},'2':{name:'(anonymous_2)',decl:{start:{line:70,column:1},end:{line:70,column:2}},loc:{start:{line:71,column:1},end:{line:84,column:2}},line:71}},branchMap:{'0':{loc:{start:{line:27,column:4},end:{line:31,column:5}},type:'if',locations:[{start:{line:27,column:4},end:{line:31,column:5}},{start:{line:27,column:4},end:{line:31,column:5}}],line:27},'1':{loc:{start:{line:34,column:3},end:{line:58,column:4}},type:'if',locations:[{start:{line:34,column:3},end:{line:58,column:4}},{start:{line:34,column:3},end:{line:58,column:4}}],line:34}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_4qit4vp2i.s[0]++,require('mongoose'));const BuildingAgency=(cov_4qit4vp2i.s[1]++,require('./building-agency'));const BuildingAgencyDao=(cov_4qit4vp2i.s[2]++,require('./building-agency-dao'));class BuildingAgencyContactDao{/**
	 * Adds the given contact to the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */addContactToIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[0]++;const contactObjectId=(cov_4qit4vp2i.s[3]++,mongoose.Types.ObjectId(contactId));//This is a little more complicated than just running an update query, because the keys may or may not exist,
//and even if they do exist, they may or may not match a find since we have to search for a specific subdoc
const buildingAgencyDao=(cov_4qit4vp2i.s[4]++,new BuildingAgencyDao());cov_4qit4vp2i.s[5]++;return buildingAgencyDao.loadOne(buildingId,agencyId).then(bau=>{cov_4qit4vp2i.f[1]++;let foundIncident=(cov_4qit4vp2i.s[6]++,false);cov_4qit4vp2i.s[7]++;for(let i=0;i<bau.incidents.length;i++){cov_4qit4vp2i.s[8]++;if(bau.incidents[i].incidentId==incidentId){cov_4qit4vp2i.b[0][0]++;cov_4qit4vp2i.s[9]++;foundIncident=true;cov_4qit4vp2i.s[10]++;break;}else{cov_4qit4vp2i.b[0][1]++;}}cov_4qit4vp2i.s[11]++;if(foundIncident){cov_4qit4vp2i.b[1][0]++;//If we found the incident, issue an update query and let mongo do the hard work
const findQuery=(cov_4qit4vp2i.s[12]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[13]++,{$addToSet:{'incidents.$.contacts':contactObjectId}});cov_4qit4vp2i.s[14]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}else{cov_4qit4vp2i.b[1][1]++;cov_4qit4vp2i.s[15]++;//If we didn't find the incident at all (it hasn't been touched yet), add the incident
bau.incidents.push({incidentId:incidentId,fields:[],contacts:[contactObjectId]});cov_4qit4vp2i.s[16]++;return bau.save();}});}/**
	 * Removes the given contact from the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */removeContactFromIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[2]++;const contactObjectId=(cov_4qit4vp2i.s[17]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_4qit4vp2i.s[18]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[19]++,{$pull:{'incidents.$.contacts':contactObjectId}});cov_4qit4vp2i.s[20]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}}cov_4qit4vp2i.s[21]++;module.exports=BuildingAgencyContactDao;
var cov_11v7kdbdmu=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',hash='ffa09904daa2912ba3fffa056ab19f87d258b203',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:18},end:{line:2,column:61}},'2':{start:{line:3,column:23},end:{line:3,column:51}},'3':{start:{line:4,column:20},end:{line:4,column:67}},'4':{start:{line:5,column:16},end:{line:5,column:55}},'5':{start:{line:6,column:13},end:{line:6,column:48}},'6':{start:{line:7,column:16},end:{line:7,column:55}},'7':{start:{line:20,column:20},end:{line:20,column:35}},'8':{start:{line:21,column:24},end:{line:21,column:51}},'9':{start:{line:24,column:22},end:{line:24,column:39}},'10':{start:{line:25,column:26},end:{line:25,column:57}},'11':{start:{line:28,column:19},end:{line:28,column:63}},'12':{start:{line:29,column:32},end:{line:29,column:88}},'13':{start:{line:32,column:23},end:{line:32,column:78}},'14':{start:{line:33,column:23},end:{line:53,column:4}},'15':{start:{line:34,column:26},end:{line:34,column:33}},'16':{start:{line:35,column:14},end:{line:35,column:16}},'17':{start:{line:36,column:19},end:{line:36,column:21}},'18':{start:{line:37,column:16},end:{line:37,column:19}},'19':{start:{line:38,column:3},end:{line:43,column:4}},'20':{start:{line:40,column:4},end:{line:40,column:31}},'21':{start:{line:41,column:4},end:{line:41,column:41}},'22':{start:{line:42,column:4},end:{line:42,column:35}},'23':{start:{line:45,column:32},end:{line:51,column:4}},'24':{start:{line:52,column:3},end:{line:52,column:31}},'25':{start:{line:55,column:2},end:{line:55,column:22}},'26':{start:{line:66,column:18},end:{line:66,column:31}},'27':{start:{line:67,column:18},end:{line:74,column:4}},'28':{start:{line:68,column:3},end:{line:71,column:4}},'29':{start:{line:70,column:4},end:{line:70,column:14}},'30':{start:{line:73,column:3},end:{line:73,column:35}},'31':{start:{line:76,column:2},end:{line:76,column:17}},'32':{start:{line:86,column:18},end:{line:98,column:4}},'33':{start:{line:87,column:27},end:{line:87,column:29}},'34':{start:{line:88,column:3},end:{line:95,column:4}},'35':{start:{line:90,column:16},end:{line:90,column:23}},'36':{start:{line:91,column:23},end:{line:91,column:37}},'37':{start:{line:92,column:21},end:{line:92,column:33}},'38':{start:{line:93,column:23},end:{line:93,column:57}},'39':{start:{line:94,column:4},end:{line:94,column:39}},'40':{start:{line:97,column:3},end:{line:97,column:41}},'41':{start:{line:99,column:2},end:{line:99,column:17}},'42':{start:{line:111,column:18},end:{line:111,column:31}},'43':{start:{line:112,column:23},end:{line:112,column:54}},'44':{start:{line:114,column:18},end:{line:122,column:4}},'45':{start:{line:115,column:21},end:{line:115,column:42}},'46':{start:{line:116,column:22},end:{line:116,column:48}},'47':{start:{line:117,column:3},end:{line:117,column:78}},'48':{start:{line:119,column:17},end:{line:119,column:61}},'49':{start:{line:120,column:18},end:{line:120,column:51}},'50':{start:{line:121,column:3},end:{line:121,column:80}},'51':{start:{line:124,column:2},end:{line:124,column:17}},'52':{start:{line:136,column:23},end:{line:136,column:54}},'53':{start:{line:137,column:16},end:{line:137,column:60}},'54':{start:{line:138,column:17},end:{line:138,column:46}},'55':{start:{line:139,column:18},end:{line:139,column:87}},'56':{start:{line:140,column:2},end:{line:158,column:5}},'57':{start:{line:143,column:19},end:{line:143,column:32}},'58':{start:{line:144,column:23},end:{line:144,column:52}},'59':{start:{line:145,column:28},end:{line:145,column:51}},'60':{start:{line:146,column:3},end:{line:146,column:55}},'61':{start:{line:150,column:16},end:{line:150,column:23}},'62':{start:{line:151,column:28},end:{line:151,column:35}},'63':{start:{line:152,column:3},end:{line:157,column:4}},'64':{start:{line:154,column:22},end:{line:154,column:43}},'65':{start:{line:155,column:23},end:{line:155,column:74}},'66':{start:{line:156,column:4},end:{line:156,column:78}},'67':{start:{line:160,column:2},end:{line:160,column:17}},'68':{start:{line:164,column:0},end:{line:164,column:35}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:17,column:1},end:{line:17,column:2}},loc:{start:{line:18,column:1},end:{line:56,column:2}},line:18},'1':{name:'(anonymous_1)',decl:{start:{line:33,column:54},end:{line:33,column:55}},loc:{start:{line:33,column:62},end:{line:53,column:3}},line:33},'2':{name:'(anonymous_2)',decl:{start:{line:64,column:1},end:{line:64,column:2}},loc:{start:{line:65,column:1},end:{line:77,column:2}},line:65},'3':{name:'(anonymous_3)',decl:{start:{line:67,column:52},end:{line:67,column:53}},loc:{start:{line:67,column:60},end:{line:74,column:3}},line:67},'4':{name:'(anonymous_4)',decl:{start:{line:84,column:1},end:{line:84,column:2}},loc:{start:{line:85,column:1},end:{line:100,column:2}},line:85},'5':{name:'(anonymous_5)',decl:{start:{line:86,column:83},end:{line:86,column:84}},loc:{start:{line:86,column:91},end:{line:98,column:3}},line:86},'6':{name:'(anonymous_6)',decl:{start:{line:109,column:1},end:{line:109,column:2}},loc:{start:{line:110,column:1},end:{line:125,column:2}},line:110},'7':{name:'(anonymous_7)',decl:{start:{line:114,column:53},end:{line:114,column:54}},loc:{start:{line:114,column:61},end:{line:118,column:3}},line:114},'8':{name:'(anonymous_8)',decl:{start:{line:118,column:10},end:{line:118,column:11}},loc:{start:{line:118,column:16},end:{line:122,column:3}},line:118},'9':{name:'(anonymous_9)',decl:{start:{line:134,column:1},end:{line:134,column:2}},loc:{start:{line:135,column:1},end:{line:161,column:2}},line:135},'10':{name:'(anonymous_10)',decl:{start:{line:140,column:15},end:{line:140,column:16}},loc:{start:{line:140,column:21},end:{line:147,column:3}},line:140},'11':{name:'(anonymous_11)',decl:{start:{line:147,column:10},end:{line:147,column:11}},loc:{start:{line:147,column:18},end:{line:158,column:3}},line:147}},branchMap:{'0':{loc:{start:{line:38,column:3},end:{line:43,column:4}},type:'if',locations:[{start:{line:38,column:3},end:{line:43,column:4}},{start:{line:38,column:3},end:{line:43,column:4}}],line:38},'1':{loc:{start:{line:68,column:3},end:{line:71,column:4}},type:'if',locations:[{start:{line:68,column:3},end:{line:71,column:4}},{start:{line:68,column:3},end:{line:71,column:4}}],line:68},'2':{loc:{start:{line:152,column:3},end:{line:157,column:4}},type:'if',locations:[{start:{line:152,column:3},end:{line:157,column:4}},{start:{line:152,column:3},end:{line:157,column:4}}],line:152},'3':{loc:{start:{line:152,column:7},end:{line:152,column:56}},type:'binary-expr',locations:[{start:{line:152,column:7},end:{line:152,column:24}},{start:{line:152,column:28},end:{line:152,column:56}}],line:152}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_11v7kdbdmu.s[0]++,require('mongoose'));const AgencyDao=(cov_11v7kdbdmu.s[1]++,require('./../../agency/models/agency-dao'));const BuildingAgency=(cov_11v7kdbdmu.s[2]++,require('./building-agency'));const BuildingDao=(cov_11v7kdbdmu.s[3]++,require('./../../building/models/building-dao'));const RoleDao=(cov_11v7kdbdmu.s[4]++,require('./../../auth/models/role-dao'));const User=(cov_11v7kdbdmu.s[5]++,require('./../../user/models/user'));const UserDao=(cov_11v7kdbdmu.s[6]++,require('./../../user/models/user-dao'));class BuildingAgencyDao{/**
	 * Loads a single Building-Agency Unit with the given IDs
	 * @param string buildingId
	 * @param string agencyId
	 * @return Promise
	 */loadOne(buildingId,agencyId){cov_11v7kdbdmu.f[0]++;//Get agency
const agencyDao=(cov_11v7kdbdmu.s[7]++,new AgencyDao());const agencyPromise=(cov_11v7kdbdmu.s[8]++,agencyDao.loadOne(agencyId));//Get building
const buildingDao=(cov_11v7kdbdmu.s[9]++,new BuildingDao());const buildingPromise=(cov_11v7kdbdmu.s[10]++,buildingDao.loadOne(buildingId));//Get building-agency unit
const bauQuery=(cov_11v7kdbdmu.s[11]++,{buildingId:buildingId,agencyId:agencyId});const buildingAgencyPromise=(cov_11v7kdbdmu.s[12]++,BuildingAgency.findOne(bauQuery).populate('reps').exec());//Merge promises
const joinPromises=(cov_11v7kdbdmu.s[13]++,[agencyPromise,buildingPromise,buildingAgencyPromise]);const mergePromise=(cov_11v7kdbdmu.s[14]++,Promise.all(joinPromises).then(data=>{cov_11v7kdbdmu.f[1]++;const buildingAgency=(cov_11v7kdbdmu.s[15]++,data[2]);let reps=(cov_11v7kdbdmu.s[16]++,[]);let incidents=(cov_11v7kdbdmu.s[17]++,[]);let health=(cov_11v7kdbdmu.s[18]++,0.0);cov_11v7kdbdmu.s[19]++;if(buildingAgency){cov_11v7kdbdmu.b[0][0]++;cov_11v7kdbdmu.s[20]++;reps=buildingAgency.reps;cov_11v7kdbdmu.s[21]++;incidents=buildingAgency.incidents;cov_11v7kdbdmu.s[22]++;health=buildingAgency.health;}else{cov_11v7kdbdmu.b[0][1]++;}const loadedBuildingAgency=(cov_11v7kdbdmu.s[23]++,{agency:data[0].agency,building:data[1].building,health:health,reps:reps,incidents:incidents});cov_11v7kdbdmu.s[24]++;return loadedBuildingAgency;}));cov_11v7kdbdmu.s[25]++;return mergePromise;}/**
	 * Loads all Building-agency units for which the given request's user is a rep
	 * @param Request req
	 * @return Promise
	 * istanbul ignore next
	 */loadForLoggedInUser(req){cov_11v7kdbdmu.f[2]++;const userDao=(cov_11v7kdbdmu.s[26]++,new UserDao());const promise=(cov_11v7kdbdmu.s[27]++,userDao.loadFromRequest(req).then(user=>{cov_11v7kdbdmu.f[3]++;cov_11v7kdbdmu.s[28]++;if(!user){cov_11v7kdbdmu.b[1][0]++;cov_11v7kdbdmu.s[29]++;return[];}else{cov_11v7kdbdmu.b[1][1]++;}cov_11v7kdbdmu.s[30]++;return this.loadForRep(user.id);}));cov_11v7kdbdmu.s[31]++;return promise;}/**
	 * Loads all building-agency units for which the given user is a rep
	 * @param string userId
	 * @return Promise
	 */loadForRep(userId){cov_11v7kdbdmu.f[4]++;const promise=(cov_11v7kdbdmu.s[32]++,BuildingAgency.find({reps:userId}).populate('reps').exec().then(baus=>{cov_11v7kdbdmu.f[5]++;let constructPromises=(cov_11v7kdbdmu.s[33]++,[]);cov_11v7kdbdmu.s[34]++;for(let i=0;i<baus.length;i++){const bau=(cov_11v7kdbdmu.s[35]++,baus[i]);const buildingId=(cov_11v7kdbdmu.s[36]++,bau.buildingId);const agencyId=(cov_11v7kdbdmu.s[37]++,bau.agencyId);const bauPromise=(cov_11v7kdbdmu.s[38]++,this.loadOne(buildingId,agencyId));cov_11v7kdbdmu.s[39]++;constructPromises.push(bauPromise);}cov_11v7kdbdmu.s[40]++;return Promise.all(constructPromises);}));cov_11v7kdbdmu.s[41]++;return promise;}/**
	 * Assigns a rep to the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[6]++;const roleDao=(cov_11v7kdbdmu.s[42]++,new RoleDao());const userObjectId=(cov_11v7kdbdmu.s[43]++,mongoose.Types.ObjectId(userId));const promise=(cov_11v7kdbdmu.s[44]++,roleDao.loadBuildingRepRole().then(role=>{cov_11v7kdbdmu.f[7]++;const userQuery=(cov_11v7kdbdmu.s[45]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[46]++,{$addToSet:{roles:role}});cov_11v7kdbdmu.s[47]++;return User.findOneAndUpdate(userQuery,userUpdate,{upsert:true}).exec();}).then(()=>{cov_11v7kdbdmu.f[8]++;const query=(cov_11v7kdbdmu.s[48]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[49]++,{$addToSet:{reps:userObjectId}});cov_11v7kdbdmu.s[50]++;return BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec();}));cov_11v7kdbdmu.s[51]++;return promise;}/**
	 * Removes a rep from the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */unassignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[9]++;const userObjectId=(cov_11v7kdbdmu.s[52]++,mongoose.Types.ObjectId(userId));const query=(cov_11v7kdbdmu.s[53]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[54]++,{$pull:{reps:userObjectId}});const promise=(cov_11v7kdbdmu.s[55]++,BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec());cov_11v7kdbdmu.s[56]++;promise.then(()=>{cov_11v7kdbdmu.f[10]++;//Once the BAU has been updated, get the Building Rep role and any buildings
//still assigned to the user
const roleDao=(cov_11v7kdbdmu.s[57]++,new RoleDao());const rolePromise=(cov_11v7kdbdmu.s[58]++,roleDao.loadBuildingRepRole());const buildingsPromise=(cov_11v7kdbdmu.s[59]++,this.loadForRep(userId));cov_11v7kdbdmu.s[60]++;return Promise.all([rolePromise,buildingsPromise]);}).then(data=>{cov_11v7kdbdmu.f[11]++;//If the user has no buildings assigned, automatically relinquish them
//of their Building Rep role
const role=(cov_11v7kdbdmu.s[61]++,data[0]);const buildingAgencies=(cov_11v7kdbdmu.s[62]++,data[1]);cov_11v7kdbdmu.s[63]++;if((cov_11v7kdbdmu.b[3][0]++,!buildingAgencies)||(cov_11v7kdbdmu.b[3][1]++,buildingAgencies.length==0)){cov_11v7kdbdmu.b[2][0]++;const userQuery=(cov_11v7kdbdmu.s[64]++,{'_id':userObjectId});const userUpdate=(cov_11v7kdbdmu.s[65]++,{$pull:{roles:mongoose.Types.ObjectId(role._id)}});cov_11v7kdbdmu.s[66]++;return User.findOneAndUpdate(userQuery,userUpdate,{multi:true}).exec();}else{cov_11v7kdbdmu.b[2][1]++;}});cov_11v7kdbdmu.s[67]++;return promise;}}cov_11v7kdbdmu.s[68]++;module.exports=BuildingAgencyDao;
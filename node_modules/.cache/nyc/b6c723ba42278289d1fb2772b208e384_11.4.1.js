var cov_4qit4vp2i=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',hash='60e9ed17c7b000d5ae20548cc8a24709a6b81586',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-contact-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:23},end:{line:2,column:51}},'2':{start:{line:3,column:26},end:{line:3,column:58}},'3':{start:{line:4,column:34},end:{line:4,column:75}},'4':{start:{line:18,column:26},end:{line:18,column:60}},'5':{start:{line:22,column:28},end:{line:22,column:51}},'6':{start:{line:23,column:2},end:{line:55,column:5}},'7':{start:{line:25,column:3},end:{line:25,column:30}},'8':{start:{line:27,column:23},end:{line:27,column:28}},'9':{start:{line:28,column:3},end:{line:35,column:4}},'10':{start:{line:30,column:4},end:{line:34,column:5}},'11':{start:{line:32,column:5},end:{line:32,column:26}},'12':{start:{line:33,column:5},end:{line:33,column:11}},'13':{start:{line:37,column:3},end:{line:42,column:4}},'14':{start:{line:40,column:27},end:{line:40,column:58}},'15':{start:{line:41,column:4},end:{line:41,column:83}},'16':{start:{line:44,column:21},end:{line:48,column:4}},'17':{start:{line:49,column:23},end:{line:53,column:4}},'18':{start:{line:54,column:3},end:{line:54,column:73}},'19':{start:{line:68,column:26},end:{line:68,column:60}},'20':{start:{line:69,column:20},end:{line:73,column:3}},'21':{start:{line:74,column:22},end:{line:78,column:3}},'22':{start:{line:79,column:2},end:{line:79,column:72}},'23':{start:{line:83,column:0},end:{line:83,column:42}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:17,column:1},end:{line:56,column:2}},line:17},'1':{name:'(anonymous_1)',decl:{start:{line:23,column:62},end:{line:23,column:63}},loc:{start:{line:23,column:69},end:{line:43,column:3}},line:23},'2':{name:'(anonymous_2)',decl:{start:{line:43,column:10},end:{line:43,column:11}},loc:{start:{line:43,column:16},end:{line:55,column:3}},line:43},'3':{name:'(anonymous_3)',decl:{start:{line:66,column:1},end:{line:66,column:2}},loc:{start:{line:67,column:1},end:{line:80,column:2}},line:67}},branchMap:{'0':{loc:{start:{line:30,column:4},end:{line:34,column:5}},type:'if',locations:[{start:{line:30,column:4},end:{line:34,column:5}},{start:{line:30,column:4},end:{line:34,column:5}}],line:30},'1':{loc:{start:{line:37,column:3},end:{line:42,column:4}},type:'if',locations:[{start:{line:37,column:3},end:{line:42,column:4}},{start:{line:37,column:3},end:{line:42,column:4}}],line:37}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0},f:{'0':0,'1':0,'2':0,'3':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_4qit4vp2i.s[0]++,require('mongoose'));const BuildingAgency=(cov_4qit4vp2i.s[1]++,require('./building-agency'));const BuildingAgencyDao=(cov_4qit4vp2i.s[2]++,require('./building-agency-dao'));const BuildingAgencyIncidentDao=(cov_4qit4vp2i.s[3]++,require('./building-agency-incident-dao'));class BuildingAgencyContactDao{/**
	 * Adds the given contact to the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */addContactToIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[0]++;const contactObjectId=(cov_4qit4vp2i.s[4]++,mongoose.Types.ObjectId(contactId));//This is a little more complicated than just running an update query, because the keys may or may not exist,
//and even if they do exist, they may or may not match a find since we have to search for a specific subdoc
const buildingAgencyDao=(cov_4qit4vp2i.s[5]++,new BuildingAgencyDao());cov_4qit4vp2i.s[6]++;return buildingAgencyDao.loadOne(buildingId,agencyId).then(bau=>{cov_4qit4vp2i.f[1]++;cov_4qit4vp2i.s[7]++;console.log(bau.incidents);let foundIncident=(cov_4qit4vp2i.s[8]++,false);cov_4qit4vp2i.s[9]++;for(let i=0;i<bau.incidents.length;i++){cov_4qit4vp2i.s[10]++;if(bau.incidents[i].incidentId==incidentId){cov_4qit4vp2i.b[0][0]++;cov_4qit4vp2i.s[11]++;foundIncident=true;cov_4qit4vp2i.s[12]++;break;}else{cov_4qit4vp2i.b[0][1]++;}}cov_4qit4vp2i.s[13]++;if(!foundIncident){cov_4qit4vp2i.b[1][0]++;//If we did not find the incident on this BAU, create it first
const bauIncidentDao=(cov_4qit4vp2i.s[14]++,new BuildingAgencyIncidentDao());cov_4qit4vp2i.s[15]++;return bauIncidentDao.saveIncidentData(buildingId,agencyId,incidentId,[{}]);}else{cov_4qit4vp2i.b[1][1]++;}}).then(()=>{cov_4qit4vp2i.f[2]++;const findQuery=(cov_4qit4vp2i.s[16]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[17]++,{$addToSet:{'incidents.$.contacts':contactObjectId}});cov_4qit4vp2i.s[18]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();});}/**
	 * Removes the given contact from the given incident on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string incidentId
	 * @param string contactId
	 * @return Promise
	 */removeContactFromIncident(buildingId,agencyId,incidentId,contactId){cov_4qit4vp2i.f[3]++;const contactObjectId=(cov_4qit4vp2i.s[19]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_4qit4vp2i.s[20]++,{buildingId:buildingId,agencyId:agencyId,'incidents.incidentId':incidentId});const updateQuery=(cov_4qit4vp2i.s[21]++,{$pull:{'incidents.$.contacts':contactObjectId}});cov_4qit4vp2i.s[22]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}}cov_4qit4vp2i.s[23]++;module.exports=BuildingAgencyContactDao;
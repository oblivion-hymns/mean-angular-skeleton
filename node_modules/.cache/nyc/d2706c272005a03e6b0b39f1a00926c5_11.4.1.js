var cov_1sh4rjdglg=function(){var path='/home/bwilbur/projects/mercury/modules/incident/models/incident-field-dao.js',hash='3fd746141d25cda8fcd89941efa9301344d63c22',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/incident/models/incident-field-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:20},end:{line:2,column:45}},'2':{start:{line:3,column:22},end:{line:3,column:49}},'3':{start:{line:4,column:26},end:{line:4,column:58}},'4':{start:{line:15,column:24},end:{line:15,column:51}},'5':{start:{line:16,column:2},end:{line:16,column:77}},'6':{start:{line:26,column:27},end:{line:26,column:62}},'7':{start:{line:27,column:2},end:{line:27,column:96}},'8':{start:{line:36,column:2},end:{line:36,column:56}},'9':{start:{line:47,column:22},end:{line:47,column:39}},'10':{start:{line:48,column:27},end:{line:48,column:62}},'11':{start:{line:49,column:18},end:{line:49,column:42}},'12':{start:{line:50,column:2},end:{line:50,column:40}},'13':{start:{line:51,column:2},end:{line:51,column:58}},'14':{start:{line:52,column:2},end:{line:52,column:75}},'15':{start:{line:54,column:18},end:{line:88,column:4}},'16':{start:{line:56,column:29},end:{line:56,column:31}},'17':{start:{line:57,column:3},end:{line:60,column:4}},'18':{start:{line:59,column:4},end:{line:59,column:51}},'19':{start:{line:62,column:3},end:{line:65,column:4}},'20':{start:{line:64,column:4},end:{line:64,column:35}},'21':{start:{line:68,column:17},end:{line:68,column:32}},'22':{start:{line:69,column:21},end:{line:69,column:71}},'23':{start:{line:70,column:23},end:{line:70,column:41}},'24':{start:{line:71,column:3},end:{line:71,column:55}},'25':{start:{line:74,column:3},end:{line:74,column:27}},'26':{start:{line:77,column:25},end:{line:77,column:57}},'27':{start:{line:78,column:27},end:{line:78,column:64}},'28':{start:{line:79,column:3},end:{line:79,column:56}},'29':{start:{line:82,column:18},end:{line:82,column:25}},'30':{start:{line:83,column:20},end:{line:83,column:27}},'31':{start:{line:84,column:3},end:{line:84,column:28}},'32':{start:{line:85,column:3},end:{line:85,column:37}},'33':{start:{line:87,column:3},end:{line:87,column:37}},'34':{start:{line:90,column:2},end:{line:90,column:17}},'35':{start:{line:99,column:2},end:{line:99,column:67}},'36':{start:{line:101,column:18},end:{line:125,column:4}},'37':{start:{line:103,column:29},end:{line:103,column:31}},'38':{start:{line:104,column:3},end:{line:107,column:4}},'39':{start:{line:106,column:4},end:{line:106,column:51}},'40':{start:{line:109,column:3},end:{line:112,column:4}},'41':{start:{line:111,column:4},end:{line:111,column:31}},'42':{start:{line:114,column:21},end:{line:114,column:36}},'43':{start:{line:115,column:23},end:{line:121,column:4}},'44':{start:{line:122,column:3},end:{line:122,column:55}},'45':{start:{line:124,column:3},end:{line:124,column:37}},'46':{start:{line:127,column:2},end:{line:127,column:17}},'47':{start:{line:138,column:22},end:{line:138,column:39}},'48':{start:{line:139,column:27},end:{line:139,column:62}},'49':{start:{line:142,column:16},end:{line:142,column:27}},'50':{start:{line:143,column:20},end:{line:143,column:69}},'51':{start:{line:144,column:22},end:{line:144,column:41}},'52':{start:{line:145,column:18},end:{line:161,column:4}},'53':{start:{line:147,column:3},end:{line:147,column:55}},'54':{start:{line:150,column:25},end:{line:150,column:57}},'55':{start:{line:151,column:27},end:{line:151,column:64}},'56':{start:{line:152,column:3},end:{line:152,column:56}},'57':{start:{line:155,column:18},end:{line:155,column:25}},'58':{start:{line:156,column:20},end:{line:156,column:27}},'59':{start:{line:157,column:3},end:{line:157,column:28}},'60':{start:{line:158,column:3},end:{line:158,column:37}},'61':{start:{line:160,column:3},end:{line:160,column:37}},'62':{start:{line:163,column:2},end:{line:163,column:17}},'63':{start:{line:175,column:22},end:{line:175,column:39}},'64':{start:{line:176,column:27},end:{line:176,column:62}},'65':{start:{line:178,column:17},end:{line:178,column:21}},'66':{start:{line:179,column:17},end:{line:179,column:22}},'67':{start:{line:182,column:18},end:{line:217,column:4}},'68':{start:{line:183,column:3},end:{line:183,column:26}},'69':{start:{line:186,column:19},end:{line:186,column:21}},'70':{start:{line:187,column:21},end:{line:187,column:23}},'71':{start:{line:188,column:3},end:{line:197,column:4}},'72':{start:{line:190,column:4},end:{line:190,column:85}},'73':{start:{line:191,column:4},end:{line:191,column:37}},'74':{start:{line:195,column:4},end:{line:195,column:85}},'75':{start:{line:196,column:4},end:{line:196,column:38}},'76':{start:{line:200,column:19},end:{line:214,column:5}},'77':{start:{line:201,column:4},end:{line:201,column:27}},'78':{start:{line:202,column:4},end:{line:202,column:17}},'79':{start:{line:205,column:26},end:{line:205,column:58}},'80':{start:{line:206,column:28},end:{line:206,column:65}},'81':{start:{line:207,column:4},end:{line:207,column:57}},'82':{start:{line:210,column:19},end:{line:210,column:26}},'83':{start:{line:211,column:21},end:{line:211,column:28}},'84':{start:{line:212,column:4},end:{line:212,column:29}},'85':{start:{line:213,column:4},end:{line:213,column:38}},'86':{start:{line:216,column:3},end:{line:216,column:18}},'87':{start:{line:219,column:2},end:{line:219,column:17}},'88':{start:{line:227,column:36},end:{line:227,column:106}},'89':{start:{line:228,column:36},end:{line:228,column:67}},'90':{start:{line:229,column:2},end:{line:229,column:40}},'91':{start:{line:233,column:0},end:{line:233,column:34}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:13,column:1},end:{line:13,column:2}},loc:{start:{line:14,column:1},end:{line:17,column:2}},line:14},'1':{name:'(anonymous_1)',decl:{start:{line:24,column:1},end:{line:24,column:2}},loc:{start:{line:25,column:1},end:{line:28,column:2}},line:25},'2':{name:'(anonymous_2)',decl:{start:{line:34,column:1},end:{line:34,column:2}},loc:{start:{line:35,column:1},end:{line:37,column:2}},line:35},'3':{name:'(anonymous_3)',decl:{start:{line:45,column:1},end:{line:45,column:2}},loc:{start:{line:46,column:1},end:{line:91,column:2}},line:46},'4':{name:'(anonymous_4)',decl:{start:{line:54,column:56},end:{line:54,column:57}},loc:{start:{line:54,column:66},end:{line:72,column:3}},line:54},'5':{name:'(anonymous_5)',decl:{start:{line:72,column:10},end:{line:72,column:11}},loc:{start:{line:72,column:16},end:{line:75,column:3}},line:72},'6':{name:'(anonymous_6)',decl:{start:{line:75,column:10},end:{line:75,column:11}},loc:{start:{line:75,column:16},end:{line:80,column:3}},line:75},'7':{name:'(anonymous_7)',decl:{start:{line:80,column:10},end:{line:80,column:11}},loc:{start:{line:80,column:18},end:{line:86,column:3}},line:80},'8':{name:'(anonymous_8)',decl:{start:{line:86,column:10},end:{line:86,column:11}},loc:{start:{line:86,column:16},end:{line:88,column:3}},line:86},'9':{name:'(anonymous_9)',decl:{start:{line:97,column:1},end:{line:97,column:2}},loc:{start:{line:98,column:1},end:{line:128,column:2}},line:98},'10':{name:'(anonymous_10)',decl:{start:{line:101,column:62},end:{line:101,column:63}},loc:{start:{line:101,column:72},end:{line:113,column:3}},line:101},'11':{name:'(anonymous_11)',decl:{start:{line:113,column:10},end:{line:113,column:11}},loc:{start:{line:113,column:16},end:{line:123,column:3}},line:113},'12':{name:'(anonymous_12)',decl:{start:{line:123,column:10},end:{line:123,column:11}},loc:{start:{line:123,column:16},end:{line:125,column:3}},line:123},'13':{name:'(anonymous_13)',decl:{start:{line:136,column:1},end:{line:136,column:2}},loc:{start:{line:137,column:1},end:{line:164,column:2}},line:137},'14':{name:'(anonymous_14)',decl:{start:{line:145,column:68},end:{line:145,column:69}},loc:{start:{line:145,column:74},end:{line:148,column:3}},line:145},'15':{name:'(anonymous_15)',decl:{start:{line:148,column:10},end:{line:148,column:11}},loc:{start:{line:148,column:16},end:{line:153,column:3}},line:148},'16':{name:'(anonymous_16)',decl:{start:{line:153,column:10},end:{line:153,column:11}},loc:{start:{line:153,column:18},end:{line:159,column:3}},line:153},'17':{name:'(anonymous_17)',decl:{start:{line:159,column:10},end:{line:159,column:11}},loc:{start:{line:159,column:16},end:{line:161,column:3}},line:159},'18':{name:'(anonymous_18)',decl:{start:{line:173,column:1},end:{line:173,column:2}},loc:{start:{line:174,column:1},end:{line:220,column:2}},line:174},'19':{name:'(anonymous_19)',decl:{start:{line:182,column:45},end:{line:182,column:46}},loc:{start:{line:182,column:54},end:{line:217,column:3}},line:182},'20':{name:'(anonymous_20)',decl:{start:{line:200,column:84},end:{line:200,column:85}},loc:{start:{line:200,column:90},end:{line:203,column:4}},line:200},'21':{name:'(anonymous_21)',decl:{start:{line:203,column:11},end:{line:203,column:12}},loc:{start:{line:203,column:17},end:{line:208,column:4}},line:203},'22':{name:'(anonymous_22)',decl:{start:{line:208,column:11},end:{line:208,column:12}},loc:{start:{line:208,column:19},end:{line:214,column:4}},line:208},'23':{name:'(anonymous_23)',decl:{start:{line:225,column:1},end:{line:225,column:2}},loc:{start:{line:226,column:1},end:{line:230,column:2}},line:226}},branchMap:{'0':{loc:{start:{line:188,column:3},end:{line:197,column:4}},type:'if',locations:[{start:{line:188,column:3},end:{line:197,column:4}},{start:{line:188,column:3},end:{line:197,column:4}}],line:188}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0,'54':0,'55':0,'56':0,'57':0,'58':0,'59':0,'60':0,'61':0,'62':0,'63':0,'64':0,'65':0,'66':0,'67':0,'68':0,'69':0,'70':0,'71':0,'72':0,'73':0,'74':0,'75':0,'76':0,'77':0,'78':0,'79':0,'80':0,'81':0,'82':0,'83':0,'84':0,'85':0,'86':0,'87':0,'88':0,'89':0,'90':0,'91':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_1sh4rjdglg.s[0]++,require('mongoose'));const IncidentDao=(cov_1sh4rjdglg.s[1]++,require('./incident-dao'));const IncidentField=(cov_1sh4rjdglg.s[2]++,require('./incident-field'));const IncidentFieldType=(cov_1sh4rjdglg.s[3]++,require('./incident-field-type'));class IncidentFieldDao{/**
	 * Returns the given field
	 * @param string fieldId
	 * @return Promise
	 */loadOne(id){cov_1sh4rjdglg.f[0]++;const fieldObjectId=(cov_1sh4rjdglg.s[4]++,mongoose.Types.ObjectId(id));cov_1sh4rjdglg.s[5]++;return IncidentField.findOne({_id:fieldObjectId}).populate('type').exec();}/**
	 * Returns a list of the fields for the given incident
	 * @param string incidentId
	 * @return Promise
	 */loadForIncident(incidentId){cov_1sh4rjdglg.f[1]++;const incidentObjectId=(cov_1sh4rjdglg.s[6]++,mongoose.Types.ObjectId(incidentId));cov_1sh4rjdglg.s[7]++;return IncidentField.find({incident:incidentObjectId}).populate('type').sort('order').exec();}/**
	 * Returns a list of all field types
	 * @return Promise
	 */loadFieldTypes(){cov_1sh4rjdglg.f[2]++;cov_1sh4rjdglg.s[8]++;return IncidentFieldType.find({}).sort('name').exec();}/**
	 * Adds the given field to the given incident
	 * @param string incidentId
	 * @param IncidentField field
	 * @return Promise
	 */addField(incidentId,field){cov_1sh4rjdglg.f[3]++;const incidentDao=(cov_1sh4rjdglg.s[9]++,new IncidentDao());const incidentObjectId=(cov_1sh4rjdglg.s[10]++,mongoose.Types.ObjectId(incidentId));let saveField=(cov_1sh4rjdglg.s[11]++,new IncidentField(field));cov_1sh4rjdglg.s[12]++;saveField.incident=incidentObjectId;cov_1sh4rjdglg.s[13]++;saveField.type=mongoose.Types.ObjectId(field.type.id);cov_1sh4rjdglg.s[14]++;saveField.identifier=saveField.label.toLowerCase().replace(/\s/g,'_');const promise=(cov_1sh4rjdglg.s[15]++,this.loadForIncident(incidentId).then(fields=>{cov_1sh4rjdglg.f[4]++;//Construct field identifier
let existingIdentifiers=(cov_1sh4rjdglg.s[16]++,[]);cov_1sh4rjdglg.s[17]++;for(let i=0;i<fields.length;i++){cov_1sh4rjdglg.s[18]++;existingIdentifiers.push(fields[i].identifier);}cov_1sh4rjdglg.s[19]++;while(existingIdentifiers.indexOf(saveField.identifier)>-1){cov_1sh4rjdglg.s[20]++;saveField.identifier+='_(2)';}//Update order of existing fields
const order=(cov_1sh4rjdglg.s[21]++,saveField.order);const findQuery=(cov_1sh4rjdglg.s[22]++,{incident:incidentObjectId,order:{$gte:order}});const updateQuery=(cov_1sh4rjdglg.s[23]++,{$inc:{order:1}});cov_1sh4rjdglg.s[24]++;return IncidentField.update(findQuery,updateQuery);}).then(()=>{cov_1sh4rjdglg.f[5]++;cov_1sh4rjdglg.s[25]++;//Save field
return saveField.save();}).then(()=>{cov_1sh4rjdglg.f[6]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[26]++,this.loadForIncident(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[27]++,incidentDao.loadOne(incidentObjectId));cov_1sh4rjdglg.s[28]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[7]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[29]++,data[0]);const incident=(cov_1sh4rjdglg.s[30]++,data[1]);cov_1sh4rjdglg.s[31]++;incident.fields=fields;cov_1sh4rjdglg.s[32]++;return incidentDao.save(incident);}).then(()=>{cov_1sh4rjdglg.f[8]++;cov_1sh4rjdglg.s[33]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[34]++;return promise;}/**
	 * Saves the given field
	 * @param IncidentField field
	 */saveField(field){cov_1sh4rjdglg.f[9]++;cov_1sh4rjdglg.s[35]++;field.identifier=field.label.toLowerCase().replace(/\s/g,'_');const promise=(cov_1sh4rjdglg.s[36]++,this.loadForIncident(field.incidentId).then(fields=>{cov_1sh4rjdglg.f[10]++;//Construct field identifier
let existingIdentifiers=(cov_1sh4rjdglg.s[37]++,[]);cov_1sh4rjdglg.s[38]++;for(let i=0;i<fields.length;i++){cov_1sh4rjdglg.s[39]++;existingIdentifiers.push(fields[i].identifier);}cov_1sh4rjdglg.s[40]++;while(existingIdentifiers.indexOf(field.identifier)>-1){cov_1sh4rjdglg.s[41]++;field.identifier+='_(2)';}}).then(()=>{cov_1sh4rjdglg.f[11]++;const findQuery=(cov_1sh4rjdglg.s[42]++,{_id:field.id});const updateQuery=(cov_1sh4rjdglg.s[43]++,{$set:{properties:field.properties,label:field.label,identifier:field.identifier}});cov_1sh4rjdglg.s[44]++;return IncidentField.update(findQuery,updateQuery);}).then(()=>{cov_1sh4rjdglg.f[12]++;cov_1sh4rjdglg.s[45]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[46]++;return promise;}/**
	 * Removes the given field from the given incident
	 * @param string incidentId
	 * @param IncidentField field
	 * @return Promise
	 */removeField(incidentId,field){cov_1sh4rjdglg.f[13]++;const incidentDao=(cov_1sh4rjdglg.s[47]++,new IncidentDao());const incidentObjectId=(cov_1sh4rjdglg.s[48]++,mongoose.Types.ObjectId(incidentId));//Update order of existing fields
const order=(cov_1sh4rjdglg.s[49]++,field.order);const findQuery=(cov_1sh4rjdglg.s[50]++,{incident:incidentObjectId,order:{$gt:order}});const updateQuery=(cov_1sh4rjdglg.s[51]++,{$inc:{order:-1}});const promise=(cov_1sh4rjdglg.s[52]++,IncidentField.update(findQuery,updateQuery).then(()=>{cov_1sh4rjdglg.f[14]++;cov_1sh4rjdglg.s[53]++;//Delete field
return IncidentField.remove({_id:field.id}).exec();}).then(()=>{cov_1sh4rjdglg.f[15]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[54]++,this.loadForIncident(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[55]++,incidentDao.loadOne(incidentObjectId));cov_1sh4rjdglg.s[56]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[16]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[57]++,data[0]);const incident=(cov_1sh4rjdglg.s[58]++,data[1]);cov_1sh4rjdglg.s[59]++;incident.fields=fields;cov_1sh4rjdglg.s[60]++;return incidentDao.save(incident);}).then(()=>{cov_1sh4rjdglg.f[17]++;cov_1sh4rjdglg.s[61]++;this.updateBuildingAgencyHealth();}));cov_1sh4rjdglg.s[62]++;return promise;}/**
	 * Moves the given field to the given order within the given incident
	 * @param string incidentId
	 * @param string fieldId
	 * @param number order
	 * @return Promise
	 */reorderField(incidentId,fieldId,order){cov_1sh4rjdglg.f[18]++;const incidentDao=(cov_1sh4rjdglg.s[63]++,new IncidentDao());const incidentObjectId=(cov_1sh4rjdglg.s[64]++,mongoose.Types.ObjectId(incidentId));let oldOrder=(cov_1sh4rjdglg.s[65]++,null);let newOrder=(cov_1sh4rjdglg.s[66]++,order);//Just find the existing field, remove it, and add it back
const promise=(cov_1sh4rjdglg.s[67]++,this.loadOne(fieldId).then(field=>{cov_1sh4rjdglg.f[19]++;cov_1sh4rjdglg.s[68]++;oldOrder=field.order;//Adjust existing orders based on new position of the re-ordered item
let findQuery=(cov_1sh4rjdglg.s[69]++,{});let updateQuery=(cov_1sh4rjdglg.s[70]++,{});cov_1sh4rjdglg.s[71]++;if(newOrder<oldOrder){cov_1sh4rjdglg.b[0][0]++;cov_1sh4rjdglg.s[72]++;findQuery={incident:incidentObjectId,order:{$lt:oldOrder,$gte:newOrder}};cov_1sh4rjdglg.s[73]++;updateQuery={$inc:{order:1}};}else{cov_1sh4rjdglg.b[0][1]++;cov_1sh4rjdglg.s[74]++;findQuery={incident:incidentObjectId,order:{$gt:oldOrder,$lte:newOrder}};cov_1sh4rjdglg.s[75]++;updateQuery={$inc:{order:-1}};}//Decrement fields above the old position and below the new position
const promise=(cov_1sh4rjdglg.s[76]++,IncidentField.update(findQuery,updateQuery,{multi:true}).then(()=>{cov_1sh4rjdglg.f[20]++;cov_1sh4rjdglg.s[77]++;field.order=newOrder;cov_1sh4rjdglg.s[78]++;field.save();}).then(()=>{cov_1sh4rjdglg.f[21]++;//Collect data to update incident field references
const fieldsPromise=(cov_1sh4rjdglg.s[79]++,this.loadForIncident(incidentId));const incidentPromise=(cov_1sh4rjdglg.s[80]++,incidentDao.loadOne(incidentObjectId));cov_1sh4rjdglg.s[81]++;return Promise.all([fieldsPromise,incidentPromise]);}).then(data=>{cov_1sh4rjdglg.f[22]++;//Update references on incident
const fields=(cov_1sh4rjdglg.s[82]++,data[0]);const incident=(cov_1sh4rjdglg.s[83]++,data[1]);cov_1sh4rjdglg.s[84]++;incident.fields=fields;cov_1sh4rjdglg.s[85]++;return incidentDao.save(incident);}));cov_1sh4rjdglg.s[86]++;return promise;}));cov_1sh4rjdglg.s[87]++;return promise;}/**
	 * Updates the health of all building-agency units
	 */updateBuildingAgencyHealth(){cov_1sh4rjdglg.f[23]++;const BuildingAgencyIncidentDao=(cov_1sh4rjdglg.s[88]++,require('./../../building-agency/models/building-agency-incident-dao'));const buildingAgencyIncidentDao=(cov_1sh4rjdglg.s[89]++,new BuildingAgencyIncidentDao());cov_1sh4rjdglg.s[90]++;buildingAgencyIncidentDao.updateAll();}}cov_1sh4rjdglg.s[91]++;module.exports=IncidentFieldDao;
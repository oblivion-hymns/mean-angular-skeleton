var cov_26opjpl202=function(){var path='/home/bwilbur/projects/mercury/modules/user/models/user-password-dao.js',hash='173e4cdeb9ae2a04e89c2a651168084d55cc66e7',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/user/models/user-password-dao.js',statementMap:{'0':{start:{line:1,column:15},end:{line:1,column:34}},'1':{start:{line:3,column:23},end:{line:3,column:83}},'2':{start:{line:4,column:24},end:{line:4,column:53}},'3':{start:{line:5,column:23},end:{line:5,column:69}},'4':{start:{line:6,column:13},end:{line:6,column:30}},'5':{start:{line:7,column:15},end:{line:7,column:59}},'6':{start:{line:18,column:25},end:{line:18,column:45}},'7':{start:{line:19,column:19},end:{line:19,column:49}},'8':{start:{line:20,column:18},end:{line:38,column:4}},'9':{start:{line:21,column:3},end:{line:24,column:4}},'10':{start:{line:23,column:4},end:{line:23,column:16}},'11':{start:{line:26,column:15},end:{line:26,column:32}},'12':{start:{line:27,column:26},end:{line:27,column:66}},'13':{start:{line:28,column:3},end:{line:31,column:5}},'14':{start:{line:33,column:3},end:{line:33,column:22}},'15':{start:{line:35,column:18},end:{line:35,column:99}},'16':{start:{line:36,column:26},end:{line:36,column:46}},'17':{start:{line:37,column:3},end:{line:37,column:110}},'18':{start:{line:39,column:2},end:{line:39,column:17}},'19':{start:{line:50,column:16},end:{line:50,column:46}},'20':{start:{line:51,column:18},end:{line:73,column:4}},'21':{start:{line:52,column:3},end:{line:55,column:4}},'22':{start:{line:54,column:4},end:{line:54,column:90}},'23':{start:{line:57,column:26},end:{line:57,column:59}},'24':{start:{line:58,column:15},end:{line:58,column:32}},'25':{start:{line:59,column:3},end:{line:66,column:4}},'26':{start:{line:61,column:4},end:{line:61,column:71}},'27':{start:{line:63,column:8},end:{line:66,column:4}},'28':{start:{line:65,column:4},end:{line:65,column:98}},'29':{start:{line:68,column:27},end:{line:68,column:48}},'30':{start:{line:69,column:26},end:{line:69,column:59}},'31':{start:{line:70,column:3},end:{line:70,column:34}},'32':{start:{line:71,column:3},end:{line:71,column:41}},'33':{start:{line:72,column:3},end:{line:72,column:22}},'34':{start:{line:74,column:2},end:{line:74,column:17}},'35':{start:{line:86,column:2},end:{line:86,column:22}},'36':{start:{line:87,column:2},end:{line:87,column:37}},'37':{start:{line:88,column:2},end:{line:101,column:5}},'38':{start:{line:89,column:3},end:{line:92,column:4}},'39':{start:{line:91,column:4},end:{line:91,column:17}},'40':{start:{line:94,column:27},end:{line:94,column:70}},'41':{start:{line:95,column:3},end:{line:98,column:4}},'42':{start:{line:97,column:4},end:{line:97,column:20}},'43':{start:{line:100,column:3},end:{line:100,column:16}},'44':{start:{line:105,column:0},end:{line:105,column:33}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:16,column:1},end:{line:16,column:2}},loc:{start:{line:17,column:1},end:{line:40,column:2}},line:17},'1':{name:'(anonymous_1)',decl:{start:{line:20,column:59},end:{line:20,column:60}},loc:{start:{line:20,column:67},end:{line:34,column:3}},line:20},'2':{name:'(anonymous_2)',decl:{start:{line:34,column:10},end:{line:34,column:11}},loc:{start:{line:34,column:18},end:{line:38,column:3}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:48,column:1},end:{line:48,column:2}},loc:{start:{line:49,column:1},end:{line:75,column:2}},line:49},'4':{name:'(anonymous_4)',decl:{start:{line:51,column:43},end:{line:51,column:44}},loc:{start:{line:51,column:51},end:{line:73,column:3}},line:51},'5':{name:'(anonymous_5)',decl:{start:{line:84,column:1},end:{line:84,column:2}},loc:{start:{line:85,column:1},end:{line:102,column:2}},line:85},'6':{name:'(anonymous_6)',decl:{start:{line:88,column:50},end:{line:88,column:51}},loc:{start:{line:88,column:58},end:{line:101,column:3}},line:88}},branchMap:{'0':{loc:{start:{line:21,column:3},end:{line:24,column:4}},type:'if',locations:[{start:{line:21,column:3},end:{line:24,column:4}},{start:{line:21,column:3},end:{line:24,column:4}}],line:21},'1':{loc:{start:{line:52,column:3},end:{line:55,column:4}},type:'if',locations:[{start:{line:52,column:3},end:{line:55,column:4}},{start:{line:52,column:3},end:{line:55,column:4}}],line:52},'2':{loc:{start:{line:59,column:3},end:{line:66,column:4}},type:'if',locations:[{start:{line:59,column:3},end:{line:66,column:4}},{start:{line:59,column:3},end:{line:66,column:4}}],line:59},'3':{loc:{start:{line:63,column:8},end:{line:66,column:4}},type:'if',locations:[{start:{line:63,column:8},end:{line:66,column:4}},{start:{line:63,column:8},end:{line:66,column:4}}],line:63},'4':{loc:{start:{line:86,column:10},end:{line:86,column:21}},type:'binary-expr',locations:[{start:{line:86,column:10},end:{line:86,column:15}},{start:{line:86,column:19},end:{line:86,column:21}}],line:86},'5':{loc:{start:{line:89,column:3},end:{line:92,column:4}},type:'if',locations:[{start:{line:89,column:3},end:{line:92,column:4}},{start:{line:89,column:3},end:{line:92,column:4}}],line:89},'6':{loc:{start:{line:95,column:3},end:{line:98,column:4}},type:'if',locations:[{start:{line:95,column:3},end:{line:98,column:4}},{start:{line:95,column:3},end:{line:98,column:4}}],line:95}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const bcrypt=(cov_26opjpl202.s[0]++,require('bcryptjs'));const MailDispatcher=(cov_26opjpl202.s[1]++,require('./../../communication/models/mail/mail-dispatcher'));const PasswordManager=(cov_26opjpl202.s[2]++,require('./password-manager'));const TokenGenerator=(cov_26opjpl202.s[3]++,require('./../../auth/models/token-generator'));const User=(cov_26opjpl202.s[4]++,require('./user'));const config=(cov_26opjpl202.s[5]++,require('./../../../config/config').instance);class UserPasswordDao{/**
	 * Resets the password for the given e-mail
	 * @param string emailAddress
	 * @return Promise
	 */resetPassword(emailAddress){cov_26opjpl202.f[0]++;const tokenGenerator=(cov_26opjpl202.s[6]++,new TokenGenerator());const newToken=(cov_26opjpl202.s[7]++,tokenGenerator.generateToken());const promise=(cov_26opjpl202.s[8]++,User.findOne({email:emailAddress}).then(user=>{cov_26opjpl202.f[1]++;cov_26opjpl202.s[9]++;if(!user){cov_26opjpl202.b[0][0]++;cov_26opjpl202.s[10]++;return null;}else{cov_26opjpl202.b[0][1]++;}const now=(cov_26opjpl202.s[11]++,new Date()/1000);const expirationTime=(cov_26opjpl202.s[12]++,now+config.app.passwordResetExpiration);cov_26opjpl202.s[13]++;user.passwordReset={token:newToken,expirationTime:expirationTime};cov_26opjpl202.s[14]++;return user.save();}).then(user=>{cov_26opjpl202.f[2]++;const appUrl=(cov_26opjpl202.s[15]++,config.app.url+':'+config.app.port+'/reset-password?resetToken='+newToken);const mailDispatcher=(cov_26opjpl202.s[16]++,new MailDispatcher());cov_26opjpl202.s[17]++;mailDispatcher.sendEmailWithTemplate([user.email],'Reset Password','user/reset-password',{url:appUrl});}));cov_26opjpl202.s[18]++;return promise;}/**
	 * Attempts to find a user for the given token and update their password
	 * @param string token
	 * @param string password - Raw password string. Do not pass in a hashed password, this method does that for you
	 * @return Promise
	 */updatePassword(token,password){cov_26opjpl202.f[3]++;const query=(cov_26opjpl202.s[19]++,{'passwordReset.token':token});const promise=(cov_26opjpl202.s[20]++,User.findOne(query).then(user=>{cov_26opjpl202.f[4]++;cov_26opjpl202.s[21]++;if(!user){cov_26opjpl202.b[1][0]++;cov_26opjpl202.s[22]++;throw new Error('Something went wrong. Try submitting a new password reset request.');}else{cov_26opjpl202.b[1][1]++;}const expirationTime=(cov_26opjpl202.s[23]++,user.passwordReset.expirationTime);const now=(cov_26opjpl202.s[24]++,new Date()/1000);cov_26opjpl202.s[25]++;if(expirationTime==0){cov_26opjpl202.b[2][0]++;cov_26opjpl202.s[26]++;throw new Error('Your password reset link has already been used.');}else{cov_26opjpl202.b[2][1]++;cov_26opjpl202.s[27]++;if(now>=expirationTime){cov_26opjpl202.b[3][0]++;cov_26opjpl202.s[28]++;throw new Error('Your password reset link has expired. Submit a new password reset request.');}else{cov_26opjpl202.b[3][1]++;}}const passwordManager=(cov_26opjpl202.s[29]++,new PasswordManager());const hashedPassword=(cov_26opjpl202.s[30]++,passwordManager.encrypt(password));cov_26opjpl202.s[31]++;user.password=hashedPassword;cov_26opjpl202.s[32]++;user.passwordReset.expirationTime=0;cov_26opjpl202.s[33]++;return user.save();}));cov_26opjpl202.s[34]++;return promise;}/**
	 * Determines whether the given password is valid for the given email.
	 * Returns a Promise containing either the user ID or false
	 * @param string email
	 * @param string password - Hashed
	 * @return Promise
	 */isLoginValid(email,password){cov_26opjpl202.f[5]++;cov_26opjpl202.s[35]++;email=(cov_26opjpl202.b[4][0]++,email)||(cov_26opjpl202.b[4][1]++,'');cov_26opjpl202.s[36]++;email=email.trim().toLowerCase();cov_26opjpl202.s[37]++;return User.findOne({email:email}).exec().then(user=>{cov_26opjpl202.f[6]++;cov_26opjpl202.s[38]++;if(!user){cov_26opjpl202.b[5][0]++;cov_26opjpl202.s[39]++;return false;}else{cov_26opjpl202.b[5][1]++;}const isPasswordValid=(cov_26opjpl202.s[40]++,bcrypt.compareSync(password,user.password));cov_26opjpl202.s[41]++;if(isPasswordValid){cov_26opjpl202.b[6][0]++;cov_26opjpl202.s[42]++;return user._id;}else{cov_26opjpl202.b[6][1]++;}cov_26opjpl202.s[43]++;return false;});}}cov_26opjpl202.s[44]++;module.exports=UserPasswordDao;
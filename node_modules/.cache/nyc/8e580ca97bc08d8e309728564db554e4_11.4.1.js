var cov_1sp04cd4q7=function(){var path='/home/bwilbur/projects/mercury/modules/contact/models/contact-group-dao.js',hash='b030daa66f588be60354ee0f32b6ba151423ad48',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/contact/models/contact-group-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:21},end:{line:2,column:47}},'2':{start:{line:12,column:2},end:{line:12,column:52}},'3':{start:{line:23,column:24},end:{line:23,column:34}},'4':{start:{line:24,column:2},end:{line:24,column:43}},'5':{start:{line:26,column:2},end:{line:29,column:3}},'6':{start:{line:28,column:3},end:{line:28,column:43}},'7':{start:{line:31,column:31},end:{line:31,column:48}},'8':{start:{line:32,column:2},end:{line:32,column:57}},'9':{start:{line:35,column:20},end:{line:35,column:42}},'10':{start:{line:36,column:22},end:{line:36,column:40}},'11':{start:{line:38,column:2},end:{line:45,column:5}},'12':{start:{line:39,column:17},end:{line:43,column:5}},'13':{start:{line:44,column:3},end:{line:44,column:23}},'14':{start:{line:57,column:24},end:{line:57,column:34}},'15':{start:{line:58,column:2},end:{line:58,column:43}},'16':{start:{line:60,column:2},end:{line:63,column:3}},'17':{start:{line:62,column:3},end:{line:62,column:43}},'18':{start:{line:65,column:31},end:{line:65,column:48}},'19':{start:{line:66,column:2},end:{line:66,column:57}},'20':{start:{line:68,column:24},end:{line:68,column:56}},'21':{start:{line:69,column:20},end:{line:69,column:40}},'22':{start:{line:70,column:22},end:{line:70,column:82}},'23':{start:{line:72,column:2},end:{line:72,column:60}},'24':{start:{line:83,column:24},end:{line:83,column:56}},'25':{start:{line:84,column:2},end:{line:105,column:5}},'26':{start:{line:85,column:20},end:{line:85,column:31}},'27':{start:{line:88,column:19},end:{line:88,column:21}},'28':{start:{line:89,column:21},end:{line:89,column:23}},'29':{start:{line:91,column:3},end:{line:100,column:4}},'30':{start:{line:93,column:4},end:{line:93,column:57}},'31':{start:{line:94,column:4},end:{line:94,column:37}},'32':{start:{line:98,column:4},end:{line:98,column:57}},'33':{start:{line:99,column:4},end:{line:99,column:38}},'34':{start:{line:102,column:3},end:{line:102,column:65}},'35':{start:{line:104,column:3},end:{line:104,column:88}},'36':{start:{line:115,column:26},end:{line:115,column:28}},'37':{start:{line:116,column:24},end:{line:116,column:56}},'38':{start:{line:117,column:2},end:{line:125,column:5}},'39':{start:{line:118,column:3},end:{line:118,column:35}},'40':{start:{line:119,column:3},end:{line:119,column:62}},'41':{start:{line:122,column:21},end:{line:122,column:54}},'42':{start:{line:123,column:23},end:{line:123,column:42}},'43':{start:{line:124,column:3},end:{line:124,column:58}},'44':{start:{line:129,column:0},end:{line:129,column:33}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:11,column:1},end:{line:13,column:2}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:21,column:1},end:{line:21,column:2}},loc:{start:{line:22,column:1},end:{line:46,column:2}},line:22},'2':{name:'(anonymous_2)',decl:{start:{line:38,column:65},end:{line:38,column:66}},loc:{start:{line:38,column:71},end:{line:45,column:3}},line:38},'3':{name:'(anonymous_3)',decl:{start:{line:55,column:1},end:{line:55,column:2}},loc:{start:{line:56,column:1},end:{line:73,column:2}},line:56},'4':{name:'(anonymous_4)',decl:{start:{line:81,column:1},end:{line:81,column:2}},loc:{start:{line:82,column:1},end:{line:106,column:2}},line:82},'5':{name:'(anonymous_5)',decl:{start:{line:84,column:64},end:{line:84,column:65}},loc:{start:{line:84,column:73},end:{line:103,column:3}},line:84},'6':{name:'(anonymous_6)',decl:{start:{line:103,column:10},end:{line:103,column:11}},loc:{start:{line:103,column:16},end:{line:105,column:3}},line:103},'7':{name:'(anonymous_7)',decl:{start:{line:113,column:1},end:{line:113,column:2}},loc:{start:{line:114,column:1},end:{line:126,column:2}},line:114},'8':{name:'(anonymous_8)',decl:{start:{line:117,column:52},end:{line:117,column:53}},loc:{start:{line:117,column:61},end:{line:120,column:3}},line:117},'9':{name:'(anonymous_9)',decl:{start:{line:120,column:10},end:{line:120,column:11}},loc:{start:{line:120,column:16},end:{line:125,column:3}},line:120}},branchMap:{'0':{loc:{start:{line:23,column:24},end:{line:23,column:34}},type:'binary-expr',locations:[{start:{line:23,column:24},end:{line:23,column:28}},{start:{line:23,column:32},end:{line:23,column:34}}],line:23},'1':{loc:{start:{line:26,column:2},end:{line:29,column:3}},type:'if',locations:[{start:{line:26,column:2},end:{line:29,column:3}},{start:{line:26,column:2},end:{line:29,column:3}}],line:26},'2':{loc:{start:{line:31,column:31},end:{line:31,column:48}},type:'binary-expr',locations:[{start:{line:31,column:31},end:{line:31,column:42}},{start:{line:31,column:46},end:{line:31,column:48}}],line:31},'3':{loc:{start:{line:57,column:24},end:{line:57,column:34}},type:'binary-expr',locations:[{start:{line:57,column:24},end:{line:57,column:28}},{start:{line:57,column:32},end:{line:57,column:34}}],line:57},'4':{loc:{start:{line:60,column:2},end:{line:63,column:3}},type:'if',locations:[{start:{line:60,column:2},end:{line:63,column:3}},{start:{line:60,column:2},end:{line:63,column:3}}],line:60},'5':{loc:{start:{line:65,column:31},end:{line:65,column:48}},type:'binary-expr',locations:[{start:{line:65,column:31},end:{line:65,column:42}},{start:{line:65,column:46},end:{line:65,column:48}}],line:65},'6':{loc:{start:{line:91,column:3},end:{line:100,column:4}},type:'if',locations:[{start:{line:91,column:3},end:{line:100,column:4}},{start:{line:91,column:3},end:{line:100,column:4}}],line:91}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_1sp04cd4q7.s[0]++,require('mongoose'));const ContactGroup=(cov_1sp04cd4q7.s[1]++,require('./contact-group'));class ContactGroupDao{/**
	 * Returns a list of all groups, in order
	 * @return Promise
	 */loadAll(){cov_1sp04cd4q7.f[0]++;cov_1sp04cd4q7.s[2]++;return ContactGroup.find({}).sort('order').exec();}/**
	 * Adds a new group
	 * @param string name
	 * @param string description
	 * @return Promise
	 */addGroup(name,description,order){cov_1sp04cd4q7.f[1]++;let transformedName=(cov_1sp04cd4q7.s[3]++,(cov_1sp04cd4q7.b[0][0]++,name)||(cov_1sp04cd4q7.b[0][1]++,''));cov_1sp04cd4q7.s[4]++;transformedName=transformedName.trim();cov_1sp04cd4q7.s[5]++;if(!transformedName.length){cov_1sp04cd4q7.b[1][0]++;cov_1sp04cd4q7.s[6]++;throw'Contact groups must have a name';}else{cov_1sp04cd4q7.b[1][1]++;}let transformedDescription=(cov_1sp04cd4q7.s[7]++,(cov_1sp04cd4q7.b[2][0]++,description)||(cov_1sp04cd4q7.b[2][1]++,''));cov_1sp04cd4q7.s[8]++;transformedDescription=transformedDescription.trim();//Reorder existing fields
const findQuery=(cov_1sp04cd4q7.s[9]++,{order:{$gte:order}});const updateQuery=(cov_1sp04cd4q7.s[10]++,{$inc:{order:1}});cov_1sp04cd4q7.s[11]++;return ContactGroup.update(findQuery,updateQuery).exec().then(()=>{cov_1sp04cd4q7.f[2]++;const group=(cov_1sp04cd4q7.s[12]++,new ContactGroup({name:transformedName,description:transformedDescription,order:order}));cov_1sp04cd4q7.s[13]++;return group.save();});}/**
	 * Changes the given group's name and description
	 * @param string groupId
	 * @param string name
	 * @param string description
	 * @return Promise
	 */editGroup(groupId,name,description){cov_1sp04cd4q7.f[3]++;let transformedName=(cov_1sp04cd4q7.s[14]++,(cov_1sp04cd4q7.b[3][0]++,name)||(cov_1sp04cd4q7.b[3][1]++,''));cov_1sp04cd4q7.s[15]++;transformedName=transformedName.trim();cov_1sp04cd4q7.s[16]++;if(!transformedName.length){cov_1sp04cd4q7.b[4][0]++;cov_1sp04cd4q7.s[17]++;throw'Contact groups must have a name';}else{cov_1sp04cd4q7.b[4][1]++;}let transformedDescription=(cov_1sp04cd4q7.s[18]++,(cov_1sp04cd4q7.b[5][0]++,description)||(cov_1sp04cd4q7.b[5][1]++,''));cov_1sp04cd4q7.s[19]++;transformedDescription=transformedDescription.trim();const groupObjectId=(cov_1sp04cd4q7.s[20]++,mongoose.Types.ObjectId(groupId));const findQuery=(cov_1sp04cd4q7.s[21]++,{_id:groupObjectId});const updateQuery=(cov_1sp04cd4q7.s[22]++,{name:transformedName,description:transformedDescription});cov_1sp04cd4q7.s[23]++;return ContactGroup.update(findQuery,updateQuery).exec();}/**
	 * Moves the given group to the given new position
	 * @param string groupId
	 * @param int newOrder
	 * @return Promise
	 */reorderGroup(groupId,newOrder){cov_1sp04cd4q7.f[4]++;const groupObjectId=(cov_1sp04cd4q7.s[24]++,mongoose.Types.ObjectId(groupId));cov_1sp04cd4q7.s[25]++;return ContactGroup.findOne({_id:groupObjectId}).exec().then(group=>{cov_1sp04cd4q7.f[5]++;const oldOrder=(cov_1sp04cd4q7.s[26]++,group.order);//Update all fields to their new orders
let findQuery=(cov_1sp04cd4q7.s[27]++,{});let updateQuery=(cov_1sp04cd4q7.s[28]++,{});cov_1sp04cd4q7.s[29]++;if(newOrder<oldOrder){cov_1sp04cd4q7.b[6][0]++;cov_1sp04cd4q7.s[30]++;findQuery={order:{$lt:oldOrder,$gte:newOrder}};cov_1sp04cd4q7.s[31]++;updateQuery={$inc:{order:1}};}else{cov_1sp04cd4q7.b[6][1]++;cov_1sp04cd4q7.s[32]++;findQuery={order:{$gt:oldOrder,$lte:newOrder}};cov_1sp04cd4q7.s[33]++;updateQuery={$inc:{order:-1}};}cov_1sp04cd4q7.s[34]++;return ContactGroup.updateMany(findQuery,updateQuery).exec();}).then(()=>{cov_1sp04cd4q7.f[6]++;cov_1sp04cd4q7.s[35]++;return ContactGroup.findOneAndUpdate({_id:groupObjectId},{order:newOrder}).exec();});}/**
	 * Deletes the given group
	 * @param string groupId
	 * @return Promise
	 */deleteGroup(groupId){cov_1sp04cd4q7.f[7]++;let deletedGroupOrder=(cov_1sp04cd4q7.s[36]++,-1);const groupObjectId=(cov_1sp04cd4q7.s[37]++,mongoose.Types.ObjectId(groupId));cov_1sp04cd4q7.s[38]++;return ContactGroup.findById(groupId).exec().then(group=>{cov_1sp04cd4q7.f[8]++;cov_1sp04cd4q7.s[39]++;deletedGroupOrder=group.order;cov_1sp04cd4q7.s[40]++;return ContactGroup.findOneAndRemove({_id:groupObjectId});}).then(()=>{cov_1sp04cd4q7.f[9]++;//Reorder remaining fields
const findQuery=(cov_1sp04cd4q7.s[41]++,{order:{$gt:deletedGroupOrder}});const updateQuery=(cov_1sp04cd4q7.s[42]++,{$inc:{order:-1}});cov_1sp04cd4q7.s[43]++;return ContactGroup.updateMany(findQuery,updateQuery);});}}cov_1sp04cd4q7.s[44]++;module.exports=ContactGroupDao;
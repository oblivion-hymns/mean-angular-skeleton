var cov_1bbu15ym6l=function(){var path='/home/bwilbur/projects/mercury/modules/communication/models/mail/template-parser.js',hash='dfc5e8f4756e11094e9cfb78d042df241af4bcf6',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/communication/models/mail/template-parser.js',statementMap:{'0':{start:{line:1,column:11},end:{line:1,column:24}},'1':{start:{line:2,column:25},end:{line:2,column:55}},'2':{start:{line:17,column:2},end:{line:17,column:20}},'3':{start:{line:19,column:27},end:{line:19,column:49}},'4':{start:{line:20,column:23},end:{line:20,column:61}},'5':{start:{line:22,column:16},end:{line:43,column:4}},'6':{start:{line:23,column:3},end:{line:42,column:6}},'7':{start:{line:24,column:4},end:{line:28,column:5}},'8':{start:{line:26,column:5},end:{line:26,column:19}},'9':{start:{line:27,column:5},end:{line:27,column:12}},'10':{start:{line:30,column:4},end:{line:39,column:5}},'11':{start:{line:32,column:5},end:{line:38,column:6}},'12':{start:{line:34,column:21},end:{line:34,column:24}},'13':{start:{line:35,column:23},end:{line:35,column:32}},'14':{start:{line:36,column:23},end:{line:36,column:60}},'15':{start:{line:37,column:6},end:{line:37,column:46}},'16':{start:{line:41,column:4},end:{line:41,column:18}},'17':{start:{line:45,column:2},end:{line:45,column:17}},'18':{start:{line:49,column:0},end:{line:49,column:32}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:16,column:1},end:{line:46,column:2}},line:16},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:28},end:{line:22,column:29}},loc:{start:{line:22,column:53},end:{line:43,column:3}},line:22},'2':{name:'(anonymous_2)',decl:{start:{line:23,column:50},end:{line:23,column:51}},loc:{start:{line:23,column:71},end:{line:42,column:4}},line:23}},branchMap:{'0':{loc:{start:{line:17,column:9},end:{line:17,column:19}},type:'binary-expr',locations:[{start:{line:17,column:9},end:{line:17,column:13}},{start:{line:17,column:17},end:{line:17,column:19}}],line:17},'1':{loc:{start:{line:24,column:4},end:{line:28,column:5}},type:'if',locations:[{start:{line:24,column:4},end:{line:28,column:5}},{start:{line:24,column:4},end:{line:28,column:5}}],line:24},'2':{loc:{start:{line:32,column:5},end:{line:38,column:6}},type:'if',locations:[{start:{line:32,column:5},end:{line:38,column:6}},{start:{line:32,column:5},end:{line:38,column:6}}],line:32}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0],'1':[0,0],'2':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const fs=(cov_1bbu15ym6l.s[0]++,require('fs'));const TemplateResolver=(cov_1bbu15ym6l.s[1]++,require('./template-resolver'));/**
 * Handles parsing of HTML templates
 */class TemplateParser{/**
	 * Resolves the given templateName and returns the content of the template concatenated with the given args
	 * @param string templateName - Name of an HTML template to be resolved
	 * @param any args - Optional. Arguments to replace in the template, notated in the HTML file in {{ }}
	 * @return Promise
	 */parse(templateName,args){cov_1bbu15ym6l.f[0]++;cov_1bbu15ym6l.s[2]++;args=(cov_1bbu15ym6l.b[0][0]++,args)||(cov_1bbu15ym6l.b[0][1]++,{});const templateResolver=(cov_1bbu15ym6l.s[3]++,new TemplateResolver());const templatePath=(cov_1bbu15ym6l.s[4]++,templateResolver.resolve(templateName));var promise=(cov_1bbu15ym6l.s[5]++,new Promise(function(resolve,reject){cov_1bbu15ym6l.f[1]++;cov_1bbu15ym6l.s[6]++;fs.readFile(templatePath,{encoding:'utf-8'},function(error,html){cov_1bbu15ym6l.f[2]++;cov_1bbu15ym6l.s[7]++;if(error){cov_1bbu15ym6l.b[1][0]++;cov_1bbu15ym6l.s[8]++;reject(error);cov_1bbu15ym6l.s[9]++;return;}else{cov_1bbu15ym6l.b[1][1]++;}cov_1bbu15ym6l.s[10]++;for(let arg in args){cov_1bbu15ym6l.s[11]++;if(args.hasOwnProperty(arg)){cov_1bbu15ym6l.b[2][0]++;const argKey=(cov_1bbu15ym6l.s[12]++,arg);const argValue=(cov_1bbu15ym6l.s[13]++,args[arg]);const keyRegex=(cov_1bbu15ym6l.s[14]++,new RegExp('{{'+argKey+'}}','g'));cov_1bbu15ym6l.s[15]++;html=html.replace(keyRegex,argValue);}else{cov_1bbu15ym6l.b[2][1]++;}}cov_1bbu15ym6l.s[16]++;resolve(html);});}));cov_1bbu15ym6l.s[17]++;return promise;}}cov_1bbu15ym6l.s[18]++;module.exports=TemplateParser;
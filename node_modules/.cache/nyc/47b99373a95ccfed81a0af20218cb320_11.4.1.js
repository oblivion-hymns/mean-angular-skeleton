var cov_1bj80pc4hf=function(){var path='/home/bwilbur/projects/mercury/modules/auth/middleware/has-permission.js',hash='9accc4dcb5b2c1fbd4b0024a8168c9100a10f3b4',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/auth/middleware/has-permission.js',statementMap:{'0':{start:{line:1,column:15},end:{line:1,column:59}},'1':{start:{line:2,column:22},end:{line:2,column:59}},'2':{start:{line:3,column:17},end:{line:3,column:59}},'3':{start:{line:4,column:22},end:{line:4,column:59}},'4':{start:{line:5,column:16},end:{line:5,column:55}},'5':{start:{line:15,column:1},end:{line:36,column:3}},'6':{start:{line:17,column:24},end:{line:17,column:43}},'7':{start:{line:18,column:16},end:{line:18,column:54}},'8':{start:{line:21,column:24},end:{line:21,column:43}},'9':{start:{line:22,column:18},end:{line:22,column:31}},'10':{start:{line:23,column:17},end:{line:23,column:50}},'11':{start:{line:24,column:2},end:{line:35,column:5}},'12':{start:{line:25,column:3},end:{line:29,column:4}},'13':{start:{line:27,column:4},end:{line:27,column:11}},'14':{start:{line:28,column:4},end:{line:28,column:11}},'15':{start:{line:31,column:3},end:{line:31,column:95}},'16':{start:{line:33,column:3},end:{line:33,column:24}},'17':{start:{line:34,column:3},end:{line:34,column:62}},'18':{start:{line:39,column:0},end:{line:39,column:31}}},fnMap:{'0':{name:'hasPermission',decl:{start:{line:13,column:9},end:{line:13,column:22}},loc:{start:{line:14,column:0},end:{line:37,column:1}},line:14},'1':{name:'(anonymous_1)',decl:{start:{line:15,column:8},end:{line:15,column:9}},loc:{start:{line:15,column:32},end:{line:36,column:2}},line:15},'2':{name:'(anonymous_2)',decl:{start:{line:24,column:59},end:{line:24,column:60}},loc:{start:{line:24,column:75},end:{line:32,column:3}},line:24},'3':{name:'(anonymous_3)',decl:{start:{line:32,column:11},end:{line:32,column:12}},loc:{start:{line:32,column:20},end:{line:35,column:3}},line:32}},branchMap:{'0':{loc:{start:{line:25,column:3},end:{line:29,column:4}},type:'if',locations:[{start:{line:25,column:3},end:{line:29,column:4}},{start:{line:25,column:3},end:{line:29,column:4}}],line:25}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0},f:{'0':0,'1':0,'2':0,'3':0},b:{'0':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const config=(cov_1bj80pc4hf.s[0]++,require('./../../../config/config').instance);const PermissionDao=(cov_1bj80pc4hf.s[1]++,require('./../models/permission-dao'));const Response=(cov_1bj80pc4hf.s[2]++,require('./../../utility/models/response'));const TokenVerifier=(cov_1bj80pc4hf.s[3]++,require('./../models/token-verifier'));const UserDao=(cov_1bj80pc4hf.s[4]++,require('./../../user/models/user-dao'));/**
 * Determines if the route is accessible by the currently-logged-in user based on their permissions.
 * Will progress to the next router function if authorized; otherwise the request is rejected
 * @param string permissionName - The name of the permission to check against
 * @return Response
 */function hasPermission(permissionName){cov_1bj80pc4hf.f[0]++;cov_1bj80pc4hf.s[5]++;return function(req,res,next){cov_1bj80pc4hf.f[1]++;//Validate token before proceeding
const tokenVerifier=(cov_1bj80pc4hf.s[6]++,new TokenVerifier());const token=(cov_1bj80pc4hf.s[7]++,tokenVerifier.getTokenFromRequest(req));//Determine if the user in the token has the given permission
const permissionDao=(cov_1bj80pc4hf.s[8]++,new PermissionDao());const userDao=(cov_1bj80pc4hf.s[9]++,new UserDao());const userId=(cov_1bj80pc4hf.s[10]++,userDao.getUserIdFromToken(token));cov_1bj80pc4hf.s[11]++;permissionDao.hasPermission(userId,permissionName).then(isAuthorized=>{cov_1bj80pc4hf.f[2]++;cov_1bj80pc4hf.s[12]++;if(isAuthorized){cov_1bj80pc4hf.b[0][0]++;cov_1bj80pc4hf.s[13]++;next();cov_1bj80pc4hf.s[14]++;return;}else{cov_1bj80pc4hf.b[0][1]++;}cov_1bj80pc4hf.s[15]++;return res.render('unauthorized',{status:401,message:config.app.messages.unauthorized});}).catch(error=>{cov_1bj80pc4hf.f[3]++;cov_1bj80pc4hf.s[16]++;console.error(error);cov_1bj80pc4hf.s[17]++;return new Response(res,500,config.app.messages.default);});};}cov_1bj80pc4hf.s[18]++;module.exports=hasPermission;
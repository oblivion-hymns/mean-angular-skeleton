var cov_22bbgkb0h4=function(){var path='/home/bwilbur/projects/mercury/config/config.js',hash='63207df767effd8127a11ac67fac6eb89ede27c8',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/config/config.js',statementMap:{'0':{start:{line:4,column:15},end:{line:4,column:43}},'1':{start:{line:5,column:18},end:{line:5,column:39}},'2':{start:{line:8,column:22},end:{line:8,column:58}},'3':{start:{line:9,column:0},end:{line:23,column:1}},'4':{start:{line:11,column:13},end:{line:11,column:33}},'5':{start:{line:12,column:1},end:{line:15,column:2}},'6':{start:{line:14,column:2},end:{line:14,column:53}},'7':{start:{line:18,column:20},end:{line:18,column:44}},'8':{start:{line:19,column:23},end:{line:19,column:46}},'9':{start:{line:20,column:19},end:{line:20,column:41}},'10':{start:{line:21,column:16},end:{line:21,column:54}},'11':{start:{line:22,column:1},end:{line:22,column:25}},'12':{start:{line:26,column:18},end:{line:26,column:20}},'13':{start:{line:27,column:0},end:{line:31,column:3}},'14':{start:{line:29,column:2},end:{line:29,column:24}},'15':{start:{line:34,column:0},end:{line:34,column:25}},'16':{start:{line:36,column:0},end:{line:36,column:27}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:28,column:6},end:{line:28,column:7}},loc:{start:{line:28,column:17},end:{line:30,column:2}},line:28}},branchMap:{'0':{loc:{start:{line:9,column:0},end:{line:23,column:1}},type:'if',locations:[{start:{line:9,column:0},end:{line:23,column:1}},{start:{line:9,column:0},end:{line:23,column:1}}],line:9},'1':{loc:{start:{line:12,column:1},end:{line:15,column:2}},type:'if',locations:[{start:{line:12,column:1},end:{line:15,column:2}},{start:{line:12,column:1},end:{line:15,column:2}}],line:12}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0},f:{'0':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/**
 * Pseudo-singleton through which to access application config.
 */const CONFIG=(cov_22bbgkb0h4.s[0]++,Symbol.for('mercury.config'));const mergeJson=(cov_22bbgkb0h4.s[1]++,require('merge-json'));//Determine if symbol already exists
const globalSymbols=(cov_22bbgkb0h4.s[2]++,Object.getOwnPropertySymbols(global));cov_22bbgkb0h4.s[3]++;if(globalSymbols.indexOf(CONFIG)==-1){cov_22bbgkb0h4.b[0][0]++;const env=(cov_22bbgkb0h4.s[4]++,process.env.NODE_ENV);cov_22bbgkb0h4.s[5]++;if(!env){cov_22bbgkb0h4.b[1][0]++;cov_22bbgkb0h4.s[6]++;throw'Must provide NODE_ENV environment variable';}else{cov_22bbgkb0h4.b[1][1]++;}//Determine configuration based on environment
const coreConfig=(cov_22bbgkb0h4.s[7]++,require('./config.json'));const envConfigPath=(cov_22bbgkb0h4.s[8]++,'./config-'+env+'');const envConfig=(cov_22bbgkb0h4.s[9]++,require(envConfigPath));const config=(cov_22bbgkb0h4.s[10]++,mergeJson.merge(coreConfig,envConfig));cov_22bbgkb0h4.s[11]++;global[CONFIG]=config;}else{cov_22bbgkb0h4.b[0][1]++;}//Define singleton
const singleton=(cov_22bbgkb0h4.s[12]++,{});cov_22bbgkb0h4.s[13]++;Object.defineProperty(singleton,'instance',{get:function(){cov_22bbgkb0h4.f[0]++;cov_22bbgkb0h4.s[14]++;return global[CONFIG];}});//Make this object immutable
cov_22bbgkb0h4.s[15]++;Object.freeze(singleton);cov_22bbgkb0h4.s[16]++;module.exports=singleton;
var cov_1mf5rr9hiu=function(){var path='/home/bwilbur/projects/mercury/modules/communication/models/mail/domain-whitelist-dao.js',hash='a19d2b5415d0852758604e29281279da4fe7eeb1',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/communication/models/mail/domain-whitelist-dao.js',statementMap:{'0':{start:{line:1,column:29},end:{line:1,column:64}},'1':{start:{line:11,column:2},end:{line:11,column:59}},'2':{start:{line:22,column:16},end:{line:22,column:58}},'3':{start:{line:23,column:2},end:{line:28,column:5}},'4':{start:{line:24,column:3},end:{line:27,column:4}},'5':{start:{line:26,column:4},end:{line:26,column:27}},'6':{start:{line:39,column:2},end:{line:39,column:98}},'7':{start:{line:49,column:2},end:{line:49,column:71}},'8':{start:{line:59,column:2},end:{line:59,column:22}},'9':{start:{line:60,column:2},end:{line:60,column:37}},'10':{start:{line:62,column:16},end:{line:62,column:32}},'11':{start:{line:63,column:21},end:{line:63,column:42}},'12':{start:{line:65,column:2},end:{line:67,column:5}},'13':{start:{line:66,column:3},end:{line:66,column:19}},'14':{start:{line:71,column:0},end:{line:71,column:36}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:9,column:1},end:{line:9,column:2}},loc:{start:{line:10,column:1},end:{line:12,column:2}},line:10},'1':{name:'(anonymous_1)',decl:{start:{line:20,column:1},end:{line:20,column:2}},loc:{start:{line:21,column:1},end:{line:29,column:2}},line:21},'2':{name:'(anonymous_2)',decl:{start:{line:23,column:28},end:{line:23,column:29}},loc:{start:{line:23,column:37},end:{line:28,column:3}},line:23},'3':{name:'(anonymous_3)',decl:{start:{line:37,column:1},end:{line:37,column:2}},loc:{start:{line:38,column:1},end:{line:40,column:2}},line:38},'4':{name:'(anonymous_4)',decl:{start:{line:47,column:1},end:{line:47,column:2}},loc:{start:{line:48,column:1},end:{line:50,column:2}},line:48},'5':{name:'(anonymous_5)',decl:{start:{line:57,column:1},end:{line:57,column:2}},loc:{start:{line:58,column:1},end:{line:68,column:2}},line:58},'6':{name:'(anonymous_6)',decl:{start:{line:65,column:72},end:{line:65,column:73}},loc:{start:{line:65,column:82},end:{line:67,column:3}},line:65}},branchMap:{'0':{loc:{start:{line:24,column:3},end:{line:27,column:4}},type:'if',locations:[{start:{line:24,column:3},end:{line:27,column:4}},{start:{line:24,column:3},end:{line:27,column:4}}],line:24},'1':{loc:{start:{line:59,column:10},end:{line:59,column:21}},type:'binary-expr',locations:[{start:{line:59,column:10},end:{line:59,column:15}},{start:{line:59,column:19},end:{line:59,column:21}}],line:59}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const DomainWhitelistEntry=(cov_1mf5rr9hiu.s[0]++,require('./domain-whitelist-entry'));class DomainWhitelistDao{/**
	 * Returns a list of all domains on the whitelist
	 * @return Promise
	 */loadAll(){cov_1mf5rr9hiu.f[0]++;cov_1mf5rr9hiu.s[1]++;return DomainWhitelistEntry.find().sort('domain').exec();}/**
	 * Adds a new domain to the whitelist
	 * @param string domain
	 * @return Promise
	 * @throws Exception - If domain already exists
	 */addDomain(domain){cov_1mf5rr9hiu.f[1]++;const entry=(cov_1mf5rr9hiu.s[2]++,new DomainWhitelistEntry({domain:domain}));cov_1mf5rr9hiu.s[3]++;return entry.save().catch(error=>{cov_1mf5rr9hiu.f[2]++;cov_1mf5rr9hiu.s[4]++;if(error){cov_1mf5rr9hiu.b[0][0]++;cov_1mf5rr9hiu.s[5]++;throw new Error(error);}else{cov_1mf5rr9hiu.b[0][1]++;}});}/**
	 * Updates the given domain to the new given value
	 * @param string domainId
	 * @param string domain - New value
	 * @return Promise
	 */editDomain(domainId,domain){cov_1mf5rr9hiu.f[3]++;cov_1mf5rr9hiu.s[6]++;return DomainWhitelistEntry.findOneAndUpdate({domain:domain},{$set:{domain:domain}}).exec();}/**
	 * Removes the domain with the given ID from the whitelist
	 * @param string domainId
	 * @return Promise
	 */removeDomain(domainId){cov_1mf5rr9hiu.f[4]++;cov_1mf5rr9hiu.s[7]++;return DomainWhitelistEntry.findOneAndRemove({_id:domainId}).exec();}/**
	 * Returns whether or not the given email is on the whitelist
	 * @param string email
	 * @return Promise
	 */isOnWhitelist(email){cov_1mf5rr9hiu.f[5]++;cov_1mf5rr9hiu.s[8]++;email=(cov_1mf5rr9hiu.b[1][0]++,email)||(cov_1mf5rr9hiu.b[1][1]++,'');cov_1mf5rr9hiu.s[9]++;email=email.trim().toLowerCase();const parts=(cov_1mf5rr9hiu.s[10]++,email.split('@'));const testDomain=(cov_1mf5rr9hiu.s[11]++,parts[parts.length-1]);cov_1mf5rr9hiu.s[12]++;return DomainWhitelistEntry.findOne({domain:testDomain}).exec().then(domain=>{cov_1mf5rr9hiu.f[6]++;cov_1mf5rr9hiu.s[13]++;return!!domain;});}}cov_1mf5rr9hiu.s[14]++;module.exports=DomainWhitelistDao;
var cov_1gaatz3rcn=function(){var path='/home/bwilbur/projects/mercury/modules/contact/models/contact-dao.js',hash='51f881b9855a33a6486327d17485c3255714057b',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/contact/models/contact-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:23},end:{line:2,column:80}},'2':{start:{line:3,column:16},end:{line:3,column:36}},'3':{start:{line:14,column:2},end:{line:14,column:37}},'4':{start:{line:24,column:25},end:{line:24,column:58}},'5':{start:{line:25,column:2},end:{line:25,column:68}},'6':{start:{line:35,column:13},end:{line:35,column:31}},'7':{start:{line:36,column:2},end:{line:36,column:21}},'8':{start:{line:37,column:14},end:{line:37,column:33}},'9':{start:{line:38,column:2},end:{line:38,column:23}},'10':{start:{line:39,column:15},end:{line:39,column:35}},'11':{start:{line:40,column:2},end:{line:43,column:3}},'12':{start:{line:42,column:3},end:{line:42,column:36}},'13':{start:{line:45,column:23},end:{line:45,column:50}},'14':{start:{line:46,column:2},end:{line:49,column:3}},'15':{start:{line:48,column:3},end:{line:48,column:55}},'16':{start:{line:51,column:19},end:{line:51,column:33}},'17':{start:{line:52,column:2},end:{line:55,column:3}},'18':{start:{line:54,column:3},end:{line:54,column:49}},'19':{start:{line:57,column:11},end:{line:57,column:36}},'20':{start:{line:58,column:2},end:{line:81,column:3}},'21':{start:{line:61,column:27},end:{line:61,column:54}},'22':{start:{line:62,column:21},end:{line:62,column:43}},'23':{start:{line:63,column:23},end:{line:68,column:5}},'24':{start:{line:69,column:19},end:{line:69,column:33}},'25':{start:{line:70,column:3},end:{line:70,column:75}},'26':{start:{line:74,column:22},end:{line:79,column:5}},'27':{start:{line:80,column:3},end:{line:80,column:28}},'28':{start:{line:94,column:24},end:{line:94,column:56}},'29':{start:{line:95,column:26},end:{line:95,column:60}},'30':{start:{line:96,column:20},end:{line:96,column:64}},'31':{start:{line:97,column:22},end:{line:100,column:5}},'32':{start:{line:101,column:2},end:{line:101,column:72}},'33':{start:{line:114,column:24},end:{line:114,column:56}},'34':{start:{line:115,column:26},end:{line:115,column:60}},'35':{start:{line:116,column:20},end:{line:119,column:3}},'36':{start:{line:120,column:22},end:{line:120,column:40}},'37':{start:{line:121,column:2},end:{line:121,column:59}},'38':{start:{line:131,column:26},end:{line:131,column:60}},'39':{start:{line:132,column:2},end:{line:136,column:5}},'40':{start:{line:133,column:21},end:{line:133,column:58}},'41':{start:{line:134,column:23},end:{line:134,column:69}},'42':{start:{line:135,column:3},end:{line:135,column:60}},'43':{start:{line:146,column:21},end:{line:146,column:23}},'44':{start:{line:147,column:2},end:{line:159,column:3}},'45':{start:{line:149,column:24},end:{line:149,column:33}},'46':{start:{line:150,column:21},end:{line:150,column:51}},'47':{start:{line:151,column:3},end:{line:151,column:36}},'48':{start:{line:152,column:15},end:{line:152,column:39}},'49':{start:{line:153,column:3},end:{line:153,column:24}},'50':{start:{line:155,column:3},end:{line:158,column:4}},'51':{start:{line:157,column:4},end:{line:157,column:64}},'52':{start:{line:161,column:2},end:{line:161,column:22}},'53':{start:{line:165,column:0},end:{line:165,column:28}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:12,column:1},end:{line:12,column:2}},loc:{start:{line:13,column:1},end:{line:15,column:2}},line:13},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:1},end:{line:22,column:2}},loc:{start:{line:23,column:1},end:{line:26,column:2}},line:23},'2':{name:'(anonymous_2)',decl:{start:{line:33,column:1},end:{line:33,column:2}},loc:{start:{line:34,column:1},end:{line:82,column:2}},line:34},'3':{name:'(anonymous_3)',decl:{start:{line:92,column:1},end:{line:92,column:2}},loc:{start:{line:93,column:1},end:{line:102,column:2}},line:93},'4':{name:'(anonymous_4)',decl:{start:{line:112,column:1},end:{line:112,column:2}},loc:{start:{line:113,column:1},end:{line:122,column:2}},line:113},'5':{name:'(anonymous_5)',decl:{start:{line:129,column:1},end:{line:129,column:2}},loc:{start:{line:130,column:1},end:{line:137,column:2}},line:130},'6':{name:'(anonymous_6)',decl:{start:{line:132,column:60},end:{line:132,column:61}},loc:{start:{line:132,column:66},end:{line:136,column:3}},line:132},'7':{name:'(anonymous_7)',decl:{start:{line:144,column:1},end:{line:144,column:2}},loc:{start:{line:145,column:1},end:{line:162,column:2}},line:145}},branchMap:{'0':{loc:{start:{line:35,column:13},end:{line:35,column:31}},type:'binary-expr',locations:[{start:{line:35,column:13},end:{line:35,column:25}},{start:{line:35,column:29},end:{line:35,column:31}}],line:35},'1':{loc:{start:{line:37,column:14},end:{line:37,column:33}},type:'binary-expr',locations:[{start:{line:37,column:14},end:{line:37,column:27}},{start:{line:37,column:31},end:{line:37,column:33}}],line:37},'2':{loc:{start:{line:39,column:15},end:{line:39,column:35}},type:'binary-expr',locations:[{start:{line:39,column:15},end:{line:39,column:29}},{start:{line:39,column:33},end:{line:39,column:35}}],line:39},'3':{loc:{start:{line:40,column:2},end:{line:43,column:3}},type:'if',locations:[{start:{line:40,column:2},end:{line:43,column:3}},{start:{line:40,column:2},end:{line:43,column:3}}],line:40},'4':{loc:{start:{line:46,column:2},end:{line:49,column:3}},type:'if',locations:[{start:{line:46,column:2},end:{line:49,column:3}},{start:{line:46,column:2},end:{line:49,column:3}}],line:46},'5':{loc:{start:{line:52,column:2},end:{line:55,column:3}},type:'if',locations:[{start:{line:52,column:2},end:{line:55,column:3}},{start:{line:52,column:2},end:{line:55,column:3}}],line:52},'6':{loc:{start:{line:57,column:11},end:{line:57,column:36}},type:'binary-expr',locations:[{start:{line:57,column:11},end:{line:57,column:22}},{start:{line:57,column:26},end:{line:57,column:36}}],line:57},'7':{loc:{start:{line:58,column:2},end:{line:81,column:3}},type:'if',locations:[{start:{line:58,column:2},end:{line:81,column:3}},{start:{line:58,column:2},end:{line:81,column:3}}],line:58},'8':{loc:{start:{line:150,column:21},end:{line:150,column:51}},type:'binary-expr',locations:[{start:{line:150,column:21},end:{line:150,column:45}},{start:{line:150,column:49},end:{line:150,column:51}}],line:150},'9':{loc:{start:{line:152,column:15},end:{line:152,column:39}},type:'binary-expr',locations:[{start:{line:152,column:15},end:{line:152,column:33}},{start:{line:152,column:37},end:{line:152,column:39}}],line:152},'10':{loc:{start:{line:155,column:3},end:{line:158,column:4}},type:'if',locations:[{start:{line:155,column:3},end:{line:158,column:4}},{start:{line:155,column:3},end:{line:158,column:4}}],line:155},'11':{loc:{start:{line:155,column:7},end:{line:155,column:49}},type:'binary-expr',locations:[{start:{line:155,column:7},end:{line:155,column:29}},{start:{line:155,column:33},end:{line:155,column:49}}],line:155}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0,'46':0,'47':0,'48':0,'49':0,'50':0,'51':0,'52':0,'53':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0],'6':[0,0],'7':[0,0],'8':[0,0],'9':[0,0],'10':[0,0],'11':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_1gaatz3rcn.s[0]++,require('mongoose'));const BuildingAgency=(cov_1gaatz3rcn.s[1]++,require('./../../building-agency/models/building-agency'));const Contact=(cov_1gaatz3rcn.s[2]++,require('./contact'));class ContactDao{/**
	 * Returns a single contact
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_1gaatz3rcn.f[0]++;cov_1gaatz3rcn.s[3]++;return Contact.findById(id).exec();}/**
	 * Returns a list of all contacts for a given agency
	 * @param string agencyId
	 * @return Promise
	 */loadForAgency(agencyId){cov_1gaatz3rcn.f[1]++;const agencyObjectId=(cov_1gaatz3rcn.s[4]++,mongoose.Types.ObjectId(agencyId));cov_1gaatz3rcn.s[5]++;return Contact.find({agency:agencyObjectId}).sort('name').exec();}/**
	 * Saves/updates the given Contact and all of its info
	 * @param Contact contact
	 * @return Promise
	 */save(contact){cov_1gaatz3rcn.f[2]++;let name=(cov_1gaatz3rcn.s[6]++,(cov_1gaatz3rcn.b[0][0]++,contact.name)||(cov_1gaatz3rcn.b[0][1]++,''));cov_1gaatz3rcn.s[7]++;name=name.trim();let email=(cov_1gaatz3rcn.s[8]++,(cov_1gaatz3rcn.b[1][0]++,contact.email)||(cov_1gaatz3rcn.b[1][1]++,''));cov_1gaatz3rcn.s[9]++;email=email.trim();let phones=(cov_1gaatz3rcn.s[10]++,(cov_1gaatz3rcn.b[2][0]++,contact.phones)||(cov_1gaatz3rcn.b[2][1]++,[]));cov_1gaatz3rcn.s[11]++;if(!name.length){cov_1gaatz3rcn.b[3][0]++;cov_1gaatz3rcn.s[12]++;throw'Contact must have a name';}else{cov_1gaatz3rcn.b[3][1]++;}const phoneNumbers=(cov_1gaatz3rcn.s[13]++,this.getValidPhones(phones));cov_1gaatz3rcn.s[14]++;if(!phoneNumbers.length){cov_1gaatz3rcn.b[4][0]++;cov_1gaatz3rcn.s[15]++;throw'Contact must have at least one phone number';}else{cov_1gaatz3rcn.b[4][1]++;}const agencyId=(cov_1gaatz3rcn.s[16]++,contact.agency);cov_1gaatz3rcn.s[17]++;if(!agencyId){cov_1gaatz3rcn.b[5][0]++;cov_1gaatz3rcn.s[18]++;throw'Contact must be assigned to an agency';}else{cov_1gaatz3rcn.b[5][1]++;}let id=(cov_1gaatz3rcn.s[19]++,(cov_1gaatz3rcn.b[6][0]++,contact._id)||(cov_1gaatz3rcn.b[6][1]++,contact.id));cov_1gaatz3rcn.s[20]++;if(id){cov_1gaatz3rcn.b[7][0]++;//Contact already exists
const contactObjectId=(cov_1gaatz3rcn.s[21]++,mongoose.Types.ObjectId(id));const findQuery=(cov_1gaatz3rcn.s[22]++,{_id:contactObjectId});const updateQuery=(cov_1gaatz3rcn.s[23]++,{$set:{agency:contact.agency,name:name,email:email,phones:phoneNumbers}});const options=(cov_1gaatz3rcn.s[24]++,{upsert:true});cov_1gaatz3rcn.s[25]++;return Contact.findOneAndUpdate(findQuery,updateQuery,options).exec();}else{cov_1gaatz3rcn.b[7][1]++;const newContact=(cov_1gaatz3rcn.s[26]++,new Contact({agency:contact.agency,name:name,email:email,phones:phoneNumbers}));cov_1gaatz3rcn.s[27]++;return newContact.save();}}/**
	 * Adds the given contact to the given group on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string groupId
	 * @param string contactId
	 * @return Promise
	 */addToBuildingAgency(buildingId,agencyId,groupId,contactId){cov_1gaatz3rcn.f[3]++;const groupObjectId=(cov_1gaatz3rcn.s[28]++,mongoose.Types.ObjectId(groupId));const contactObjectId=(cov_1gaatz3rcn.s[29]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_1gaatz3rcn.s[30]++,{buildingId:buildingId,agencyId:agencyId});const updateQuery=(cov_1gaatz3rcn.s[31]++,{$addToSet:{contacts:{contact:contactObjectId,contactGroup:groupObjectId}}});cov_1gaatz3rcn.s[32]++;return BuildingAgency.findOneAndUpdate(findQuery,updateQuery).exec();}/**
	 * Removes the given contact from the given group on the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string groupId
	 * @param string contactId
	 * @return Promise
	 */removeFromBuildingAgency(buildingId,agencyId,groupId,contactId){cov_1gaatz3rcn.f[4]++;const groupObjectId=(cov_1gaatz3rcn.s[33]++,mongoose.Types.ObjectId(groupId));const contactObjectId=(cov_1gaatz3rcn.s[34]++,mongoose.Types.ObjectId(contactId));const findQuery=(cov_1gaatz3rcn.s[35]++,{'contacts.contact':contactObjectId,'contacts.group':groupObjectId});const updateQuery=(cov_1gaatz3rcn.s[36]++,{$pull:findQuery});cov_1gaatz3rcn.s[37]++;return BuildingAgency.updateMany(findQuery,updateQuery);}/**
	 * Deletes the given Contact
	 * @param string contactId
	 * @return Promise
	 */deleteContact(contactId){cov_1gaatz3rcn.f[5]++;const contactObjectId=(cov_1gaatz3rcn.s[38]++,mongoose.Types.ObjectId(contactId));cov_1gaatz3rcn.s[39]++;return Contact.remove({_id:contactObjectId}).exec().then(()=>{cov_1gaatz3rcn.f[6]++;const findQuery=(cov_1gaatz3rcn.s[40]++,{'contacts.contact':contactObjectId});const updateQuery=(cov_1gaatz3rcn.s[41]++,{$pull:{'contacts.contact':contactObjectId}});cov_1gaatz3rcn.s[42]++;return BuildingAgency.updateMany(findQuery,updateQuery);});}/**
	 * Given a list of phone numbers, returns an array of only the valid ones
	 * @param PhoneNumber phones
	 * @return Promise
	 */getValidPhones(phones){cov_1gaatz3rcn.f[7]++;let phoneNumbers=(cov_1gaatz3rcn.s[43]++,[]);cov_1gaatz3rcn.s[44]++;for(let i=0;i<phones.length;i++){const currentPhone=(cov_1gaatz3rcn.s[45]++,phones[i]);let phoneNumber=(cov_1gaatz3rcn.s[46]++,(cov_1gaatz3rcn.b[8][0]++,currentPhone.phoneNumber)||(cov_1gaatz3rcn.b[8][1]++,''));cov_1gaatz3rcn.s[47]++;phoneNumber=phoneNumber.trim();let label=(cov_1gaatz3rcn.s[48]++,(cov_1gaatz3rcn.b[9][0]++,currentPhone.label)||(cov_1gaatz3rcn.b[9][1]++,''));cov_1gaatz3rcn.s[49]++;label=label.trim();cov_1gaatz3rcn.s[50]++;if((cov_1gaatz3rcn.b[11][0]++,phoneNumber.length>0)&&(cov_1gaatz3rcn.b[11][1]++,label.length>0)){cov_1gaatz3rcn.b[10][0]++;cov_1gaatz3rcn.s[51]++;phoneNumbers.push({phoneNumber:phoneNumber,label:label});}else{cov_1gaatz3rcn.b[10][1]++;}}cov_1gaatz3rcn.s[52]++;return phoneNumbers;}}cov_1gaatz3rcn.s[53]++;module.exports=ContactDao;
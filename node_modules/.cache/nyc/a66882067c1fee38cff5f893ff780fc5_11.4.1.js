var cov_11v7kdbdmu=function(){var path='/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',hash='94c6d7995db8e792d7b2c2c93286b2fd3f3388ca',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/building-agency/models/building-agency-dao.js',statementMap:{'0':{start:{line:1,column:18},end:{line:1,column:61}},'1':{start:{line:2,column:23},end:{line:2,column:51}},'2':{start:{line:3,column:20},end:{line:3,column:67}},'3':{start:{line:4,column:16},end:{line:4,column:55}},'4':{start:{line:5,column:17},end:{line:5,column:36}},'5':{start:{line:17,column:20},end:{line:17,column:35}},'6':{start:{line:18,column:22},end:{line:18,column:39}},'7':{start:{line:20,column:24},end:{line:20,column:51}},'8':{start:{line:21,column:26},end:{line:21,column:57}},'9':{start:{line:22,column:23},end:{line:43,column:4}},'10':{start:{line:23,column:18},end:{line:23,column:32}},'11':{start:{line:24,column:20},end:{line:24,column:36}},'12':{start:{line:26,column:3},end:{line:42,column:7}},'13':{start:{line:28,column:16},end:{line:28,column:18}},'14':{start:{line:29,column:5},end:{line:32,column:6}},'15':{start:{line:31,column:6},end:{line:31,column:28}},'16':{start:{line:36,column:17},end:{line:40,column:6}},'17':{start:{line:41,column:5},end:{line:41,column:16}},'18':{start:{line:45,column:2},end:{line:45,column:22}},'19':{start:{line:55,column:18},end:{line:55,column:31}},'20':{start:{line:56,column:18},end:{line:63,column:4}},'21':{start:{line:57,column:3},end:{line:60,column:4}},'22':{start:{line:59,column:4},end:{line:59,column:14}},'23':{start:{line:62,column:3},end:{line:62,column:35}},'24':{start:{line:65,column:2},end:{line:65,column:17}},'25':{start:{line:75,column:18},end:{line:87,column:4}},'26':{start:{line:76,column:27},end:{line:76,column:29}},'27':{start:{line:77,column:3},end:{line:84,column:4}},'28':{start:{line:79,column:16},end:{line:79,column:23}},'29':{start:{line:80,column:23},end:{line:80,column:37}},'30':{start:{line:81,column:21},end:{line:81,column:33}},'31':{start:{line:82,column:23},end:{line:82,column:57}},'32':{start:{line:83,column:4},end:{line:83,column:39}},'33':{start:{line:86,column:3},end:{line:86,column:41}},'34':{start:{line:88,column:2},end:{line:88,column:17}},'35':{start:{line:100,column:23},end:{line:100,column:54}},'36':{start:{line:101,column:16},end:{line:101,column:60}},'37':{start:{line:102,column:17},end:{line:102,column:50}},'38':{start:{line:103,column:18},end:{line:103,column:87}},'39':{start:{line:104,column:2},end:{line:104,column:17}},'40':{start:{line:116,column:23},end:{line:116,column:54}},'41':{start:{line:117,column:16},end:{line:117,column:60}},'42':{start:{line:118,column:17},end:{line:118,column:46}},'43':{start:{line:119,column:18},end:{line:119,column:87}},'44':{start:{line:120,column:2},end:{line:120,column:17}},'45':{start:{line:124,column:0},end:{line:124,column:35}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:15,column:1},end:{line:15,column:2}},loc:{start:{line:16,column:1},end:{line:46,column:2}},line:16},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:74},end:{line:22,column:75}},loc:{start:{line:22,column:82},end:{line:43,column:3}},line:22},'2':{name:'(anonymous_2)',decl:{start:{line:27,column:10},end:{line:27,column:11}},loc:{start:{line:27,column:23},end:{line:42,column:5}},line:27},'3':{name:'(anonymous_3)',decl:{start:{line:53,column:1},end:{line:53,column:2}},loc:{start:{line:54,column:1},end:{line:66,column:2}},line:54},'4':{name:'(anonymous_4)',decl:{start:{line:56,column:52},end:{line:56,column:53}},loc:{start:{line:56,column:60},end:{line:63,column:3}},line:56},'5':{name:'(anonymous_5)',decl:{start:{line:73,column:1},end:{line:73,column:2}},loc:{start:{line:74,column:1},end:{line:89,column:2}},line:74},'6':{name:'(anonymous_6)',decl:{start:{line:75,column:83},end:{line:75,column:84}},loc:{start:{line:75,column:91},end:{line:87,column:3}},line:75},'7':{name:'(anonymous_7)',decl:{start:{line:98,column:1},end:{line:98,column:2}},loc:{start:{line:99,column:1},end:{line:105,column:2}},line:99},'8':{name:'(anonymous_8)',decl:{start:{line:114,column:1},end:{line:114,column:2}},loc:{start:{line:115,column:1},end:{line:121,column:2}},line:115}},branchMap:{'0':{loc:{start:{line:29,column:5},end:{line:32,column:6}},type:'if',locations:[{start:{line:29,column:5},end:{line:32,column:6}},{start:{line:29,column:5},end:{line:32,column:6}}],line:29},'1':{loc:{start:{line:57,column:3},end:{line:60,column:4}},type:'if',locations:[{start:{line:57,column:3},end:{line:60,column:4}},{start:{line:57,column:3},end:{line:60,column:4}}],line:57}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0,'39':0,'40':0,'41':0,'42':0,'43':0,'44':0,'45':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const AgencyDao=(cov_11v7kdbdmu.s[0]++,require('./../../agency/models/agency-dao'));const BuildingAgency=(cov_11v7kdbdmu.s[1]++,require('./building-agency'));const BuildingDao=(cov_11v7kdbdmu.s[2]++,require('./../../building/models/building-dao'));const UserDao=(cov_11v7kdbdmu.s[3]++,require('./../../user/models/user-dao'));const mongoose=(cov_11v7kdbdmu.s[4]++,require('mongoose'));class BuildingAgencyDao{/**
	 * Loads a single Building-Agency Unit with the given IDs
	 * @param string buildingId
	 * @param string agencyId
	 * @return Promise
	 */loadOne(buildingId,agencyId){cov_11v7kdbdmu.f[0]++;const agencyDao=(cov_11v7kdbdmu.s[5]++,new AgencyDao());const buildingDao=(cov_11v7kdbdmu.s[6]++,new BuildingDao());const agencyPromise=(cov_11v7kdbdmu.s[7]++,agencyDao.loadOne(agencyId));const buildingPromise=(cov_11v7kdbdmu.s[8]++,buildingDao.loadOne(buildingId));const mergePromise=(cov_11v7kdbdmu.s[9]++,Promise.all([agencyPromise,buildingPromise]).then(data=>{cov_11v7kdbdmu.f[1]++;const agency=(cov_11v7kdbdmu.s[10]++,data[0].agency);const building=(cov_11v7kdbdmu.s[11]++,data[1].building);cov_11v7kdbdmu.s[12]++;return BuildingAgency.findOne({buildingId:buildingId,agencyId:agencyId}).populate('reps').exec().then(loadedBau=>{cov_11v7kdbdmu.f[2]++;let reps=(cov_11v7kdbdmu.s[13]++,[]);cov_11v7kdbdmu.s[14]++;if(loadedBau){cov_11v7kdbdmu.b[0][0]++;cov_11v7kdbdmu.s[15]++;reps=loadedBau.reps;}else{cov_11v7kdbdmu.b[0][1]++;}//Even if one doesn't exist, return it; all BAUs exist implicitly even if they are not saved
//to the database
const bau=(cov_11v7kdbdmu.s[16]++,{agency:agency,building:building,reps:reps});cov_11v7kdbdmu.s[17]++;return bau;});}));cov_11v7kdbdmu.s[18]++;return mergePromise;}/**
	 * Loads all Building-agency units for which the given request's user is a rep
	 * @param Request req
	 * @return Promise
	 */loadForLoggedInUser(req){cov_11v7kdbdmu.f[3]++;const userDao=(cov_11v7kdbdmu.s[19]++,new UserDao());const promise=(cov_11v7kdbdmu.s[20]++,userDao.loadFromRequest(req).then(user=>{cov_11v7kdbdmu.f[4]++;cov_11v7kdbdmu.s[21]++;if(!user){cov_11v7kdbdmu.b[1][0]++;cov_11v7kdbdmu.s[22]++;return[];}else{cov_11v7kdbdmu.b[1][1]++;}cov_11v7kdbdmu.s[23]++;return this.loadForRep(user.id);}));cov_11v7kdbdmu.s[24]++;return promise;}/**
	 * Loads all building-agency units for which the given user is a rep
	 * @param string userId
	 * @return Promise
	 */loadForRep(userId){cov_11v7kdbdmu.f[5]++;const promise=(cov_11v7kdbdmu.s[25]++,BuildingAgency.find({reps:userId}).populate('reps').exec().then(baus=>{cov_11v7kdbdmu.f[6]++;let constructPromises=(cov_11v7kdbdmu.s[26]++,[]);cov_11v7kdbdmu.s[27]++;for(let i=0;i<baus.length;i++){const bau=(cov_11v7kdbdmu.s[28]++,baus[i]);const buildingId=(cov_11v7kdbdmu.s[29]++,bau.buildingId);const agencyId=(cov_11v7kdbdmu.s[30]++,bau.agencyId);const bauPromise=(cov_11v7kdbdmu.s[31]++,this.loadOne(buildingId,agencyId));cov_11v7kdbdmu.s[32]++;constructPromises.push(bauPromise);}cov_11v7kdbdmu.s[33]++;return Promise.all(constructPromises);}));cov_11v7kdbdmu.s[34]++;return promise;}/**
	 * Assigns a rep to the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */assignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[7]++;const userObjectId=(cov_11v7kdbdmu.s[35]++,mongoose.Types.ObjectId(userId));const query=(cov_11v7kdbdmu.s[36]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[37]++,{$addToSet:{reps:userObjectId}});const promise=(cov_11v7kdbdmu.s[38]++,BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec());cov_11v7kdbdmu.s[39]++;return promise;}/**
	 * Removes a rep from the given building-agency unit
	 * @param string buildingId
	 * @param string agencyId
	 * @param string userId
	 * @return Promise
	 */unassignRep(buildingId,agencyId,userId){cov_11v7kdbdmu.f[8]++;const userObjectId=(cov_11v7kdbdmu.s[40]++,mongoose.Types.ObjectId(userId));const query=(cov_11v7kdbdmu.s[41]++,{buildingId:buildingId,agencyId:agencyId});const update=(cov_11v7kdbdmu.s[42]++,{$pull:{reps:userObjectId}});const promise=(cov_11v7kdbdmu.s[43]++,BuildingAgency.findOneAndUpdate(query,update,{upsert:true}).exec());cov_11v7kdbdmu.s[44]++;return promise;}}cov_11v7kdbdmu.s[45]++;module.exports=BuildingAgencyDao;
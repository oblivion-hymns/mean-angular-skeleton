var cov_qlusbya8v=function(){var path='/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',hash='123255aea8099f356109213f7e0b8faed6127b72',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/user/models/user-dao.js',statementMap:{'0':{start:{line:1,column:20},end:{line:1,column:63}},'1':{start:{line:2,column:22},end:{line:2,column:67}},'2':{start:{line:3,column:13},end:{line:3,column:30}},'3':{start:{line:12,column:2},end:{line:12,column:70}},'4':{start:{line:22,column:2},end:{line:22,column:48}},'5':{start:{line:23,column:2},end:{line:23,column:60}},'6':{start:{line:34,column:2},end:{line:34,column:24}},'7':{start:{line:35,column:2},end:{line:35,column:32}},'8':{start:{line:37,column:22},end:{line:37,column:133}},'9':{start:{line:38,column:23},end:{line:38,column:42}},'10':{start:{line:39,column:18},end:{line:48,column:4}},'11':{start:{line:40,column:17},end:{line:40,column:24}},'12':{start:{line:41,column:17},end:{line:41,column:24}},'13':{start:{line:43,column:3},end:{line:47,column:5}},'14':{start:{line:50,column:2},end:{line:50,column:17}},'15':{start:{line:60,column:2},end:{line:60,column:22}},'16':{start:{line:61,column:23},end:{line:61,column:49}},'17':{start:{line:62,column:16},end:{line:69,column:4}},'18':{start:{line:63,column:3},end:{line:66,column:4}},'19':{start:{line:65,column:4},end:{line:65,column:16}},'20':{start:{line:68,column:3},end:{line:68,column:15}},'21':{start:{line:70,column:2},end:{line:70,column:17}},'22':{start:{line:80,column:2},end:{line:80,column:63}},'23':{start:{line:90,column:22},end:{line:90,column:39}},'24':{start:{line:91,column:24},end:{line:91,column:43}},'25':{start:{line:92,column:16},end:{line:92,column:78}},'26':{start:{line:93,column:17},end:{line:93,column:54}},'27':{start:{line:94,column:2},end:{line:94,column:30}},'28':{start:{line:103,column:2},end:{line:103,column:68}},'29':{start:{line:112,column:16},end:{line:112,column:58}},'30':{start:{line:113,column:18},end:{line:113,column:81}},'31':{start:{line:114,column:16},end:{line:114,column:30}},'32':{start:{line:116,column:2},end:{line:116,column:71}},'33':{start:{line:126,column:2},end:{line:126,column:21}},'34':{start:{line:136,column:2},end:{line:136,column:45}},'35':{start:{line:140,column:0},end:{line:140,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:10,column:1},end:{line:10,column:2}},loc:{start:{line:11,column:1},end:{line:13,column:2}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:20,column:1},end:{line:20,column:2}},loc:{start:{line:21,column:1},end:{line:24,column:2}},line:21},'2':{name:'(anonymous_2)',decl:{start:{line:32,column:1},end:{line:32,column:2}},loc:{start:{line:33,column:1},end:{line:51,column:2}},line:33},'3':{name:'(anonymous_3)',decl:{start:{line:39,column:64},end:{line:39,column:65}},loc:{start:{line:39,column:72},end:{line:48,column:3}},line:39},'4':{name:'(anonymous_4)',decl:{start:{line:58,column:1},end:{line:58,column:2}},loc:{start:{line:59,column:1},end:{line:71,column:2}},line:59},'5':{name:'(anonymous_5)',decl:{start:{line:62,column:72},end:{line:62,column:73}},loc:{start:{line:62,column:93},end:{line:69,column:3}},line:62},'6':{name:'(anonymous_6)',decl:{start:{line:78,column:1},end:{line:78,column:2}},loc:{start:{line:79,column:1},end:{line:81,column:2}},line:79},'7':{name:'(anonymous_7)',decl:{start:{line:88,column:1},end:{line:88,column:2}},loc:{start:{line:89,column:1},end:{line:95,column:2}},line:89},'8':{name:'(anonymous_8)',decl:{start:{line:101,column:1},end:{line:101,column:2}},loc:{start:{line:102,column:1},end:{line:104,column:2}},line:102},'9':{name:'(anonymous_9)',decl:{start:{line:110,column:1},end:{line:110,column:2}},loc:{start:{line:111,column:1},end:{line:117,column:2}},line:111},'10':{name:'(anonymous_10)',decl:{start:{line:124,column:1},end:{line:124,column:2}},loc:{start:{line:125,column:1},end:{line:127,column:2}},line:125},'11':{name:'(anonymous_11)',decl:{start:{line:134,column:1},end:{line:134,column:2}},loc:{start:{line:135,column:1},end:{line:137,column:2}},line:135}},branchMap:{'0':{loc:{start:{line:60,column:10},end:{line:60,column:21}},type:'binary-expr',locations:[{start:{line:60,column:10},end:{line:60,column:15}},{start:{line:60,column:19},end:{line:60,column:21}}],line:60},'1':{loc:{start:{line:63,column:3},end:{line:66,column:4}},type:'if',locations:[{start:{line:63,column:3},end:{line:66,column:4}},{start:{line:63,column:3},end:{line:66,column:4}}],line:63}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const TokenParser=(cov_qlusbya8v.s[0]++,require('./../../auth/models/token-parser'));const TokenVerifier=(cov_qlusbya8v.s[1]++,require('./../../auth/models/token-verifier'));const User=(cov_qlusbya8v.s[2]++,require('./user'));/**
 * Database access associated with users
 */class UserDao{construct(){cov_qlusbya8v.f[0]++;cov_qlusbya8v.s[3]++;this.includeString='firstName lastName email passwordReset roles';}/**
	 * Loads a single user
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_qlusbya8v.f[1]++;cov_qlusbya8v.s[4]++;console.log('INC STRING',this.includeString);cov_qlusbya8v.s[5]++;return User.findOne({_id:id},this.includeString).exec();}/**
	 * Returns a paginated subset of users, as well as the total number of pages
	 * @param int page - Zero indexed
	 * @param int pageSize - Max 100
	 * @return Promise
	 */loadPage(page,pageSize){cov_qlusbya8v.f[2]++;cov_qlusbya8v.s[6]++;page=parseInt(page);cov_qlusbya8v.s[7]++;pageSize=parseInt(pageSize);const findPromise=(cov_qlusbya8v.s[8]++,User.find({},this.includeString).sort('lastName').skip(page*pageSize).limit(pageSize).populate('roles').exec());const countPromise=(cov_qlusbya8v.s[9]++,User.count().exec());const promise=(cov_qlusbya8v.s[10]++,Promise.all([findPromise,countPromise]).then(data=>{cov_qlusbya8v.f[3]++;const users=(cov_qlusbya8v.s[11]++,data[0]);const count=(cov_qlusbya8v.s[12]++,data[1]);cov_qlusbya8v.s[13]++;return{totalPages:Math.ceil(count/pageSize),totalUsers:count,users:users};}));cov_qlusbya8v.s[14]++;return promise;}/**
	 * Loads the User with the given email. Returns all fields
	 * @param string email
	 * @return Promise
	 */loadByEmail(email){cov_qlusbya8v.f[4]++;cov_qlusbya8v.s[15]++;email=(cov_qlusbya8v.b[0][0]++,email)||(cov_qlusbya8v.b[0][1]++,'');const trimmedEmail=(cov_qlusbya8v.s[16]++,email.trim().toLowerCase());var promise=(cov_qlusbya8v.s[17]++,User.findOne({email:trimmedEmail},this.includeString,function(error,user){cov_qlusbya8v.f[5]++;cov_qlusbya8v.s[18]++;if(error){cov_qlusbya8v.b[1][0]++;cov_qlusbya8v.s[19]++;throw error;}else{cov_qlusbya8v.b[1][1]++;}cov_qlusbya8v.s[20]++;return user;}));cov_qlusbya8v.s[21]++;return promise;}/**
	 * Returns all users with the given role
	 * @param string roleId
	 * @return Promise
	 */loadByRole(roleId){cov_qlusbya8v.f[6]++;cov_qlusbya8v.s[22]++;return User.find({roles:roleId},this.includeString).exec();}/**
	 * Loads and returns the User who made the given request
	 * @param Request req
	 * @return Promise
	 */loadFromRequest(req){cov_qlusbya8v.f[7]++;const tokenParser=(cov_qlusbya8v.s[23]++,new TokenParser());const tokenVerifier=(cov_qlusbya8v.s[24]++,new TokenVerifier());const token=(cov_qlusbya8v.s[25]++,tokenVerifier.getTokenFromAuthHeader(req.get('Authorization')));const userId=(cov_qlusbya8v.s[26]++,tokenParser.getUserIdFromToken(token));cov_qlusbya8v.s[27]++;return this.loadOne(userId);}/**
	 * Loads a list of all users. Does not include passwords
	 * @return Promise
	 */loadAll(){cov_qlusbya8v.f[8]++;cov_qlusbya8v.s[28]++;return User.find({},this.includeString).populate('roles').exec();}/**
	 * @param string queryString
	 * @return Promise
	 */search(queryString){cov_qlusbya8v.f[9]++;const regex=(cov_qlusbya8v.s[29]++,new RegExp('.*'+queryString+'.*','i'));const options=(cov_qlusbya8v.s[30]++,[{'firstName':{$regex:regex}},{'lastName':{$regex:regex}}]);const query=(cov_qlusbya8v.s[31]++,{$or:options});cov_qlusbya8v.s[32]++;return User.find(query,this.includeString).populate('roles').exec();}/**
	 * Saves the given User and returns its Promise
	 * @param User user
	 * @return Promise
	 */save(user){cov_qlusbya8v.f[10]++;cov_qlusbya8v.s[33]++;return user.save();}/**
	 * Completely removes the given user from the database
	 * @param string userId
	 * @return Promise
	 */deleteUser(userId){cov_qlusbya8v.f[11]++;cov_qlusbya8v.s[34]++;return User.remove({'_id':userId}).exec();}}cov_qlusbya8v.s[35]++;module.exports=UserDao;
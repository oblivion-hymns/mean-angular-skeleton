var cov_levbh3ruf=function(){var path='/home/bwilbur/projects/mercury/modules/auth/models/token-verifier.js',hash='ba39484f965e13e32d08d126f160ee16968e4eda',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/auth/models/token-verifier.js',statementMap:{'0':{start:{line:1,column:12},end:{line:1,column:35}},'1':{start:{line:15,column:21},end:{line:15,column:45}},'2':{start:{line:16,column:16},end:{line:16,column:80}},'3':{start:{line:17,column:2},end:{line:17,column:15}},'4':{start:{line:27,column:2},end:{line:30,column:3}},'5':{start:{line:29,column:3},end:{line:29,column:13}},'6':{start:{line:32,column:16},end:{line:32,column:49}},'7':{start:{line:33,column:2},end:{line:33,column:15}},'8':{start:{line:43,column:2},end:{line:50,column:3}},'9':{start:{line:45,column:3},end:{line:45,column:31}},'10':{start:{line:49,column:3},end:{line:49,column:16}},'11':{start:{line:52,column:2},end:{line:52,column:14}},'12':{start:{line:56,column:0},end:{line:56,column:31}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:13,column:1},end:{line:13,column:2}},loc:{start:{line:14,column:1},end:{line:18,column:2}},line:14},'1':{name:'(anonymous_1)',decl:{start:{line:25,column:1},end:{line:25,column:2}},loc:{start:{line:26,column:1},end:{line:34,column:2}},line:26},'2':{name:'(anonymous_2)',decl:{start:{line:41,column:1},end:{line:41,column:2}},loc:{start:{line:42,column:1},end:{line:53,column:2}},line:42}},branchMap:{'0':{loc:{start:{line:16,column:16},end:{line:16,column:80}},type:'binary-expr',locations:[{start:{line:16,column:16},end:{line:16,column:55}},{start:{line:16,column:59},end:{line:16,column:74}},{start:{line:16,column:78},end:{line:16,column:80}}],line:16},'1':{loc:{start:{line:27,column:2},end:{line:30,column:3}},type:'if',locations:[{start:{line:27,column:2},end:{line:30,column:3}},{start:{line:27,column:2},end:{line:30,column:3}}],line:27}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const jwt=(cov_levbh3ruf.s[0]++,require('jsonwebtoken'));/**
 * In charge of verifying JSON web tokens
 */class TokenVerifier{/**
	 * Returns the token from the given request
	 * @param Request req
	 * @return string
	 */getTokenFromRequest(req){cov_levbh3ruf.f[0]++;const authHeader=(cov_levbh3ruf.s[1]++,req.get('Authorization'));const token=(cov_levbh3ruf.s[2]++,(cov_levbh3ruf.b[0][0]++,this.getTokenFromAuthHeader(authHeader))||(cov_levbh3ruf.b[0][1]++,req.query.token)||(cov_levbh3ruf.b[0][2]++,''));cov_levbh3ruf.s[3]++;return token;}/**
	 * Returns a token based on a given authorization header ("Bearer ...")
	 * @param string authHeader - The "Authorization" header string from an HTTP request
	 * @return string
	 */getTokenFromAuthHeader(authHeader){cov_levbh3ruf.f[1]++;cov_levbh3ruf.s[4]++;if(!authHeader){cov_levbh3ruf.b[1][0]++;cov_levbh3ruf.s[5]++;return'';}else{cov_levbh3ruf.b[1][1]++;}const token=(cov_levbh3ruf.s[6]++,authHeader.replace('Bearer ',''));cov_levbh3ruf.s[7]++;return token;}/**
	 * Returns true if the given token is valid, false if it is not
	 * @param string token
	 * @return boolean
	 */isValid(token){cov_levbh3ruf.f[2]++;cov_levbh3ruf.s[8]++;try{cov_levbh3ruf.s[9]++;jwt.verify(token,'secret');}catch(e){cov_levbh3ruf.s[10]++;return false;}cov_levbh3ruf.s[11]++;return true;}}cov_levbh3ruf.s[12]++;module.exports=TokenVerifier;
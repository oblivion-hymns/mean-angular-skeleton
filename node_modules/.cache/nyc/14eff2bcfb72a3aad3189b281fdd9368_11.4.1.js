var cov_2eu06nzhgn=function(){var path='/home/bwilbur/projects/mercury/modules/auth/models/role-dao.js',hash='13cb088cfa750872a8e0c3558e379e01b99fee5c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/bwilbur/projects/mercury/modules/auth/models/role-dao.js',statementMap:{'0':{start:{line:1,column:17},end:{line:1,column:36}},'1':{start:{line:2,column:13},end:{line:2,column:30}},'2':{start:{line:3,column:13},end:{line:3,column:48}},'3':{start:{line:14,column:2},end:{line:14,column:64}},'4':{start:{line:24,column:2},end:{line:24,column:71}},'5':{start:{line:33,column:2},end:{line:33,column:39}},'6':{start:{line:42,column:2},end:{line:42,column:41}},'7':{start:{line:51,column:2},end:{line:51,column:33}},'8':{start:{line:59,column:2},end:{line:59,column:87}},'9':{start:{line:68,column:2},end:{line:68,column:67}},'10':{start:{line:78,column:2},end:{line:80,column:5}},'11':{start:{line:79,column:3},end:{line:79,column:39}},'12':{start:{line:91,column:13},end:{line:91,column:44}},'13':{start:{line:92,column:17},end:{line:92,column:45}},'14':{start:{line:93,column:18},end:{line:93,column:59}},'15':{start:{line:94,column:2},end:{line:94,column:17}},'16':{start:{line:105,column:13},end:{line:105,column:44}},'17':{start:{line:106,column:17},end:{line:106,column:41}},'18':{start:{line:107,column:18},end:{line:107,column:59}},'19':{start:{line:108,column:2},end:{line:108,column:17}},'20':{start:{line:119,column:23},end:{line:119,column:54}},'21':{start:{line:120,column:29},end:{line:120,column:66}},'22':{start:{line:121,column:17},end:{line:121,column:63}},'23':{start:{line:122,column:18},end:{line:122,column:69}},'24':{start:{line:123,column:2},end:{line:123,column:17}},'25':{start:{line:134,column:23},end:{line:134,column:54}},'26':{start:{line:135,column:29},end:{line:135,column:66}},'27':{start:{line:136,column:17},end:{line:136,column:59}},'28':{start:{line:137,column:18},end:{line:137,column:69}},'29':{start:{line:138,column:2},end:{line:138,column:17}},'30':{start:{line:149,column:2},end:{line:149,column:26}},'31':{start:{line:150,column:2},end:{line:150,column:30}},'32':{start:{line:152,column:18},end:{line:161,column:4}},'33':{start:{line:153,column:3},end:{line:156,column:4}},'34':{start:{line:155,column:4},end:{line:155,column:17}},'35':{start:{line:158,column:3},end:{line:158,column:58}},'36':{start:{line:160,column:3},end:{line:160,column:17}},'37':{start:{line:163,column:2},end:{line:163,column:17}},'38':{start:{line:167,column:0},end:{line:167,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:12,column:1},end:{line:12,column:2}},loc:{start:{line:13,column:1},end:{line:15,column:2}},line:13},'1':{name:'(anonymous_1)',decl:{start:{line:22,column:1},end:{line:22,column:2}},loc:{start:{line:23,column:1},end:{line:25,column:2}},line:23},'2':{name:'(anonymous_2)',decl:{start:{line:31,column:1},end:{line:31,column:2}},loc:{start:{line:32,column:1},end:{line:34,column:2}},line:32},'3':{name:'(anonymous_3)',decl:{start:{line:40,column:1},end:{line:40,column:2}},loc:{start:{line:41,column:1},end:{line:43,column:2}},line:41},'4':{name:'(anonymous_4)',decl:{start:{line:49,column:1},end:{line:49,column:2}},loc:{start:{line:50,column:1},end:{line:52,column:2}},line:50},'5':{name:'(anonymous_5)',decl:{start:{line:57,column:1},end:{line:57,column:2}},loc:{start:{line:58,column:1},end:{line:60,column:2}},line:58},'6':{name:'(anonymous_6)',decl:{start:{line:66,column:1},end:{line:66,column:2}},loc:{start:{line:67,column:1},end:{line:69,column:2}},line:67},'7':{name:'(anonymous_7)',decl:{start:{line:76,column:1},end:{line:76,column:2}},loc:{start:{line:77,column:1},end:{line:81,column:2}},line:77},'8':{name:'(anonymous_8)',decl:{start:{line:78,column:35},end:{line:78,column:36}},loc:{start:{line:78,column:43},end:{line:80,column:3}},line:78},'9':{name:'(anonymous_9)',decl:{start:{line:89,column:1},end:{line:89,column:2}},loc:{start:{line:90,column:1},end:{line:95,column:2}},line:90},'10':{name:'(anonymous_10)',decl:{start:{line:103,column:1},end:{line:103,column:2}},loc:{start:{line:104,column:1},end:{line:109,column:2}},line:104},'11':{name:'(anonymous_11)',decl:{start:{line:117,column:1},end:{line:117,column:2}},loc:{start:{line:118,column:1},end:{line:124,column:2}},line:118},'12':{name:'(anonymous_12)',decl:{start:{line:132,column:1},end:{line:132,column:2}},loc:{start:{line:133,column:1},end:{line:139,column:2}},line:133},'13':{name:'(anonymous_13)',decl:{start:{line:147,column:1},end:{line:147,column:2}},loc:{start:{line:148,column:1},end:{line:164,column:2}},line:148},'14':{name:'(anonymous_14)',decl:{start:{line:152,column:49},end:{line:152,column:50}},loc:{start:{line:152,column:57},end:{line:159,column:3}},line:152},'15':{name:'(anonymous_15)',decl:{start:{line:159,column:10},end:{line:159,column:11}},loc:{start:{line:159,column:18},end:{line:161,column:3}},line:159}},branchMap:{'0':{loc:{start:{line:79,column:10},end:{line:79,column:38}},type:'binary-expr',locations:[{start:{line:79,column:10},end:{line:79,column:29}},{start:{line:79,column:33},end:{line:79,column:38}}],line:79},'1':{loc:{start:{line:149,column:11},end:{line:149,column:25}},type:'binary-expr',locations:[{start:{line:149,column:11},end:{line:149,column:17}},{start:{line:149,column:21},end:{line:149,column:25}}],line:149},'2':{loc:{start:{line:150,column:13},end:{line:150,column:29}},type:'binary-expr',locations:[{start:{line:150,column:13},end:{line:150,column:21}},{start:{line:150,column:25},end:{line:150,column:29}}],line:150},'3':{loc:{start:{line:153,column:3},end:{line:156,column:4}},type:'if',locations:[{start:{line:153,column:3},end:{line:156,column:4}},{start:{line:153,column:3},end:{line:156,column:4}}],line:153}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0,'36':0,'37':0,'38':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const mongoose=(cov_2eu06nzhgn.s[0]++,require('mongoose'));const Role=(cov_2eu06nzhgn.s[1]++,require('./role'));const User=(cov_2eu06nzhgn.s[2]++,require('./../../user/models/user'));class RoleDao{/**
	 * Loads a single role by ID
	 * @param string id
	 * @return Promise
	 */loadOne(id){cov_2eu06nzhgn.f[0]++;cov_2eu06nzhgn.s[3]++;return Role.findOne({_id:id}).populate('permissions').exec();}/**
	 * Returns the role with the given name, if one exists
	 * @param string roleName
	 * @return Promise
	 */loadByName(roleName){cov_2eu06nzhgn.f[1]++;cov_2eu06nzhgn.s[4]++;return Role.findOne({name:roleName}).populate('permissions').exec();}/**
	 * Returns the Agency Rep role
	 * @return Promise
	 */loadAgencyRepRole(){cov_2eu06nzhgn.f[2]++;cov_2eu06nzhgn.s[5]++;return this.loadByName('Agency Rep');}/**
	 * Returns the Building Rep role
	 * @return Promise
	 */loadBuildingRepRole(){cov_2eu06nzhgn.f[3]++;cov_2eu06nzhgn.s[6]++;return this.loadByName('Building Rep');}/**
	 * Returns the default "User" role
	 * @return Promise
	 */loadUserRole(){cov_2eu06nzhgn.f[4]++;cov_2eu06nzhgn.s[7]++;return this.loadByName('User');}/**
	 * Returns only roles assignable by OSGS users
	 */loadOSGSRoles(){cov_2eu06nzhgn.f[5]++;cov_2eu06nzhgn.s[8]++;return Role.find({osgsAssignable:true}).sort('name').populate('permissions').exec();}/**
	 * Returns a list of all Roles
	 * @return Promise
	 */loadAll(){cov_2eu06nzhgn.f[6]++;cov_2eu06nzhgn.s[9]++;return Role.find({}).sort('name').populate('permissions').exec();}/**
	 * Determines whether the given role is an OSGS-assignable role
	 * @param string roleId
	 * @return Promise
	 */isRoleOSGSAssignable(roleId){cov_2eu06nzhgn.f[7]++;cov_2eu06nzhgn.s[10]++;return this.loadOne(roleId).then(role=>{cov_2eu06nzhgn.f[8]++;cov_2eu06nzhgn.s[11]++;return(cov_2eu06nzhgn.b[0][0]++,role.osgsAssignable)||(cov_2eu06nzhgn.b[0][1]++,false);});}/**
	 * Assigns the given role to the given user
	 * @param string userId
	 * @param string roleId
	 * @return Promise
	 */assignRole(userId,roleId){cov_2eu06nzhgn.f[9]++;const id=(cov_2eu06nzhgn.s[12]++,mongoose.Types.ObjectId(userId));const update=(cov_2eu06nzhgn.s[13]++,{$addToSet:{roles:roleId}});const promise=(cov_2eu06nzhgn.s[14]++,User.findByIdAndUpdate(id,update).exec());cov_2eu06nzhgn.s[15]++;return promise;}/**
	 * Removes the given role from the given user
	 * @param string userId
	 * @param string roleId
	 * @return Promise
	 */unassignRole(userId,roleId){cov_2eu06nzhgn.f[10]++;const id=(cov_2eu06nzhgn.s[16]++,mongoose.Types.ObjectId(userId));const update=(cov_2eu06nzhgn.s[17]++,{$pull:{roles:roleId}});const promise=(cov_2eu06nzhgn.s[18]++,User.findByIdAndUpdate(id,update).exec());cov_2eu06nzhgn.s[19]++;return promise;}/**
	 * Assigns the given permission to the given role
	 * @param string roleId
	 * @param string permissionId
	 * @return Promise
	 */assignPermission(roleId,permissionId){cov_2eu06nzhgn.f[11]++;const roleObjectId=(cov_2eu06nzhgn.s[20]++,mongoose.Types.ObjectId(roleId));const permissionObjectId=(cov_2eu06nzhgn.s[21]++,mongoose.Types.ObjectId(permissionId));const update=(cov_2eu06nzhgn.s[22]++,{$addToSet:{permissions:permissionObjectId}});const promise=(cov_2eu06nzhgn.s[23]++,Role.findByIdAndUpdate(roleObjectId,update).exec());cov_2eu06nzhgn.s[24]++;return promise;}/**
	 * Removes the given permission from the given role
	 * @param string roleId
	 * @param string permissionId
	 * @return Promise
	 */unassignPermission(roleId,permissionId){cov_2eu06nzhgn.f[12]++;const roleObjectId=(cov_2eu06nzhgn.s[25]++,mongoose.Types.ObjectId(roleId));const permissionObjectId=(cov_2eu06nzhgn.s[26]++,mongoose.Types.ObjectId(permissionId));const update=(cov_2eu06nzhgn.s[27]++,{$pull:{permissions:permissionObjectId}});const promise=(cov_2eu06nzhgn.s[28]++,Role.findByIdAndUpdate(roleObjectId,update).exec());cov_2eu06nzhgn.s[29]++;return promise;}/**
	 * Determines whether or not the User with the given ID has the given role
	 * @param string userId
	 * @param string roleName
	 * @return Promise
	 */hasRole(userId,roleName){cov_2eu06nzhgn.f[13]++;cov_2eu06nzhgn.s[30]++;userId=(cov_2eu06nzhgn.b[1][0]++,userId)||(cov_2eu06nzhgn.b[1][1]++,null);cov_2eu06nzhgn.s[31]++;roleName=(cov_2eu06nzhgn.b[2][0]++,roleName)||(cov_2eu06nzhgn.b[2][1]++,null);const promise=(cov_2eu06nzhgn.s[32]++,this.loadByName(roleName).then(role=>{cov_2eu06nzhgn.f[14]++;cov_2eu06nzhgn.s[33]++;if(!role){cov_2eu06nzhgn.b[3][0]++;cov_2eu06nzhgn.s[34]++;return false;}else{cov_2eu06nzhgn.b[3][1]++;}cov_2eu06nzhgn.s[35]++;return User.findOne({_id:userId,roles:role}).exec();}).then(user=>{cov_2eu06nzhgn.f[15]++;cov_2eu06nzhgn.s[36]++;return!!user;}));cov_2eu06nzhgn.s[37]++;return promise;}}cov_2eu06nzhgn.s[38]++;module.exports=RoleDao;